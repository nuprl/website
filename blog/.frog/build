((3) 0 () 88 ((p+ #"/home/runner/work/website/website/blog/_src/posts/2022-01-06-introducing-visr-md.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2016-06-07-icfp-2016-looking-for-student-volunteers.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-03-03-metafunction-apply.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-05-04-rank-polymorphism.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2018-01-17-how-to-prove-a-compiler-correct.md" . unix) (u . "") (p+ #"/home/runner/work/website/website/blog/_src/posts/2018-01-19-untyped-programs-don-t-exist.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2016-10-11-compcert-overview.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-06-16-spring-2017-pl-junior-retrospective.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-07-17-continuations-1983.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-06-24-turing-award-50.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2019-09-05-lexical-and-dynamic-scope.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-05-01-hopl-dyn-cats.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2016-11-02-beta-reduction-part-1.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-02-28-pliss-oregon-without-the-greek.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-04-04-top-5-in-last-50.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-09-27-final-algebra-semantics-is-observational-equivalence.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-11-16-monotonicity-types-towards-a-type-system-for-eventual-consistency.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-09-25-redex-faq.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2018-04-12-making-an-ide-plugin-for-drracket.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2022-02-16-rsh-overview-1.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-03-24-what-even-is-compiler-correctness.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-05-15-artifacts-for-semantics.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-05-09-hopl-no-good-answers.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2016-06-29-tutorial-racket-ffi-part-2.scrbl" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-02-21-bullets-are-good-for-your-coq-proofs.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-02-28-hopl2017-linear-types.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2016-06-13-does-anyone-still-care-about-printed-proceedings-grab-some-at-neu-this-week.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2016-06-27-tutorial-using-racket-s-ffi.scrbl" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-02-15-hopl2017-conversational-context.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-02-21-datalog-for-static-analysis.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2019-04-07-forgetful-and-heedful-contracts.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2019-05-11-conversational-concurrency.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2018-11-30-turnstile-community.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2018-10-22-defining-local-bindings-in-turnstile-languages.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2018-11-24-disappearing-code.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2016-11-30-getting-started-in-programming-languages-cross-post.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2018-04-23-how-to-prove-a-compiler-fully-abstract.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2019-09-10-scoping-in-r.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2019-03-09-pliss-learn-about-pl-implementation-in-a-castle.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2016-05-03-nepls-on-may-31st-at-umass-amherst.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2016-11-16-constructive-galois-connections.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2016-11-17-src-submissions.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2016-12-17-measuring-the-submission-review-balance.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2020-11-12-transient-opt-kw-lambda.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2020-12-23-deep-and-shallow-types.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2016-08-03-a-few-cores-too-many.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2016-09-15-nepls-on-october-7th-at-northeastern.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-06-05-trip-report-pliss-2017.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-06-09-bridging-the-system-configuration-gap.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-05-24-plc-russia.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-05-23-scribble-html.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2016-07-25-tutorial-zero-to-sixty-in-racket.scrbl" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2016-07-11-tutorial-racket-ffi-part-3.scrbl" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2019-02-17-scribble-acmart.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2016-10-19-history-of-actors.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2016-10-17-emacs-daemon-for-fast-editor-startup.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2016-10-31-meaningful-distinctions.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-08-22-gradual-typing-across-the-spectrum.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2018-04-27-racket-school-2018.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-01-03-toward-type-preserving-compilation-of-coq-at-popl17-src.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-01-02-fall-2016-pl-junior-retrospective.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-02-16-hopl2017-intro.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2018-12-02-java-transient.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2019-12-12-prl-offsite-2019.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-08-13-reviews-and-author-responses.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-07-19-trees-1973.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2016-04-29-welcome-to-the-prl-blog.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2016-05-24-measuring-gc-latencies-in-haskell-ocaml-racket.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2016-05-18-gradual-typing-across-the-spectrum.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2019-10-31-complete-monitors-for-gradual-types.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2019-09-10-four-kinds-of-scoping-in-r.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2020-10-15-shallow-mailing-list.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2020-01-15-tr-optimizer-vs-transient.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-08-29-why-am-i-going-to-icfp-2017.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-08-28-closure-conversion-coyoneda.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2019-01-28-on-stack-replacement.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2018-12-11-the-behavior-of-gradual-types.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2018-10-06-a-spectrum-of-type-soundness-and-performance.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2018-05-08-sampling-gradual-typing-performance.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-05-26-racket-6-9-and-windows-10-creators-update.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-06-05-syntactic-parametricity-strikes-again.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-03-15-tracing-jits-for-dynamic-languages.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-03-10-hopl-stack.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-04-20-hopl-refinement-types.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-04-17-hopl-types-in-compilation.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-04-25-prl-at-snapl-17.md" . unix) (p+ #"/home/runner/work/website/website/blog/_src/posts/2017-04-28-hopl-soft-typing.md" . unix)) () (h ! (equal) ((? . 0) f post (u . "Introducing Visual and Interactive-Syntax realized (VISr) for ClojureScript (and JavaScript)") (? . 0) 1731904015 (p+ #"/home/runner/work/website/website/blog/2022/01/06/introducing-visual-and-interactive-syntax-realized-visr-for-clojurescript-and-javascript/index.html" . unix) (u . "/blog/2022/01/06/introducing-visual-and-interactive-syntax-realized-visr-for-clojurescript-and-javascript/") (u . "2022-01-06T17:56:08") (? . 45) (? . 20) (c (u . "visr") c (u . "clojure") c (u . "clojurescript") c (u . "interactive syntax") c (u . "Author: Leif Andersen")) (u . "\n<p>\n <style>.caption {  display: none; }</style></p>\n\n<p>Visual and interactive-syntax is a type of language-oriented programming that allows developers to use, view, and edit portions of a textual program with graphics. Using interactive-syntax provides the benefits of a graphical programming language, while keeping all of the benefits of a purely textual language. For example, the following is an example of a small network embedded in a program:</p>\n\n<div class=\"figure\"><img src=\"/img/intro-visr/visr-and-text.png\" alt=\"Graphical network embedded in text\" />\n <p class=\"caption\">Graphical network embedded in text</p></div>\n\n<p>Interactive-syntax is backed by human readable code; the visual components exists purely when writing and editing code. This backing means all of the tools involved in software development work with interactive-syntax extensions. For example:</p>\n\n<ul>\n <li>version control, such as git, works with interactive-syntax;</li>\n <li>programs using interactive-syntax can be written and edited with your favorite  text editor or IDE;</li>\n <li>cut/copy/paste works with interactive-syntax using your operating system&rsquo;s  native clipboard;</li>\n <li>code analysis tools, like diff and refactor, still work with  interactive-syntax; and</li>\n <li>you can use interactive-syntax in any language or environment that supports  language-oriented programming.</li></ul>\n\n<p>To learn more about interactive-syntax, watch <a href=\"https://www.youtube.com/watch?v=8htgAxJuK5c\">this video</a> or read <a href=\"https://dl.acm.org/doi/10.1145/3428290\">the accompanying paper</a>.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/8htgAxJuK5c\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"allowfullscreen\"></iframe>\n\n<p><a href=\"https://visr.pl\">VISr (Visual and Interactive-Syntax realized) for ClojureScript</a> is a practical implementation of interactive-syntax in web browsers. The VISr environment is a full-featured IDE that supports interactive-syntax components called VISrs. Additionally, the VISr environment comes with a package manager that supports <a href=\"https://www.npmjs.com/\">NPM packages</a>.</p>\n\n<p>This article is a brief introduction to both the VISr environment and the components that make up a VISrs. It discusses how to insert a VISr into code, how to manipulate a VISr, and how to create a new types of VISr. Future articles will discuss more advanced uses such as integrating NPM packages and using VISrs in other languages.</p>") #t (u . "\n<p>\n <style>.caption {  display: none; }</style></p>\n\n<p>Visual and interactive-syntax is a type of language-oriented programming that allows developers to use, view, and edit portions of a textual program with graphics. Using interactive-syntax provides the benefits of a graphical programming language, while keeping all of the benefits of a purely textual language. For example, the following is an example of a small network embedded in a program:</p>\n\n<div class=\"figure\"><img src=\"/img/intro-visr/visr-and-text.png\" alt=\"Graphical network embedded in text\" />\n <p class=\"caption\">Graphical network embedded in text</p></div>\n\n<p>Interactive-syntax is backed by human readable code; the visual components exists purely when writing and editing code. This backing means all of the tools involved in software development work with interactive-syntax extensions. For example:</p>\n\n<ul>\n <li>version control, such as git, works with interactive-syntax;</li>\n <li>programs using interactive-syntax can be written and edited with your favorite  text editor or IDE;</li>\n <li>cut/copy/paste works with interactive-syntax using your operating system&rsquo;s  native clipboard;</li>\n <li>code analysis tools, like diff and refactor, still work with  interactive-syntax; and</li>\n <li>you can use interactive-syntax in any language or environment that supports  language-oriented programming.</li></ul>\n\n<p>To learn more about interactive-syntax, watch <a href=\"https://www.youtube.com/watch?v=8htgAxJuK5c\">this video</a> or read <a href=\"https://dl.acm.org/doi/10.1145/3428290\">the accompanying paper</a>.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/8htgAxJuK5c\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"allowfullscreen\"></iframe>\n\n<p><a href=\"https://visr.pl\">VISr (Visual and Interactive-Syntax realized) for ClojureScript</a> is a practical implementation of interactive-syntax in web browsers. The VISr environment is a full-featured IDE that supports interactive-syntax components called VISrs. Additionally, the VISr environment comes with a package manager that supports <a href=\"https://www.npmjs.com/\">NPM packages</a>.</p>\n\n<p>This article is a brief introduction to both the VISr environment and the components that make up a VISrs. It discusses how to insert a VISr into code, how to manipulate a VISr, and how to create a new types of VISr. Future articles will discuss more advanced uses such as integrating NPM packages and using VISrs in other languages.</p>\n<!-- more-->\n\n<h1 id=\"getting-started-with-visr\">Getting started with VISr</h1>\n\n<p>Start by going to <a href=\"https://visr.pl\">visr.pl</a>, which is a web-based IDE that directly supports VISrs. Once in the IDE, press <code>Insert VISr</code> to place a VISr at the current cursor position. This VISr contains two buttons:</p>\n\n<ul>\n <li>clicking the first displays the VISr&rsquo;s visual representation, and</li>\n <li>clicking the second shows its textual representation.</li></ul>\n\n<div class=\"figure\"><img src=\"/img/intro-visr/visr.png\" alt=\"VISr\" />\n <p class=\"caption\">VISr</p></div>\n\n<p>Opening the code shows that the new VISr is an instance of <code>visr.core/empty-visr</code>, a default VISr provided by the IDE. This VISr expects a map with the key <code>:message</code> to display in the visual view. Changing the value associated with <code>:message</code> changes what is displayed, in this case &ldquo;Endless Possibility&rdquo;:</p>\n\n<div class=\"figure\"><img src=\"/img/intro-visr/visr-open.png\" alt=\"Open Visr\" />\n <p class=\"caption\">Open Visr</p></div>\n\n<p>Remember that, although this VISr is displayed graphically, it still exists as human-readable text. One way to see this text is by copying and pasting the VISr. A copy of the same VISr will appear when it is placed back into the IDE. However, pasting it into other text editors that do not natively support VISrs yields the following human readable, and editable, text:</p>\n\n<div class=\"brush: clojurescript\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"o\">^</span><span class=\"p\">{</span><span class=\"ss\">:editor</span> <span class=\"nv\">visr.core/empty-visr</span><span class=\"p\">}(</span><span class=\"nf\">visr.core/empty-visr+elaborate</span> \n                                 <span class=\"p\">{</span><span class=\"ss\">:message</span> <span class=\"s\">\"Endless Possibility\"</span><span class=\"p\">})</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This operation works in reverse too. Writing out similar text and pasting it into <a href=\"https://visr.pl\">visr.pl</a> yields its visual representation.</p>\n\n<h1 id=\"making-a-new-visr\">Making a new VISr</h1>\n\n<p>The <code>defvisr</code> form creates a VISr type. This form expects two methods:</p>\n\n<ol>\n <li>a <code>render</code> method that provides visualization and interaction when code is  edited, and</li>\n <li>an <code>elaborate</code>/<code>elaborate-fn</code> method that gives the VISr compile-time and  run-time semantics.</li></ol>\n\n<p>The following is the signature for a simple VISr type:</p>\n\n<div class=\"brush: clojurescript\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"kd\">ns </span><span class=\"nv\">example.core</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"nf\">defvisr</span> <span class=\"nv\">Counter</span>\n  <span class=\"p\">(</span><span class=\"nf\">elaborate-fn</span> <span class=\"p\">[</span><span class=\"nv\">this</span><span class=\"p\">]</span> <span class=\"s\">\"TODO-elaborate\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nf\">render</span> <span class=\"p\">[</span><span class=\"nv\">this</span><span class=\"p\">]</span> <span class=\"s\">\"TODO-render\"</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This example uses <code>elaborate-fn</code>, a simplified version of <code>elaborate</code> that gives the <code>VISr</code> the same semantics as a function application. It also allows the <code>defvisr</code> form to work in the same file as the VISr itself.</p>\n\n<div class=\"figure\"><img src=\"/img/intro-visr/sig.png\" alt=\"Example of elaborate-fn semantics\" />\n <p class=\"caption\">Example of elaborate-fn semantics</p></div>\n\n<h1 id=\"the-render-method-for-edit-time-semantics\">The Render Method for Edit-Time Semantics</h1>\n\n<p>The <code>render</code> method is given the VISr state <a href=\"https://clojure.org/reference/atoms\">as an atom</a>; updating this atom also updates the code to reflect the new state. The return value for <code>render</code> must be a <a href=\"https://reagent-project.github.io/\">Reagent form</a> that is the visual view for the VISr. A render method for a counter VISr might look as follows:</p>\n\n<div class=\"brush: clojurescript\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"nf\">render</span> <span class=\"p\">[</span><span class=\"nv\">this</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"ss\">:button</span> <span class=\"p\">{</span><span class=\"ss\">:on-click</span> <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"nf\">swap!</span> <span class=\"nv\">this</span> <span class=\"nv\">inc</span><span class=\"p\">)}</span> <span class=\"o\">@</span><span class=\"nv\">this</span><span class=\"p\">])</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>And in action:</p>\n\n<div class=\"figure\"><img src=\"/img/intro-visr/simpl-count.png\" alt=\"Simple Count Example\" />\n <p class=\"caption\">Simple Count Example</p></div>\n\n<p>This VISr doesn&rsquo;t match the theme of the page; it also requires the state to be a single number. Using <a href=\"https://react-bootstrap.github.io/\">React Bootstrap</a> and Reagent cursors fixes both of these issues:</p>\n\n<div class=\"brush: clojurescript\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"kd\">ns </span><span class=\"nv\">example.core</span>\n  <span class=\"p\">(</span><span class=\"ss\">:require</span> <span class=\"p\">[</span><span class=\"nv\">reagent.core</span> <span class=\"ss\">:refer</span> <span class=\"p\">[</span><span class=\"nv\">cursor</span><span class=\"p\">]]</span>\n            <span class=\"p\">[</span><span class=\"nv\">react-bootstrap</span> <span class=\"ss\">:refer</span> <span class=\"p\">[</span><span class=\"nv\">Button</span><span class=\"p\">]]))</span>\n            \n<span class=\"p\">(</span><span class=\"nf\">defvisr</span> <span class=\"nv\">Counter</span>\n  <span class=\"p\">(</span><span class=\"nf\">elaborate-fn</span> <span class=\"p\">[</span><span class=\"nv\">this</span><span class=\"p\">]</span> <span class=\"s\">\"TODO-elaborate\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nf\">render</span> <span class=\"p\">[</span><span class=\"nv\">this</span><span class=\"p\">]</span>\n    <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nb\">count </span><span class=\"p\">(</span><span class=\"nf\">cursor</span> <span class=\"nv\">this</span> <span class=\"p\">[</span><span class=\"ss\">:count</span><span class=\"p\">])]</span>\n      <span class=\"p\">(</span><span class=\"nb\">when-not </span><span class=\"o\">@</span><span class=\"nb\">count </span><span class=\"p\">(</span><span class=\"nf\">reset!</span> <span class=\"nb\">count </span><span class=\"mi\">0</span><span class=\"p\">))</span>\n      <span class=\"p\">[</span><span class=\"ss\">:&gt;</span> <span class=\"nv\">Button</span> <span class=\"p\">{</span><span class=\"ss\">:on-click</span> <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"nf\">swap!</span> <span class=\"nb\">count </span><span class=\"nv\">inc</span><span class=\"p\">)}</span> <span class=\"o\">@</span><span class=\"nv\">count</span><span class=\"p\">])))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h1 id=\"elaboration-and-run-time-semantics\">Elaboration and Run-Time Semantics</h1>\n\n<p>The elaborate method takes the VISr state, and is expected to provide a compile-time or run-time semantics. In the simplified case of <code>elaborate-fn</code>, the VISr semantics takes the form of a function application:</p>\n\n<div class=\"brush: clojurescript\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"nf\">elaborate-fn</span> <span class=\"p\">[{</span><span class=\"ss\">:keys</span> <span class=\"p\">[</span><span class=\"nv\">count</span><span class=\"p\">]}]</span> <span class=\"nv\">count</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This <code>elaborate</code> method expects a dictionary with the key <code>:count</code> and returns the value associated with that key. It makes use of <a href=\"https://clojure.org/guides/destructuring\">ClojureScript&rsquo;s Destructuring</a> for brevity. The following code is equivalent:</p>\n\n<div class=\"brush: clojurescript\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"nf\">elaborate-fn</span> <span class=\"p\">[</span><span class=\"nv\">this</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">get </span><span class=\"nv\">this</span> <span class=\"ss\">:count</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h1 id=\"putting-it-all-together\">Putting it all together</h1>\n\n<p>The final result is:</p>\n\n<div class=\"brush: clojurescript\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"kd\">ns </span><span class=\"nv\">test.core</span>\n  <span class=\"p\">(</span><span class=\"ss\">:require</span> <span class=\"p\">[</span><span class=\"nv\">reagent.core</span> <span class=\"ss\">:refer</span> <span class=\"p\">[</span><span class=\"nv\">cursor</span><span class=\"p\">]]</span>\n            <span class=\"p\">[</span><span class=\"nv\">react-bootstrap</span> <span class=\"ss\">:refer</span> <span class=\"p\">[</span><span class=\"nv\">Button</span><span class=\"p\">]]))</span>\n\n<span class=\"p\">(</span><span class=\"nf\">defvisr</span> <span class=\"nv\">Counter</span>\n  <span class=\"p\">(</span><span class=\"nf\">elaborate-fn</span> <span class=\"p\">[{</span><span class=\"ss\">:keys</span> <span class=\"p\">[</span><span class=\"nv\">count</span><span class=\"p\">]}]</span> <span class=\"nv\">count</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nf\">render</span> <span class=\"p\">[</span><span class=\"nv\">this</span><span class=\"p\">]</span>\n    <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nb\">count </span><span class=\"p\">(</span><span class=\"nf\">cursor</span> <span class=\"nv\">this</span> <span class=\"p\">[</span><span class=\"ss\">:count</span><span class=\"p\">])]</span>\n      <span class=\"p\">(</span><span class=\"nb\">when-not </span><span class=\"o\">@</span><span class=\"nb\">count </span><span class=\"p\">(</span><span class=\"nf\">reset!</span> <span class=\"nb\">count </span><span class=\"mi\">0</span><span class=\"p\">))</span>\n      <span class=\"p\">[</span><span class=\"ss\">:&gt;</span> <span class=\"nv\">Button</span> <span class=\"p\">{</span><span class=\"ss\">:on-click</span> <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"nf\">swap!</span> <span class=\"nb\">count </span><span class=\"nv\">inc</span><span class=\"p\">)}</span> <span class=\"o\">@</span><span class=\"nv\">count</span><span class=\"p\">])))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Here is the VISr in action:</p>\n\n<div class=\"figure\"><img src=\"/img/intro-visr/full-count.png\" alt=\"Full Count Example\" />\n <p class=\"caption\">Full Count Example</p></div>\n\n<p>That&rsquo;s all there is to it. From here, you can go to <a href=\"https://visr.pl\">visr.pl</a> to make your own programs using VISr. You can also <a href=\"https://study.visr.pl\">take this survey</a>, which contains more advanced example uses for VISr. If you find any bugs or want to contribute, you can also head to <a href=\"https://github.com/LeifAndersen/interactive-syntax-clojure\">the visr project page</a>.</p>\n\n<p>Thanks for reading, happy coding!</p>")) ((? . 1) f post (u . "ICFP 2016: looking for student volunteers") (? . 1) 1731904015 (p+ #"/home/runner/work/website/website/blog/2016/06/07/icfp-2016-looking-for-student-volunteers/index.html" . unix) (u . "/blog/2016/06/07/icfp-2016-looking-for-student-volunteers/") (u . "2016-06-07T11:53:47") (? . 68) (? . 27) (c (u . "ICFP") c (u . "Author: Gabriel Scherer")) (u . "\n<p>If you are a student, you should consider <a href=\"http://goo.gl/forms/fKg3vpjNryBlGWB32\">applying</a> to become an ICFP 2016 student volunteer! The deadline for application is July 31st, 2016.</p>") #t (u . "\n<p>If you are a student, you should consider <a href=\"http://goo.gl/forms/fKg3vpjNryBlGWB32\">applying</a> to become an ICFP 2016 student volunteer! The deadline for application is July 31st, 2016.</p>\n<!-- more-->\n\n<p><a href=\"http://conf.researchr.org/attending/icfp-2016/Student+Volunteers\">ICFP 2016</a>, the Internal Conference on Functional Programming, is happening in Nara, Japan. If you are a student, you may be interest in being a Student Volunteer: you help run the conference, and in exchange do not pay registration fees &mdash; but you still have to find funding for the travel, hosting, and dinners. Quoting the <a href=\"http://conf.researchr.org/attending/icfp-2016/Student+Volunteers\">Student Volunteer</a> webpage:</p>\n\n<blockquote>\n <p>ICFP is pleased to offer a number of opportunities for student volunteers, who are vital to the efficient operation and continued success of the conference each year. The student volunteer program is a chance for students from around the world to participate in the conferences whilst assisting us in preparing and running the event.</p>\n <p>Job assignments for student volunteers include assisting with technical sessions, workshops, tutorials and panels, helping the registration desk, operating the information desk, helping with traffic flow, and general assistance to keep the conferences running smoothly.</p>\n <p>The Student Volunteer Program helps more students attend the ICFP conference by covering conference fees (but not travel or lodging expenses) in exchange for a fixed number of work hours (usually from 8 to 12) helping with the conference organization (registration and information desks, assistance during talk sessions, etc.).</p>\n <p>The Student Volunteer registration covers:</p>\n <ul>\n  <li>Access to all workshops and the main conference,</li>\n  <li>Daily lunches and coffee breaks,</li>\n  <li>Access to social events, including the banquet.</li></ul>\n <p>To apply, please fill the <a href=\"http://goo.gl/forms/fKg3vpjNryBlGWB32\">following form</a>.</p>\n <p>The application deadline is July 31st, 2016. Applications after this date may be considered pending availability.</p>\n <p>You can send questions about student volunteering to  <code>icfp-SV at researchr dot org</code>.</p></blockquote>\n\n<p>I was &ldquo;student volunteer captain&rdquo; at ICFP last year in Vancouver, and I will do it again this year. My entirely personal take on the thing is that being a Student Volunteer is worth it, but that being a Captain is too much work.</p>\n\n<p>The main downside of being a volunteer is some of the shifts are at the registration desk, and they may imply missing some of the talks &mdash; and also you may have to get up early for your duties. The upsides are many. You get belong to a small group of nice people. You have interactions with many people without much effort; you will enjoy the sparks of gratitude in the eyes of the &ldquo;Where is Workshop Room B2?&rdquo; crowd. You have a small peek into the kind of work involved in running a conference; most people actually working on the organization (we SVs are hobbyists) are pouring surprising amount of work. Also, you learn to fold tee-shirts very well, if you&rsquo;re on &ldquo;bag stuffing&rdquo; duty.</p>\n\n<p>Being a student volunteer can be combined with other forms of travel support, such as SIGPLAN PAC funding; see the <a href=\"http://conf.researchr.org/attending/icfp-2016/student-travel-support\">travel support page</a> for more details.</p>\n\n<p>Another thing you should think about is applying to <a href=\"http://conf.researchr.org/track/icfp-2016/PLMW-ICFP-2016\">PLMW</a>, the Programming Languages Mentoring Workshop that happens at ICFP, POPL, and PLDI. PLMW funding covers the whole conference cost (travel, housing, registration, dinners), so if you get PLMW funding you have no financial motivation to be a student volunteer. This year, PLMW focuses on early career graduate students.</p>")) ((? . 2) f post (u . "PLT Redex: mf-apply") (? . 2) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/03/03/plt-redex-mf-apply/index.html" . unix) (u . "/blog/2017/03/03/plt-redex-mf-apply/") (u . "2017-03-03T08:54:20") (? . 14) (? . 83) (c (u . "PLT Redex") c (u . "package") c (u . "lang-extension") c (u . "Author: Ben Greenman")) (u . "\n<p>The <code>mf-apply</code> keyword is for checked metafunction application in PLT Redex. In other words, <code>(mf-apply f x)</code> is just like <code>(f x)</code>, but errors if <code>f</code> is  not a previously-defined metafunction.</p>\n\n<p>Also, consider applying to attend <em>The Racket School of Semantics and Languages</em> in Salt Lake City this summer: <a href=\"http://summer-school.racket-lang.org/2017/\">http://summer-school.racket-lang.org/2017/</a></p>") #t (u . "\n<p>The <code>mf-apply</code> keyword is for checked metafunction application in PLT Redex. In other words, <code>(mf-apply f x)</code> is just like <code>(f x)</code>, but errors if <code>f</code> is  not a previously-defined metafunction.</p>\n\n<p>Also, consider applying to attend <em>The Racket School of Semantics and Languages</em> in Salt Lake City this summer: <a href=\"http://summer-school.racket-lang.org/2017/\">http://summer-school.racket-lang.org/2017/</a></p>\n<!-- more-->\n\n<h2 id=\"metafunctions-vs-list-patterns\">Metafunctions vs. List Patterns</h2>\n\n<p>Have you used PLT Redex? Good! Maybe this has happened to you:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span>\n<span class=\"normal\">39</span>\n<span class=\"normal\">40</span>\n<span class=\"normal\">41</span>\n<span class=\"normal\">42</span>\n<span class=\"normal\">43</span>\n<span class=\"normal\">44</span>\n<span class=\"normal\">45</span>\n<span class=\"normal\">46</span>\n<span class=\"normal\">47</span>\n<span class=\"normal\">48</span>\n<span class=\"normal\">49</span>\n<span class=\"normal\">50</span>\n<span class=\"normal\">51</span>\n<span class=\"normal\">52</span>\n<span class=\"normal\">53</span>\n<span class=\"normal\">54</span>\n<span class=\"normal\">55</span>\n<span class=\"normal\">56</span>\n<span class=\"normal\">57</span>\n<span class=\"normal\">58</span>\n<span class=\"normal\">59</span>\n<span class=\"normal\">60</span>\n<span class=\"normal\">61</span>\n<span class=\"normal\">62</span>\n<span class=\"normal\">63</span>\n<span class=\"normal\">64</span>\n<span class=\"normal\">65</span>\n<span class=\"normal\">66</span>\n<span class=\"normal\">67</span>\n<span class=\"normal\">68</span>\n<span class=\"normal\">69</span>\n<span class=\"normal\">70</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a></span> <span class=\"n\">redex</span><span class=\"p\">)</span>\n\n<span class=\"c1\">;; -----------------------------------------------------------------------------</span>\n<span class=\"c1\">;; 1. You define a language</span>\n<span class=\"p\">(</span><span class=\"n\">define-language</span> <span class=\"n\">STLC</span>\n  <span class=\"p\">[</span><span class=\"n\">V</span> <span class=\"n\">::=</span> <span class=\"n\">integer</span> <span class=\"n\">boolean</span> <span class=\"n\">C</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"n\">C</span> <span class=\"n\">::=</span> <span class=\"p\">(</span><span class=\"n\">closure</span> <span class=\"n\">Λ</span> <span class=\"n\">ρ</span><span class=\"p\">)]</span>\n  <span class=\"p\">[</span><span class=\"n\">Λ</span> <span class=\"n\">::=</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span> <span class=\"n\">τ</span><span class=\"p\">)</span> <span class=\"n\">M</span><span class=\"p\">)]</span>\n  <span class=\"p\">[</span><span class=\"n\">M</span> <span class=\"n\">::=</span> <span class=\"p\">(</span><span class=\"n\">M</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"n\">V</span> <span class=\"n\">Λ</span> <span class=\"n\">x</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"n\">τ</span> <span class=\"n\">::=</span> <span class=\"n\">Int</span> <span class=\"n\">Bool</span> <span class=\"p\">(</span><span class=\"n\">τ</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types-extra..rkt)._~e2~86~92))\" style=\"color: inherit\">→</a></span> <span class=\"n\">τ</span><span class=\"p\">)]</span>\n  <span class=\"p\">[</span><span class=\"n\">ρ</span> <span class=\"n\">::=</span> <span class=\"p\">((</span><span class=\"n\">x</span> <span class=\"n\">V</span><span class=\"p\">)</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)]</span>\n  <span class=\"p\">[</span><span class=\"n\">Γ</span> <span class=\"n\">::=</span> <span class=\"p\">((</span><span class=\"n\">x</span> <span class=\"n\">τ</span><span class=\"p\">)</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)]</span>\n  <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"n\">::=</span> <span class=\"n\">variable-not-otherwise-mentioned</span><span class=\"p\">]</span>\n  <span class=\"kd\">#:binding-forms</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span> <span class=\"n\">τ</span><span class=\"p\">)</span> <span class=\"n\">M</span> <span class=\"kd\">#:refers-to</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n\n\n<span class=\"c1\">;; -----------------------------------------------------------------------------</span>\n<span class=\"c1\">;; 2. You define a few metafunctions</span>\n<span class=\"p\">(</span><span class=\"n\">define-metafunction</span> <span class=\"n\">STLC</span>\n  <span class=\"n\">closure-&gt;lam</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span> <span class=\"n\">C</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/function-contracts.html#(form._((lib._racket/contract/base..rkt)._-~3e))\" style=\"color: inherit\">-&gt;</a></span> <span class=\"n\">Λ</span>\n  <span class=\"p\">[(</span><span class=\"n\">closure-&gt;lam</span> <span class=\"p\">(</span><span class=\"n\">closure</span> <span class=\"n\">Λ</span> <span class=\"n\">ρ</span><span class=\"p\">))</span>\n   <span class=\"n\">Λ</span><span class=\"p\">])</span>\n\n<span class=\"p\">(</span><span class=\"n\">define-metafunction</span> <span class=\"n\">STLC</span>\n  <span class=\"n\">closure-&gt;env</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span> <span class=\"n\">C</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/function-contracts.html#(form._((lib._racket/contract/base..rkt)._-~3e))\" style=\"color: inherit\">-&gt;</a></span> <span class=\"n\">ρ</span>\n  <span class=\"p\">[(</span><span class=\"n\">closure-&gt;env</span> <span class=\"p\">(</span><span class=\"n\">closure</span> <span class=\"n\">Λ</span> <span class=\"n\">ρ</span><span class=\"p\">))</span>\n   <span class=\"n\">ρ</span><span class=\"p\">])</span>\n\n\n<span class=\"c1\">;; -----------------------------------------------------------------------------</span>\n<span class=\"c1\">;; 3. You try defining a judgment form . . .</span>\n<span class=\"p\">(</span><span class=\"n\">define-judgment-form</span> <span class=\"n\">STLC</span>\n  <span class=\"kd\">#:mode</span> <span class=\"p\">(</span><span class=\"n\">free-variables</span> <span class=\"n\">I</span> <span class=\"n\">O</span><span class=\"p\">)</span>\n  <span class=\"kd\">#:contract</span> <span class=\"p\">(</span><span class=\"n\">free-variables</span> <span class=\"n\">M</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))</span>\n  <span class=\"p\">[</span>\n   <span class=\"n\">---</span> <span class=\"n\">FVS-Var</span>\n   <span class=\"p\">(</span><span class=\"n\">free-variables</span> <span class=\"n\">x</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))]</span>\n  <span class=\"p\">[</span>\n   <span class=\"p\">(</span><span class=\"n\">free-variables</span> <span class=\"n\">M_0</span> <span class=\"p\">(</span><span class=\"n\">x_0</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))</span>\n   <span class=\"p\">(</span><span class=\"n\">free-variables</span> <span class=\"n\">M_1</span> <span class=\"p\">(</span><span class=\"n\">x_1</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))</span>\n   <span class=\"n\">---</span> <span class=\"n\">FVS-App</span>\n   <span class=\"p\">(</span><span class=\"n\">free-variables</span> <span class=\"p\">(</span><span class=\"n\">M_0</span> <span class=\"n\">M_1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">x_0</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span> <span class=\"n\">x_1</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))]</span>\n  <span class=\"p\">[</span>\n   <span class=\"p\">(</span><span class=\"n\">where</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">x_0</span> <span class=\"n\">τ</span><span class=\"p\">)</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"n\">Λ</span><span class=\"p\">)</span>\n   <span class=\"p\">(</span><span class=\"n\">free-variables</span> <span class=\"n\">M</span> <span class=\"p\">(</span><span class=\"n\">x_1</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))</span>\n   <span class=\"p\">(</span><span class=\"n\">where</span> <span class=\"p\">(</span><span class=\"n\">x_2</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span> <span class=\"o\">,</span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set-remove))\" style=\"color: inherit\">set-remove</a></span> <span class=\"p\">(</span><span class=\"n\">term</span> <span class=\"p\">(</span><span class=\"n\">x_1</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"n\">term</span> <span class=\"n\">x_0</span><span class=\"p\">)))</span>\n   <span class=\"n\">---</span> <span class=\"n\">FVS-Λ</span>\n   <span class=\"p\">(</span><span class=\"n\">free-variables</span> <span class=\"n\">Λ</span> <span class=\"p\">(</span><span class=\"n\">x_2</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))]</span>\n  <span class=\"p\">[</span>\n   <span class=\"n\">---</span> <span class=\"n\">FVS-Integer</span>\n   <span class=\"p\">(</span><span class=\"n\">free-variables</span> <span class=\"n\">integer_0</span> <span class=\"p\">())]</span>\n  <span class=\"p\">[</span>\n   <span class=\"n\">---</span> <span class=\"n\">FVS-Boolean</span>\n   <span class=\"p\">(</span><span class=\"n\">free-variables</span> <span class=\"n\">boolean_0</span> <span class=\"p\">())]</span>\n  <span class=\"p\">[</span>\n   <span class=\"p\">(</span><span class=\"n\">where</span> <span class=\"n\">Λ</span> <span class=\"p\">(</span><span class=\"n\">closure-&gt;lam</span> <span class=\"n\">C</span><span class=\"p\">))</span>\n   <span class=\"p\">(</span><span class=\"n\">free-variables</span> <span class=\"n\">Λ</span> <span class=\"p\">(</span><span class=\"n\">x_0</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))</span>\n   <span class=\"p\">(</span><span class=\"n\">where</span> <span class=\"p\">((</span><span class=\"n\">x_1</span> <span class=\"n\">τ_1</span><span class=\"p\">)</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">closure-env</span> <span class=\"n\">C</span><span class=\"p\">))</span>\n   <span class=\"p\">(</span><span class=\"n\">where</span> <span class=\"p\">(</span><span class=\"n\">x_2</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span> <span class=\"o\">,</span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set-subtract))\" style=\"color: inherit\">set-subtract</a></span> <span class=\"p\">(</span><span class=\"n\">term</span> <span class=\"p\">(</span><span class=\"n\">x_0</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"n\">term</span> <span class=\"p\">(</span><span class=\"n\">x_1</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))))</span>\n   <span class=\"n\">---</span> <span class=\"n\">FVS-Closure</span>\n   <span class=\"p\">(</span><span class=\"n\">free-variables</span> <span class=\"n\">C</span> <span class=\"p\">(</span><span class=\"n\">x_2</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))])</span>\n\n\n<span class=\"c1\">;; -----------------------------------------------------------------------------</span>\n<span class=\"c1\">;; 4. You test the judgment, and it mysteriously fails</span>\n<span class=\"p\">(</span><span class=\"n\">judgment-holds</span>\n  <span class=\"p\">(</span><span class=\"n\">free-variables</span> <span class=\"p\">(</span><span class=\"n\">closure</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span> <span class=\"n\">Int</span><span class=\"p\">)</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">())</span>\n                  <span class=\"p\">()))</span>\n<span class=\"c1\">;; ==&gt; #f</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><strong>WHAT HAPPENED??!</strong></p>\n\n<p>The problem is this line in the <code>FVS-Closure</code> rule:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span>   <span class=\"n\">....</span>\n   <span class=\"p\">(</span><span class=\"n\">where</span> <span class=\"p\">((</span><span class=\"n\">x_1</span> <span class=\"n\">τ_1</span><span class=\"p\">)</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">closure-env</span> <span class=\"n\">C</span><span class=\"p\">))</span>\n   <span class=\"n\">....</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>which checks that the list <code>(closure-env C)</code> (whose first element is the  symbol <code>closure-env</code> and second element is the symbol <code>C</code>) matches the pattern  <code>((x_1 τ_1) ...)</code>.</p>\n\n<p>Right.</p>\n\n<p>Of course you meant to apply the metafunction <code>closure-&gt;env</code> but made a typo. And since the syntax for metafunction application is the same as the syntax  for building a list, Redex doesn&rsquo;t report an error.</p>\n\n<p>We can fix this code with the new <a href=\"https://www.cs.utah.edu/plt/snapshots/current/doc/redex/The_Redex_Reference.html#%28form._%28%28lib._redex%2Freduction-semantics..rkt%29._mf-apply%29%29\"><code>mf-apply</code></a> keyword (available on <a href=\"https://github.com/racket/racket\">GitHub</a> or in a <a href=\"https://www.cs.utah.edu/plt/snapshots/\">snapshot build</a>):</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span>   <span class=\"n\">....</span>\n   <span class=\"p\">(</span><span class=\"n\">where</span> <span class=\"p\">((</span><span class=\"n\">x_1</span> <span class=\"n\">τ_1</span><span class=\"p\">)</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">mf-apply</span> <span class=\"n\">closure-env</span> <span class=\"n\">C</span><span class=\"p\">))</span>\n   <span class=\"n\">....</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Running <code>raco make</code> now gives a compile-time error.</p>\n\n<pre><code>  term: expected a previously defined metafunction\n    at: closure-env\n    in: (mf-apply closure-env C)</code></pre>\n\n<h3 id=\"but-i-still-need-to-type-mf-apply-correctly\">But I still need to type <code>mf-apply</code> correctly!</h3>\n\n<p>Leif Andersen says:</p>\n\n<blockquote>\n <p>I should point out that this has the issue of you still need to type <code>mf-apply</code> correctly. ;)</p></blockquote>\n\n<p>That is, if you accidentally write:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span>   <span class=\"n\">....</span>\n   <span class=\"p\">(</span><span class=\"n\">where</span> <span class=\"p\">((</span><span class=\"n\">x_1</span> <span class=\"n\">τ_1</span><span class=\"p\">)</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">mf-applu</span> <span class=\"n\">closure-env</span> <span class=\"n\">C</span><span class=\"p\">))</span>\n   <span class=\"n\">....</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Then the code compiles, thinking you intend to match a list of three elements  against the pattern.</p>\n\n<p>Never fear, there are at least two solutions.</p>\n\n<h4 id=\"solution-1-rename-mf-apply\">Solution 1: rename <code>mf-apply</code></h4>\n\n<p>A simple fix is to rename the <code>mf-apply</code> keyword to something shorter (and harder to mis-type):</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a></span> <span class=\"n\">redex</span>\n         <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._rename-in))\" style=\"color: inherit\">rename-in</a></span> <span class=\"n\">redex</span>\n           <span class=\"p\">[</span><span class=\"n\">mf-apply</span> <span class=\"n\">MF</span><span class=\"p\">]))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h4 id=\"solution-2-the-mf-apply-lang-extension\">Solution 2: the <code>mf-apply</code> lang extension</h4>\n\n<p>A fancier solution is to install the <code>mf-apply</code> meta-language.</p>\n\n<pre><code>  $ raco pkg install mf-apply</code></pre>\n\n<p>This language updates the <a href=\"http://docs.racket-lang.org/reference/readtables.html#%28tech._readtable%29\"><em>readtable</em></a>  to interpret S-expressions that begin with <code>#{</code>:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">mf-apply</span> <span class=\"n\">racket</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a></span> <span class=\"n\">redex</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">term</span> <span class=\"o\">#</span><span class=\"p\">{</span><span class=\"ss\">f</span> <span class=\"ss\">x</span> <span class=\"ss\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">})</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>as a metafunction application:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">mf-apply</span> <span class=\"n\">racket</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a></span> <span class=\"n\">redex</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">term</span> <span class=\"p\">(</span><span class=\"n\">mf-apply</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>You the programmer only needs to write the <code>#{....}</code> syntax.</p>\n\n<p>Source code is on GitHub:</p>\n\n<ul>\n <li><a href=\"https://github.com/bennn/mf-apply\">https://github.com/bennn/mf-apply</a></li></ul>\n\n<p>(It&rsquo;s the simplest lang-extension I know of)</p>\n\n<h2 id=\"what-is-plt-redex\">What is PLT Redex?</h2>\n\n<p>PLT Redex is a library for semantics engineering. One of my favorite Redex features is it implements capture-avoiding substitution  and α-equivalence for any language with a <code>#:binding-forms</code> specification  (such as STLC, above).</p>\n\n<p>You can read more:</p>\n\n<ul>\n <li>in the &ldquo;Amb&rdquo; tutorial: <a href=\"http://docs.racket-lang.org/redex/tutorial.html\">http://docs.racket-lang.org/redex/tutorial.html</a></li>\n <li>in the &ldquo;Long Tutorial&rdquo;: <a href=\"http://docs.racket-lang.org/redex/redex2015.html\">http://docs.racket-lang.org/redex/redex2015.html</a></li>\n <li>in the Redex reference manual: <a href=\"http://docs.racket-lang.org/redex/The_Redex_Reference.html\">http://docs.racket-lang.org/redex/The_Redex_Reference.html</a></li>\n <li>on the PLT Redex website: <a href=\"https://redex.racket-lang.org/\">https://redex.racket-lang.org/</a></li>\n <li>on GitHub: <a href=\"https://github.com/racket/redex\">https://github.com/racket/redex</a></li></ul>\n\n<p>And if you act now, you can become a <em>Redexan</em> between July 10 and July 14  at the summer school in Salt Lake City, Utah:</p>\n\n<ul>\n <li><a href=\"http://summer-school.racket-lang.org/2017/\">http://summer-school.racket-lang.org/2017/</a></li></ul>")) ((? . 3) f post (u . "Rank Polymorphism") (? . 3) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/05/04/rank-polymorphism/index.html" . unix) (u . "/blog/2017/05/04/rank-polymorphism/") (u . "2017-05-04T18:26:48") (? . 12) (? . 23) (c (u . "array language") c (u . "Author: Justin Slepak")) (u . "\n<p>Rank polymorphism gives you code reuse on arguments of different dimensions. Take a linear interpolation function (let&rsquo;s just call it <code>lerp</code>) for scalars:</p>\n\n<pre><code>(λ ((lo 0) (hi 0) (α 0)) (+ (* lo (- 1 α)) (* hi α)))</code></pre>\n\n<p>The number marks on each argument indicate the expected &ldquo;rank&rdquo; of the argument: how many dimensions it should have. In this case, each one is marked <code>0</code>, indicating a scalar (<em>i.e.</em>, 0-dimensional) argument. The function is usable as-is for</p>\n\n<ul>\n <li>\n  <p>α-blending two RGB pixels</p></li>\n <li>\n  <p>dimming or brightening an image</p></li>\n <li>\n  <p>fade transition between video scenes</p></li></ul>") #t (u . "\n<p>Rank polymorphism gives you code reuse on arguments of different dimensions. Take a linear interpolation function (let&rsquo;s just call it <code>lerp</code>) for scalars:</p>\n\n<pre><code>(λ ((lo 0) (hi 0) (α 0)) (+ (* lo (- 1 α)) (* hi α)))</code></pre>\n\n<p>The number marks on each argument indicate the expected &ldquo;rank&rdquo; of the argument: how many dimensions it should have. In this case, each one is marked <code>0</code>, indicating a scalar (<em>i.e.</em>, 0-dimensional) argument. The function is usable as-is for</p>\n\n<ul>\n <li>\n  <p>α-blending two RGB pixels</p></li>\n <li>\n  <p>dimming or brightening an image</p></li>\n <li>\n  <p>fade transition between video scenes</p></li></ul>\n<!-- more-->\n\n<p>Each of these use cases mixes the argument dimensions a little differently. A pixel is a vector (a rank&ndash;1 structure) of numbers representing color channel values, so the α-blending case uses two vector arguments and one scalar argument.</p>\n\n<p>The only real difference between these use cases is the iteration space: they&rsquo;re all effectively loop nests around the same basic scalar operation. In a rank-polymorphic language, the iteration space is derived automatically from the data, so you don&rsquo;t need to write out the control structure yourself.</p>\n\n<p>The fundamental idea behind function application here is breaking the argument arrays into lower-ranked pieces called &ldquo;cells.&rdquo; Each cell has the rank expected by the function being applied. In the case of <code>lerp</code>, the pixels, images, videos, etc. are all broken up into rank&ndash;0 (scalar) cells because <code>lerp</code> expects rank&ndash;0 arguments. Other expected ranks are possible as well— a vector dot product function <code>dot-prod</code> would call for rank&ndash;1 cells, and a matrix inversion function <code>minv</code> would call for rank&ndash;2 cells.</p>\n\n<p>The structure built up around the cells is called the &ldquo;frame.&rdquo; A matrix array is a rank&ndash;2 frame containing rank&ndash;0 cells for <code>lerp</code>, but it would be a rank&ndash;1 frame containing rank&ndash;1 cells for <code>dot-prod</code> and a rank&ndash;0 frame containing a single rank&ndash;1 cell for <code>minv</code>. A rank-<em>n</em> array could be broken down into a frame of cells in <em>n+1</em> different ways, and it&rsquo;s the function being applied that determines which decomposition to use.</p>\n\n<p>Unfortunately, the implicit control structure that&rsquo;s so convenient for the programmer is a problem for a compiler. Historically, implementations of such languages have had to do without static information about the iteration space. Interpreters (and line-at-a-time compilers, to a lesser extent) get to inspect the concrete data they&rsquo;re dealing with, but static compilers have had to make do with emitting a generic loop structure. A &ldquo;loop&rdquo; over a scalar might sound like trivial overhead, but not when it appears within some other hot loop. Being unable to see when loop boundaries match up is also a barrier to loop fusion. The lack of thorough static shape information was a long-standing problem my advisor pointed out to me when I was a new student looking at possible research projects, and he was interested in applying some form of static analysis to gather that information.</p>\n\n<p>The first step in addressing it was to come up with a formal semantics for rank polymorphism. Although <a href=\"http://www.jsoftware.com/papers/APL.htm\">APL has existed since the 1960s</a>, it had mostly lived in a separate world from mainstream programming language research. The formal techniques developed in PL had seen little to no application to APL and its &ldquo;successor&rdquo; language J.</p>\n\n<p>There&rsquo;s a lot to dislike about APL and J—special case behavior in many of the primitive operators, limited function arity, syntactic separation of first-order and second-order functions, the impossibility of parsing an entire program at once (fun fact: static analysis <a href=\"http://dl.acm.org/citation.cfm?id=805380\">has been tried</a> there)—and of course the idiosyncratic identifiers used for primops have prompted plenty of internet arguments. None of those things are essential to the programming model, so I&rsquo;m <a href=\"http://www.ccs.neu.edu/home/jrslepak/proposal.pdf\">building a new language called Remora</a> to isolate the aspects I want to study.</p>\n\n<p>People don&rsquo;t always think of a type system as a form of static analysis, but it turned out to be an effective way of gathering shape information. Remora&rsquo;s <a href=\"http://www.ccs.neu.edu/home/jrslepak/esop14-full.pdf\">type system</a> uses a restricted form of dependent types, in the style of <a href=\"https://www.cs.cmu.edu/~rwh/theses/xi.pdf\">Dependent ML</a>. An array type is indexed by the shape, the numeric sizes of the array&rsquo;s individual dimensions. Index polymorphism (<em>i.e.</em>, Π types) allows functions to work on varying cell shapes and even varying cell ranks (which is essential for primitives like <code>append</code> and <code>reduce</code>, which operate along the major axis of arrays, no matter their rank). Frame-rank polymorphism, which gives rise to the control structure, remains completely implicit, leaving it to be identified by the type rule for function application. As a nice bonus, type soundness rules out run-time errors arising from incompatible argument shapes.</p>\n\n<hr />\n\n<p><em>If you liked this post, you may also be interested in:</em></p>\n\n<ul>\n <li><a href=\"http://prl.ccs.neu.edu/blog/2016/10/19/history-of-actors/\">History of Actors</a></li>\n <li><a href=\"http://prl.ccs.neu.edu/blog/2017/02/21/datalog-for-static-analysis/\">Datalog for Static Analysis</a></li></ul>")) ((? . 4) f post (u . "[How to prove a compiler correct (cross-post)](https://dbp.io/essays/2018-01-16-how-to-prove-a-compiler-correct.html)") (? . 4) 1731904015 (p+ #"/home/runner/work/website/website/blog/2018/01/17/-how-to-prove-a-compiler-correct-cross-post-https-dbp-io-essays-2018-01-16-how-to-prove-a-compiler-correct-html/index.html" . unix) (u . "/blog/2018/01/17/-how-to-prove-a-compiler-correct-cross-post-https-dbp-io-essays-2018-01-16-how-to-prove-a-compiler-correct-html/") (u . "2018-01-17T20:58:48") (? . 17) (? . 6) (c (u . "Author: Daniel Patterson")) (? . 5) #f (? . 5)) ((? . 6) f post (u . "[Untyped Programs Don't Exist (cross-post)](https://williamjbowman.com/blog/2018/01/19/untyped-programs-don-t-exist/)") (? . 6) 1731904015 (p+ #"/home/runner/work/website/website/blog/2018/01/19/-untyped-programs-don-t-exist-cross-post-https-williamjbowman-com-blog-2018-01-19-untyped-programs-don-t-exist/index.html" . unix) (u . "/blog/2018/01/19/-untyped-programs-don-t-exist-cross-post-https-williamjbowman-com-blog-2018-01-19-untyped-programs-don-t-exist/") (u . "2018-01-19T17:05:00") (? . 4) (? . 19) (c (u . "Author: William J. Bowman")) (? . 5) #f (? . 5)) ((? . 7) f post (u . "CompCert Overview") (? . 7) 1731904015 (p+ #"/home/runner/work/website/website/blog/2016/10/11/compcert-overview/index.html" . unix) (u . "/blog/2016/10/11/compcert-overview/") (u . "2016-10-11T17:41:16") (? . 47) (? . 56) (c (u . "tutorial") c (u . "coq") c (u . "compiler correctness") c (u . "Author: Ben Greenman")) (u . "\n<p>If you are interested in learning about the <em>internals</em> of the CompCert C compiler but would rather not read its source code, this post is for you.</p>") #t (u . "\n<p>If you are interested in learning about the <em>internals</em> of the CompCert C compiler but would rather not read its source code, this post is for you.</p>\n<!-- more-->\n\n<p>(This is a public service announcement.)</p>\n\n<p>Last fall, I gave a short lecture on the 2006 paper <a href=\"http://gallium.inria.fr/~xleroy/publi/compiler-certif.pdf\">&ldquo;Formal Certification of a Compiler Back-End&rdquo;</a> by Xavier Leroy for Amal Ahmed&rsquo;s <a href=\"http://www.ccs.neu.edu/home/amal/course/7480-f15/\">&ldquo;Special Topics in Programming Languages&rdquo;</a> class. Rather than present CompCert as it existed in 2006, I read the documentation and source code for <a href=\"https://github.com/AbsInt/CompCert/releases/tag/v2.5\">CompCert 2.5</a> (released June 2015). The lecture then focused on three questions:</p>\n\n<ul>\n <li>What subset of C does CompCert handle, today?</li>\n <li>What optimizing passes does CompCert perform?</li>\n <li>What is the &ldquo;correctness theorem&rdquo; for CompCert, and what does this theorem mean?</li></ul>\n\n<p>My notes for the lecture give a &ldquo;mid-level&rdquo; summary of the compiler &mdash; there are more details than you&rsquo;ll find in papers, but it&rsquo;s (hopefully!) easier to read than the source code. The document is also hyperlinked to locations in the <a href=\"https://github.com/AbsInt/CompCert\">CompCert GitHub repository</a>.</p>\n\n<p>Here is the document:</p>\n\n<blockquote>\n <p> <a href=\"http://www.ccs.neu.edu/home/types/resources/notes/compcert/cc.pdf\">http://www.ccs.neu.edu/home/types/resources/notes/compcert/cc.pdf</a></p></blockquote>\n\n<p>And here is a table-of-contents:</p>\n\n<ol>\n <li>Motivation, details of the source and target languages, high-level guarantees</li>\n <li>Compiler pipeline, optimizing passes, links intermediate language grammars and Coq theorems</li>\n <li>Background on compiler correctness</li>\n <li>CompCert&rsquo;s correctness, properties that CompCert does <strong>not</strong> guarantee</li>\n <li>Recent (2006 &ndash; 2015) work in the CompCert ecosystem</li></ol>\n\n<p>The document ends with a short description of two other research projects that have grown into &ldquo;industry software&rdquo; and a link to Xaver Leroy&rsquo;s <a href=\"https://www.cs.uoregon.edu/research/summerschool/summer12/curriculum.html\">OPLSS lectures on certified compilers</a>. Enjoy!</p>")) ((? . 8) f post (u . "Spring 2017 PL Junior Retrospective") (? . 8) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/06/16/spring-2017-pl-junior-retrospective/index.html" . unix) (u . "/blog/2017/06/16/spring-2017-pl-junior-retrospective/") (u . "2017-06-16T11:38:25") (? . 49) (? . 10) (c (u . "PL Junior") c (u . "Author: Ben Chung") c (u . "Author: Milo Davis") c (u . "Author: Ming-Ho Yee") c (u . "Author: Matt Kolosick") c (u . "Author: Dustin Jamner") c (u . "Author: Artem Pelenitsyn") c (u . "Author: Julia Belyakova") c (u . "Author: Sam Caldwell")) (u . "\n<p>The <a href=\"http://prl.ccs.neu.edu/seminars.html\">PL Junior Seminar</a> is for beginning PhD and interested undergrad and masters students to understand the foundations of programming languages research. It serves to fill in background knowledge and get up to speed with different areas of PL research.</p>\n\n<p>For the spring 2017 instance of PL Junior we chose program synthesis, the sequent calculus, and logic programming as topics we wanted to learn more about. We also did two group paper readings for Luca Cardelli&rsquo;s <a href=\"http://www.lucacardelli.name/Papers/TypefulProg.pdf\">Typeful Programming</a> and Alan Kay&rsquo;s <a href=\"http://worrydream.com/EarlyHistoryOfSmalltalk/\">Early History of Smalltalk</a>. At the same time, we changed up the format from the previous semester.</p>") #t (u . "\n<p>The <a href=\"http://prl.ccs.neu.edu/seminars.html\">PL Junior Seminar</a> is for beginning PhD and interested undergrad and masters students to understand the foundations of programming languages research. It serves to fill in background knowledge and get up to speed with different areas of PL research.</p>\n\n<p>For the spring 2017 instance of PL Junior we chose program synthesis, the sequent calculus, and logic programming as topics we wanted to learn more about. We also did two group paper readings for Luca Cardelli&rsquo;s <a href=\"http://www.lucacardelli.name/Papers/TypefulProg.pdf\">Typeful Programming</a> and Alan Kay&rsquo;s <a href=\"http://worrydream.com/EarlyHistoryOfSmalltalk/\">Early History of Smalltalk</a>. At the same time, we changed up the format from the previous semester.</p>\n<!-- more-->\n\n<h2 id=\"format\">Format</h2>\n\n<p>As discussed in <a href=\"http://prl.ccs.neu.edu/blog/2017/01/02/fall-2016-pl-junior-retrospective/\">last fall&rsquo;s retrospective</a>, we wanted to move from group reading and discussion towards weekly presentations. Reading a paper to prepare a presentation is quite a different experience compared to the effort that goes in when it is just for a group discussion (in our experience). With any luck, the presentation will convey some of this deeper knowledge to the rest of the group, with the result being a deep understanding on the part of the presenter and an informed, if somewhat shallower, understanding in the rest of the group. Ideally, the end result should compare favorably to simply reading the paper individually.</p>\n\n<p>One idea from last semester that we decided to keep is to spend a length of time (possibly an entire semester) on a topic rather than having a new topic each week. Staying on the same theme helps with retention as well as allowing for deeper investigation.</p>\n\n<p>In that spirit, we chose three themes for the semester: program synthesis, the sequent calculus, and logic programming. Mostly by chance, these topics have interesting connections to each other, and we even had several PL Grown-Up Seminars this semester on program synthesis!</p>\n\n<h2 id=\"synthesis\">Synthesis</h2>\n\n<p>The first paper on program synthesis that we looked at was <a href=\"https://www.sri.com/sites/default/files/uploads/publications/pdf/725.pdf\">A Deductive Approach to Program Synthesis</a> by Manna and Waldinger. We chose this paper because it&rsquo;s old and has a lot of citations so it&rsquo;s probably Important. It was interesting and provided an OK introduction to proof search but the method presented seems far removed from modern synthesis techniques.</p>\n\n<p>The next paper was <a href=\"https://arxiv.org/abs/1507.02988\">Programmatic and Direct Manipulation, Together</a> by Chugh, Hempel,  Spradlin, and Alders, which presents the <a href=\"https://ravichugh.github.io/sketch-n-sketch/index.html\">Sketch-n-Sketch</a> system. Sketch-n-Sketch is a cool system. It demonstrates that a narrow application of synthesis - trying to fill in the constant values in a program (sketching) - can be used for great effect. We were left wondering, however, if it was too narrow an application of synthesis to give much of an indication of what the entire field is like.</p>\n\n<p>We concluded our program synthesis segment with <a href=\"http://www.cis.upenn.edu/~stevez/papers/OZ15.pdf\">Type-and-Example-Directed Program Synthesis</a> by Osera and Zdancewic, another relatively recent paper. This seems like a relevant paper because we are under the impression that using examples to do synthesis is a big thing right now. Using types to constrain the search is another interesting perspective on techniques for synthesis.</p>\n\n<p>While each of theses papers had merits, none was so comprehensive as to be a necessary inclusion in any future look at program synthesis for pl junior</p>\n\n<h2 id=\"sequent-calculus\">Sequent Calculus</h2>\n\n<p>We followed up the program synthesis unit with a week on the sequent calculus. The seminar presentation was based on a paper by <a href=\"https://hal.inria.fr/inria-00381525/document\">Herbelin</a>. <a href=\"http://www.ccs.neu.edu/home/gasche/phd_thesis/scherer-thesis.pdf\">Gabriel’s thesis</a> (chapter 4) includes maybe a more suitable modern introduction to the sequent calculus.</p>\n\n<p>It might have been better to do sequent calculus first because there is a modern branch of proof search based on the sequent calculus. Presenting this first would have allowed us to look into proof search for program synthesis.</p>\n\n<p>An additional problem is that it was insufficiently motivated. Either skipping the topic or spending more time on it would be preferable, since one week was just enough to describe the sequent calculus but not enough to apply it. For this topic to be worthwhile, it would best be used as the basis for subsequent readings that directly reference it.</p>\n\n<h2 id=\"logic-programming\">Logic Programming</h2>\n\n<p>The topic was presented over two weeks. The first session presented/demoed Prolog as a language, and we got a sense of what logic programming could do. But it was a whirlwind tour, and we were left wondering about specific details (how proof search runs, what <code>cut</code> does).</p>\n\n<p>The second session presented the paper <a href=\"http://www.doc.ic.ac.uk/~rak/papers/kowalski-van_emden.pdf\">The Semantics of Predicate Logic as a Programming Language</a>. It was interesting and insightful but left wondering how it relates to the implementation of real logic programming languages.</p>\n\n<p>In hindsight this was about as far as we could have gotten in just two weeks. However, complications such as the cut rule seem prevalent enough in practice that more time would be required to build up a useful understanding of logic programming</p>\n\n<h2 id=\"bonus-rounds\">Bonus Rounds</h2>\n\n<p>We also used a few weeks to read and discuss specific papers as a group.</p>\n\n<p>The first paper we read was Cardelli&rsquo;s <a href=\"http://www.lucacardelli.name/Papers/TypefulProg.pdf\">Typeful Programming</a>. We picked typeful programming because Matthias has mentioned on occasion how important he thinks it is.</p>\n\n<p>It was an interesting read; more of an essay than a paper. It really stood out as different from the other academic publications that we have looked at. It’s a walk through of a language design motivating each design decision in practical terms, as in things that actually help the programmer.</p>\n\n<p>Cardelli places great importance on polymorphism (subtyping in addition to parametric), as well as features for programming in the large such as modules and interfaces. Several features are interesting in their omission, like type inference and macros.</p>\n\n<p>After reading it it’s not clear why Matthias thinks it’s so important. From the perspective of modern researchers, many of the features in Cardelli&rsquo;s language seem rather mundane. However, it&rsquo;s likely that at the time he published it, these ideas were significantly newer and much less widespread.</p>\n\n<p>The other paper we read as a group was Alan Kay&rsquo;s <a href=\"http://worrydream.com/EarlyHistoryOfSmalltalk/\">The Early History of Smalltalk</a>. It seems like the Smalltalk project investigated a plethora of interesting ideas about designing programming languages and environments. This article seems to confirm that but does not delve into many particulars.</p>\n\n<h2 id=\"final-thoughts\">Final Thoughts</h2>\n\n<p>Overall this semester of pl junior went well enough that we think it makes a reasonable template for future semesters. The topics were interesting and relevant, and we mostly picked appropriate material for presentations. One downside is that we didn’t quite ‘fill out’ the semester with presentations due to scheduling and not wanting to make some people present twice. Here’s a lesson: recruit more people to the phd program (or get more undergrads) so you don’t have this problem!</p>\n\n<p>Having papers in a theme helped a lot over previous paper-presentation iterations of pl junior. It helped each week being able to build on what we learned last week, as opposed to having a whirlwind of unrelated topics.</p>\n\n<p>Writing this retrospective has also proven to be a beneficial exercise. Especially with our sequences of connected topics, looking back has allowed us to put the earlier papers into perspective and better assess both their relevance and presentation.</p>")) ((? . 9) f post (u . "Continuations") (? . 9) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/07/17/continuations/index.html" . unix) (u . "/blog/2017/07/17/continuations/") (u . "2017-07-17T12:52:07") (? . 10) (? . 66) (c (u . "history") c (u . "Author: Ben Greenman")) (u . "\n<p>From the PRL archives:</p>\n\n<blockquote>\n <p>It was also a concept that grabbed my mind, ran off with it, and only returned it after substantial renovation and expansion. &mdash; <a href=\"/img/nall-continuations-1983.pdf\"><em>Continuations</em></a> by Alan Nall, Indiana University, 1983</p></blockquote>") #t (u . "\n<p>From the PRL archives:</p>\n\n<blockquote>\n <p>It was also a concept that grabbed my mind, ran off with it, and only returned it after substantial renovation and expansion. &mdash; <a href=\"/img/nall-continuations-1983.pdf\"><em>Continuations</em></a> by Alan Nall, Indiana University, 1983</p></blockquote>\n<!-- more-->\n\n<hr />\n\n<p>I first encountered this essay on continuations in a green folder in the PRL. It turns out, the author spent a semester at Indiana University working on the  <a href=\"http://wiki.c2.com/?SameFringeProblem\">same fringe problem</a> for a graduate-level programming languages course. According to <a href=\"https://www.cs.indiana.edu/~dfried/\">the instructor</a>:  &ldquo;What he said was true. He could not stop thinking about the problem the entire semester.&rdquo; This essay was a kind of final exam.</p>")) ((? . 11) f post (u . "Lexical and Dynamic Scope") (? . 11) 1731904015 (p+ #"/home/runner/work/website/website/blog/2019/09/05/lexical-and-dynamic-scope/index.html" . unix) (u . "/blog/2019/09/05/lexical-and-dynamic-scope/") (u . "2019-09-05T10:00:00") (? . 32) (? . 38) (c (u . "scope") c (u . "definitions") c (u . "history") c (u . "Author: Ming-Ho Yee")) (u . "\n<p>This all started with a simple question about the R programming language: <em>is R lexically or dynamically scoped?</em></p>\n\n<p>To answer that question, we need to understand what <em>scope</em> is, along with <em>lexical scope</em> and <em>dynamic scope</em>.</p>") #t (u . "\n<p>This all started with a simple question about the R programming language: <em>is R lexically or dynamically scoped?</em></p>\n\n<p>To answer that question, we need to understand what <em>scope</em> is, along with <em>lexical scope</em> and <em>dynamic scope</em>.</p>\n<!-- more-->\n\n<p>In this blog post, I&rsquo;d like to explain the differences between lexical scope and dynamic scope, and also explore some of the history behind those ideas. In a <a href=\"/blog/2019/09/10/scoping-in-r/\">subsequent post</a>, I&rsquo;ll discuss scoping in R and why it can be confusing.</p>\n\n<h2 id=\"what-is-scope\">What is scope?</h2>\n\n<p><em>Scope</em> refers to the places in a program where a variable is visible and can be referenced.</p>\n\n<p>An interesting situation is when a function has free variables. Consider the example below:</p>\n\n<div class=\"brush: r\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">1</span>\n<span class=\"n\">f</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">a</span>\n<span class=\"n\">g</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">2</span>\n  <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">g</span><span class=\"p\">()</span> <span class=\"c1\"># what does this return?</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>On line 1, we create a mapping for <code>x</code> with value <code>1</code>. On line 2, we define a function <code>f</code> whose body uses the parameter <code>a</code>, but also the free variable <code>x</code>. On line 3, we define a function <code>g</code>, whose body creates a new mapping for <code>x</code> with value <code>2</code>, and then calls <code>f(0)</code>. (Note that line 4 does not update the mapping created on line 1.) Finally, on line 7, we call <code>g()</code>.</p>\n\n<p>What value does <code>g</code> return when it is called? What mapping does the free variable <code>x</code> on line 2 refer to? Does it refer to the mapping on line 1 that was visible when <code>f</code> was defined? Or does it refer to the mapping on line 4 that was created just before <code>f</code> was called?</p>\n\n<h3 id=\"lexical-scoping\">Lexical scoping</h3>\n\n<p>Under <em>lexical scoping</em> (also known as <em>static scoping</em>), the scope of a variable is determined by the lexical (<em>i.e.</em>, textual) structure of a program.</p>\n\n<p>In the example above, the definition of <code>x</code> on line 1 creates a scope that starts after its definition and extends <em>into</em> the bodies of <code>f</code> and <code>g</code>. However, the second definition of <code>x</code> on line 4 creates a new scope that (1) shadows the previous definition of <code>x</code>, and (2) does not extend into the call <code>f(0)</code> on line 5. Looking at this from another direction, the use of <code>x</code> on line 2 is within the scope created by the definition on line 1, and thus refers to that definition.</p>\n\n<p>Therefore, under lexical scoping, the example program returns <code>1</code>.</p>\n\n<p>Most programming languages we use today are lexically scoped. Intuitively, a human (or compiler) can determine the scope of a variable by just examining the source code of a program. In other words, a compiler can determine which <em>definition</em> each variable refers to&mdash;but it may not be able to determine the <em>values</em> of each variable.</p>\n\n<h3 id=\"dynamic-scoping\">Dynamic scoping</h3>\n\n<p>Under <em>dynamic scoping</em>, a variable is bound to the most recent value assigned to that variable, <em>i.e.</em>, the most recent assignment <em>during the program&rsquo;s execution</em>.</p>\n\n<p>In the example above, the free variable <code>x</code> in the body of <code>f</code> is evaluated when <code>f(0)</code> is called on line 5. At that point (during program execution), the most recent assignment was on line 4.</p>\n\n<p>Therefore, under dynamic scoping, the example program returns <code>2</code>.</p>\n\n<p>Dynamically scoped programming languages include bash, LaTeX, and the original version of Lisp. Emacs Lisp is dynamically scoped, but allows the programmer to select lexical scoping. Conversely, Perl and Common Lisp are lexically scoped by default, but allow the programmer to select dynamic scoping.</p>\n\n<p>(<strong>Edited 2020/08/13:</strong> As of <a href=\"https://www.gnu.org/savannah-checkouts/gnu/emacs/news/NEWS.27.1\">Emacs 27.1</a>, &ldquo;lexical binding is now used by default when evaluating interactive Elisp.&rdquo; Thanks to Artem Pelenitsyn for bringing this to my attention.)</p>\n\n<h2 id=\"now-for-a-digression\">Now for a digression</h2>\n\n<p>These are the definitions I learned from my classes and textbooks, and should be similar to other definitions and explanations you might find online.</p>\n\n<p>However, it took me many drafts and attempts before arriving at the current version. I had difficulty writing an explanation that I was satisfied with&mdash;a definition that was not circular, did not appeal to some intuition or familiarity, and did not conflate terms. Even some of the resources I consulted had these issues.<sup><a href=\"#2019-09-05-lexical-and-dynamic-scope-footnote-1-definition\" name=\"2019-09-05-lexical-and-dynamic-scope-footnote-1-return\">1</a></sup></p>\n\n<p>I am much happier with my current version, but it still bothers me slightly. If lexical scope and dynamic scope are related concepts, then why are the definitions so different? Why does the definition for <em>dynamic scope</em> not mention scope at all? If <em>scope</em> is about &ldquo;where a variable is visible,&rdquo; and that definition is with respect to a <em>variable definition</em>, then why do so many explanations and examples define lexical and dynamic scope in terms of <em>variable use</em>?</p>\n\n<h2 id=\"scope-and-extent\">Scope and Extent</h2>\n\n<p>I found some answers in Guy Steele&rsquo;s <em>Common Lisp the Language, 2nd Edition</em>,<sup><a href=\"#2019-09-05-lexical-and-dynamic-scope-footnote-2-definition\" name=\"2019-09-05-lexical-and-dynamic-scope-footnote-2-return\">2</a></sup> which Matthias Felleisen recommended to me.</p>\n\n<p>In chapter 3, Steele introduces the concepts of <em>scope</em> and <em>extent</em>:</p>\n\n<blockquote>\n <p><em>Scope</em> refers to the spatial or textual region of the program within which references may occur. <em>Extent</em> refers to the interval of time during which references may occur.</p></blockquote>\n\n<p>In addition, there are four interesting cases of scope and extent, with respect to Common Lisp:</p>\n\n<ul>\n <li>\n  <p><em>Lexical scope</em>: a reference can only occur within certain textual regions  of the program, which are determined by the establishing construct, <em>e.g.</em>,  the body of a variable definition.</p></li>\n <li>\n  <p><em>Indefinite scope</em>: a reference can occur anywhere in the program.</p></li>\n <li>\n  <p><em>Dynamic extent</em>: a reference can occur during the time between an entity&rsquo;s  creation and its explicit destruction, <em>e.g.</em>, when a local variable is  created upon entering a function and destroyed when returning from that  function.</p></li>\n <li>\n  <p><em>Indefinite extent</em>: an entity may exist as long as it is possible to be  referenced. (Note that this is the idea behind garbage collection: an  entity can be destroyed once references to it are impossible.)</p></li></ul>\n\n<p>Steele points out that <em>dynamic scope</em> is a misnomer, even though it is both a traditional and useful concept. It can be defined as <em>indefinite scope and dynamic extent</em>. In other words, references to a variable may occur anywhere in a program, as long as that variable has been initialized and has not yet been explicitly destroyed. Furthermore, a later initialization hides an earlier one.</p>\n\n<h3 id=\"discussion\">Discussion</h3>\n\n<p>I found this approach very informative, because it explicitly distinguishes between space (scope) and time (extent), which further implies a separation between compile time and run time. This explains my unease with the definition of &ldquo;dynamic scope&rdquo;&mdash;it is nominally about textual regions in a program, but also requires consideration of run-time behaviour. Dynamic scope is a misnomer!</p>\n\n<p>The above definitions are specifically for Common Lisp, but I believe we can learn from them and adapt them for other programming languages.</p>\n\n<h2 id=\"a-brief-and-incomplete-history-of-lexical-scope\">A brief and incomplete history of lexical scope</h2>\n\n<p>During my research of different definitions of lexical scope, I began to wonder if there was an &ldquo;original&rdquo; definition of lexical scope. I did not find one, but I was able to trace some of the connections between Lisp, Scheme, and ALGOL 60. This history is certainly incomplete, but I hope it is somewhat useful and interesting.</p>\n\n<ul>\n <li>\n  <p><strong>1960</strong>. John McCarthy publishes the original paper on Lisp.<sup><a href=\"#2019-09-05-lexical-and-dynamic-scope-footnote-3-definition\" name=\"2019-09-05-lexical-and-dynamic-scope-footnote-3-return\">3</a></sup> In  <em>History of Lisp</em>,<sup><a href=\"#2019-09-05-lexical-and-dynamic-scope-footnote-4-definition\" name=\"2019-09-05-lexical-and-dynamic-scope-footnote-4-return\">4</a></sup> McCarthy writes that he borrowed the λ-notation from  Alonzo Church&rsquo;s lambda calculus, but none of the other ideas. He also  recounts an incident where a programmer desired lexical scoping, but Lisp  used dynamic scoping. McCarthy considered this to be a bug, which Steve  Russell later fixed by developing the &ldquo;FUNARG device.&rdquo;</p></li>\n <li>\n  <p><strong>1963</strong>. After a few years of work, the <em>Revised Report on Algorithm  Language ALGOL 60</em> is published.<sup><a href=\"#2019-09-05-lexical-and-dynamic-scope-footnote-5-definition\" name=\"2019-09-05-lexical-and-dynamic-scope-footnote-5-return\">5</a></sup> While &ldquo;lexical scope&rdquo; is not explicitly  mentioned, it is recognizable in the specification.</p></li>\n <li>\n  <p><strong>1964</strong>. Peter Landin shows how expressions in programming languages can  be modelled in Church&rsquo;s λ-notation.<sup><a href=\"#2019-09-05-lexical-and-dynamic-scope-footnote-6-definition\" name=\"2019-09-05-lexical-and-dynamic-scope-footnote-6-return\">6</a></sup> He also introduces the concept of a  <em>closure</em>, which pairs a lambda expression with the environment it was  evaluated in.</p></li>\n <li>\n  <p><strong>1970</strong>. Joel Moses describes the problem of free variables in  functions.<sup><a href=\"#2019-09-05-lexical-and-dynamic-scope-footnote-7-definition\" name=\"2019-09-05-lexical-and-dynamic-scope-footnote-7-return\">7</a></sup> He considers both the &ldquo;downward&rdquo; case (where a function is  passed to another function) and the &ldquo;upward&rdquo; case (where a function returns  a function), and remarks on the correspondence between Lisp&rsquo;s FUNARG device  and Landin&rsquo;s closures.</p></li>\n <li>\n  <p><strong>1975</strong>. Gerald Sussman and Guy Steele publish the first Scheme paper.<sup><a href=\"#2019-09-05-lexical-and-dynamic-scope-footnote-8-definition\" name=\"2019-09-05-lexical-and-dynamic-scope-footnote-8-return\">8</a></sup>  They describe their goal of a Lisp-like language that is based on the  lambda calculus. As a consequence, they implement lexical scoping with  closures, to preserve the substitution semantics of the lambda calculus.  They compare this scoping discipline to ALGOL&rsquo;s.</p></li>\n <li>\n  <p><strong>1978</strong>. Steele and Sussman describe various programming language design  choices, by developing an interpreter for each programming language  variation.<sup><a href=\"#2019-09-05-lexical-and-dynamic-scope-footnote-9-definition\" name=\"2019-09-05-lexical-and-dynamic-scope-footnote-9-return\">9</a></sup> In particular, they provide a detailed discussion on  lexical and dynamic scoping.</p></li></ul>\n\n<h2 id=\"next-stop-r\">Next stop, R</h2>\n\n<p>Now that we have examined the definitions of lexical and dynamic scope, and also explored some history, we are ready to return to the original question. <em>Is R lexically or dynamically scoped?</em></p>\n\n<p>In the <a href=\"/blog/2019/09/10/scoping-in-r/\">next blog post</a>, we&rsquo;ll answer that question, and also see how R can be very confusing.</p>\n\n<p><em>I would like to thank Sam Caldwell, Ben Greenman, and Artem Pelenitsyn for their comments and feedback on this blog post.</em></p>\n\n<hr />\n\n<div class=\"footnotes\">\n <ol>\n  <li id=\"2019-09-05-lexical-and-dynamic-scope-footnote-1-definition\" class=\"footnote-definition\">\n   <p>For example, at one point I defined lexical/dynamic scoping in terms of a &ldquo;lexical environment&rdquo; and a &ldquo;dynamic environment.&rdquo; But (1) that&rsquo;s a circular definition, (2) it assumes the reader has some intuition of how a &ldquo;lexical environment&rdquo; is different from a &ldquo;dynamic environment,&rdquo; and (3) it conflates two different kinds of &ldquo;environment.&rdquo;&nbsp;<a href=\"#2019-09-05-lexical-and-dynamic-scope-footnote-1-return\">↩</a></p></li>\n  <li id=\"2019-09-05-lexical-and-dynamic-scope-footnote-2-definition\" class=\"footnote-definition\">\n   <p>G. Steele. &ldquo;Scope and Extent,&rdquo; in <em>Common Lisp the Language</em>, 2nd ed. 1990. [<a href=\"https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node43.html#SECTION00700000000000000000\">Available online</a>]&nbsp;<a href=\"#2019-09-05-lexical-and-dynamic-scope-footnote-2-return\">↩</a></p></li>\n  <li id=\"2019-09-05-lexical-and-dynamic-scope-footnote-3-definition\" class=\"footnote-definition\">\n   <p>J. McCarthy. &ldquo;Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part I,&rdquo; <em>Communications of the ACM</em>, vol. 3, no. 4, April 1960. [<a href=\"https://doi.org/10.1145/367177.367199\">DOI</a>][<a href=\"http://jmc.stanford.edu/articles/recursive/recursive.pdf\">Available online</a>]&nbsp;<a href=\"#2019-09-05-lexical-and-dynamic-scope-footnote-3-return\">↩</a></p></li>\n  <li id=\"2019-09-05-lexical-and-dynamic-scope-footnote-4-definition\" class=\"footnote-definition\">\n   <p>J. McCarthy. &ldquo;History of LISP,&rdquo; in <em>History of Programming Languages</em>, 1978. [<a href=\"https://doi.org/10.1145/800025.1198360\">DOI</a>][<a href=\"http://jmc.stanford.edu/articles/lisp/lisp.pdf\">Available online</a>]&nbsp;<a href=\"#2019-09-05-lexical-and-dynamic-scope-footnote-4-return\">↩</a></p></li>\n  <li id=\"2019-09-05-lexical-and-dynamic-scope-footnote-5-definition\" class=\"footnote-definition\">\n   <p>P. Naur (ed.). &ldquo;Revised Report on Algorithmic Language ALGOL 60,&rdquo; <em>Communications of the ACM</em>, vol. 6, no. 1, January 1963. [<a href=\"http://dx.doi.org/10.1145/366193.366201\">DOI</a>][<a href=\"https://www.masswerk.at/algol60/report.htm\">Available online</a>]&nbsp;<a href=\"#2019-09-05-lexical-and-dynamic-scope-footnote-5-return\">↩</a></p></li>\n  <li id=\"2019-09-05-lexical-and-dynamic-scope-footnote-6-definition\" class=\"footnote-definition\">\n   <p>P. Landin. &ldquo;The mechanical evaluation of expressions,&rdquo; <em>The Computer Journal</em>, vol. 6, no. 4, January 1964. [<a href=\"https://doi.org/10.1093/comjnl/6.4.308\">DOI</a>][<a href=\"https://www.cs.cmu.edu/~crary/819-f09/Landin64.pdf\">Available online</a>]&nbsp;<a href=\"#2019-09-05-lexical-and-dynamic-scope-footnote-6-return\">↩</a></p></li>\n  <li id=\"2019-09-05-lexical-and-dynamic-scope-footnote-7-definition\" class=\"footnote-definition\">\n   <p>J. Moses. &ldquo;The Function of FUNCTION in LISP or Why the FUNARG Problem Should be Called the Environment Problem,&rdquo; <em>SIGSAM Bulletin 15</em>, July 1970. [<a href=\"https://doi.org/10.1145/1093410.1093411\">DOI</a>][<a href=\"https://dspace.mit.edu/handle/1721.1/5854\">Available online</a>]&nbsp;<a href=\"#2019-09-05-lexical-and-dynamic-scope-footnote-7-return\">↩</a></p></li>\n  <li id=\"2019-09-05-lexical-and-dynamic-scope-footnote-8-definition\" class=\"footnote-definition\">\n   <p>G. Sussman and G. Steele. &ldquo;SCHEME: An Interpreter for Extended Lambda Calculus.&rdquo; 1975. [<a href=\"https://dspace.mit.edu/handle/1721.1/5794\">Available online</a>]&nbsp;<a href=\"#2019-09-05-lexical-and-dynamic-scope-footnote-8-return\">↩</a></p></li>\n  <li id=\"2019-09-05-lexical-and-dynamic-scope-footnote-9-definition\" class=\"footnote-definition\">\n   <p>G. Steele and G. Sussman. &ldquo;The Art of the Interpreter or, The Modularity Complex (Parts Zero, One, and Two).&rdquo; 1978. [<a href=\"https://dspace.mit.edu/handle/1721.1/6094\">Available online</a>]&nbsp;<a href=\"#2019-09-05-lexical-and-dynamic-scope-footnote-9-return\">↩</a></p></li></ol></div>")) ((? . 12) f post (u . "Categorical Semantics for Dynamically Typed Programming Languages") (? . 12) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/05/01/categorical-semantics-for-dynamically-typed-programming-languages/index.html" . unix) (u . "/blog/2017/05/01/categorical-semantics-for-dynamically-typed-programming-languages/") (u . "2017-05-01T12:25:17") (? . 87) (? . 3) (c (u . "HOPL") c (u . "category theory") c (u . "dynamic typing") c (u . "gradual typing") c (u . "Author: Max New")) (? . 5) #t (u . "<!-- more-->\n\n<p>In 1969, Dana Scott wrote an <a href=\"/blog/static/scott-69-93-type-theoretical-alternative.pdf\">unpublished manuscript</a> in which he said untyped lambda calculus had no mathematical meaning, 11 years later he wrote <a href=\"/blog/static/scott-80-relating-theories.pdf\">a paper</a> that organized many of the different semantics he and others had since found using the language of category theory.</p>\n\n<p>This latter paper is really the first deserving of the title &ldquo;categorical semantics of dynamic typing&rdquo;, and so I&rsquo;m going to present some of the theorems and &ldquo;theorems&rdquo; presented in that paper, but mingled with the history of the idea and the preceding papers that led to them.</p>\n\n<p><a href=\"/blog/static/dyn-cats.pdf\">My Full Notes</a> continue the story, and you might also be interested in the <a href=\"https://github.com/nuprl/hopl-s2017/blob/master/lecture_notes/2017-04-07.md\">discussion during the lecture</a>.</p>")) ((? . 13) f post (u . "Beta Reduction (Part 1)") (? . 13) 1731904015 (p+ #"/home/runner/work/website/website/blog/2016/11/02/beta-reduction-part-1/index.html" . unix) (u . "/blog/2016/11/02/beta-reduction-part-1/") (u . "2016-11-02T21:10:18") (? . 57) (? . 41) (c (u . "lambda") c (u . "calculus") c (u . "beta") c (u . "reduction") c (u . "semantics") c (u . "Author: Milo Davis")) (u . "\n<p>The λ-calculus is often introduced by showing how to build a real programming language from it&rsquo;s simple syntactic forms. In this series of post, I attempt to introduce it as a tool for modeling semantics. So if you&rsquo;re opening <a href=\"https://www.amazon.com/Calculus-Semantics-Studies-Foundations-Mathematics/dp/0444875085\">Barendregt</a> for the first time, trying to understand a lecture from a programming languages or functional programming class, or just starting to become involved in PL research, I hope this post will help you understand evaluation by substitution (β-reduction).</p>") #t (u . "\n<p>The λ-calculus is often introduced by showing how to build a real programming language from it&rsquo;s simple syntactic forms. In this series of post, I attempt to introduce it as a tool for modeling semantics. So if you&rsquo;re opening <a href=\"https://www.amazon.com/Calculus-Semantics-Studies-Foundations-Mathematics/dp/0444875085\">Barendregt</a> for the first time, trying to understand a lecture from a programming languages or functional programming class, or just starting to become involved in PL research, I hope this post will help you understand evaluation by substitution (β-reduction).</p>\n<!-- more-->\n\n<h1 id=\"introduction\">Introduction</h1>\n\n<p>This post is aimed at myself around 18 months ago. At the time, I had spent a fair amount of time programming, taken a functional programming class, and been introduced to the λ-calculus. Despite that, I didn&rsquo;t really understand how the λ-calculus was really used in PL research and how it really worked. When I was asked to prove a novel theorem about β-reduction, I really struggled. I spent a lot of time looking online for an explanation of the proofs I could understand. This series of posts is my attempt to rectify that.</p>\n\n<p>This first post briefly introduces the λ-calculus and explains β-reduction through a formally defined semantics and examples in <a href=\"https://racket-lang.org/\">Racket</a>, <a href=\"http://ocaml.org/\">OCaml</a>, and <a href=\"https://www.haskell.org/\">Haskell</a>. My goal in this post is to develop an intuition about what β-reduction is and how it works. In a followup post, I&rsquo;ll explain how to prove that β-reduction is confluent.</p>\n\n<h1 id=\"the-λ-calculus\">The λ-Calculus</h1>\n\n<p>The λ-calculus is a simple model of computation developed by <a href=\"https://en.wikipedia.org/wiki/Alonzo_Church\">Alonzo Church</a>. The λ-calculus has three different syntactic forms: variables, anonymous functions (lambdas), and function application. The <a href=\"http://matt.might.net/articles/grammars-bnf-ebnf/\">BNF</a> for the λ-calculus is as follows:</p>\n\n<pre><code>e ::= x\n   | λx.e\n   | e e</code></pre>\n\n<p>In the above BNF, <code>x</code> is a metavariable, standing for any variable. In this post, I use <code>x</code>, <code>y</code>, <code>z</code>, <code>a</code>, and <code>b</code> as variables in my examples. The <code>λx.e</code> term represents a function with a single parameter <code>x</code>. We say that the parameter, <code>x</code> is bound in <code>e</code>. It is possible to have unbound variables in the λ-calculus, though for the most part, we can ignore them in our discussion of this topic. Finally, applications consist of two expressions. The first expression is the function and the second is its argument. Parenthesis are often added for clarity.</p>\n\n<p>If you program regularly in a functional language, this might look fairly familiar to you. In fact, you can compute anything in the λ-calculus that you can in any other language. In other words, the λ-calculus is Turing complete. Of course, you wouldn&rsquo;t want to program in this language as it&rsquo;s significantly harder to encode some of these constructs than just using built in language constructs like numbers. I&rsquo;m not going to discuss these ideas in detail, but if you&rsquo;re interested in how to add numbers, booleans, conditionals, and recursion to the λ-calculus, Matt Might has a few great posts about how to do this using equivalent constructs in <a href=\"http://matt.might.net/articles/python-church-y-combinator/\">Python</a>, <a href=\"http://matt.might.net/articles/church-encodings-demo-in-scheme/\">Scheme</a>, and <a href=\"http://matt.might.net/articles/js-church/\">JavaScript</a>.</p>\n\n<p>Now that we&rsquo;ve discussed the syntax of the language, we can look at the semantics, or how terms evaluate. Below I have the evaluation rules for the λ-calculus. The arrow represents β-reduction which is the subject of this post. The semantics rely on substitution which is depicted with brackets. I have also defined the substitution function. I&rsquo;m assuming the Barendregt <a href=\"http://www.cse.chalmers.se/research/group/logic/TypesSS05/Extra/geuvers.pdf\">variable convention (2.6)</a> which states that every bound variable is distinct from every free variable.</p>\n\n<pre><code>x[ x := e ] = e\ny[ x := e ] = y\n(λx.e1)[ x := e2 ] = (λx.e1[ x := e2 ])\n(e1 e2)[ x := e3 ] = (e1[ x := e3 ] e2[ x := e3 ])</code></pre>\n\n<p>With the substitution function defined, we can write a semantics for evaluation:</p>\n\n<pre><code>------------------------------\n  (λx.e1) e2 -&gt;β e1[ x := e2 ]\n\n    e1 -&gt;β e1'\n--------------------\n  e1 e2 -&gt;β e1' e2\n\n    e2 -&gt;β e2'\n--------------------\n  e1 e2 -&gt;β e1 e2'</code></pre>\n\n<p>These rules mean that if you have a term in which you have a function applied to an argument, you substitute the argument into the function. The next two rules say that if you can apply an evaluation rule to either the first or second subterm, you may do so. Notice that both the second and third rules might apply to a single term. These rules are nondeterministic and in these cases it is fine to use whichever rule you want (see below).</p>\n\n<h1 id=\"what-is-β-reduction\">What is β-reduction?</h1>\n\n<p>More generally, what is reduction? Reduction is a model for computation that consists of a set of rules that determine how a term is stepped forwards. β-reduction is reduction by function application. When you β-reduce, you remove the λ from the function and substitute the argument for the function&rsquo;s parameter in its body. More formally, we can define β-reduction as follows:</p>\n\n<pre><code>(λx.e1) e2 = e1[ x := e2 ]</code></pre>\n\n<p>Given that definition, lets look at a few examples. I&rsquo;ve written the examples in the λ-calculus, Racket, OCaml, and Haskell. It&rsquo;s important to note that these languages have more restricted semantics than the original λ-calculus. These restrictions are called reduction strategies. In Racket and OCaml, it is not possible to substitute with anything except for a value, meaning you need to evaluate the argument until it is a function before substituting. This makes the evaluation reduce left to right before substituting. This restriction is called &ldquo;call by value&rdquo;. In Haskell, no reduction occurs in arguments, meaning that we would omit the third rule. This could potentially require an expression to be evaluated multiple times. In reality, Haskell caches the results of these evaluations so each expression is only evaluated once, but I&rsquo;m going to ignore that here. This presentation of Haskell&rsquo;s semantics is called &ldquo;call by name&rdquo; and the optimization is called &ldquo;call by need&rdquo;. (For more details on lazy evaluation, I recommend: <a href=\"http://www.ccs.neu.edu/racket/pubs/esop12-cf.pdf\">Chang and Felleisen, ESOP 2012</a>.)</p>\n\n<h1 id=\"some-examples\">Some Examples</h1>\n\n<p>The first example evaluates the same way in all of the languages.</p>\n\n<pre><code>    (λx.x) (λy.y)\n-&gt;β x[ x := (λy.y) ]\n=   (λy.y)</code></pre>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span>    <span class=\"p\">((</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"n\">y</span><span class=\"p\">))</span>\n<span class=\"n\">-&gt;β</span> <span class=\"n\">x</span><span class=\"p\">[</span> <span class=\"n\">x</span> <span class=\"n\">:=</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"p\">]</span>\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span>   <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<div class=\"brush: ocaml\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span>    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">-&gt;</span><span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">]</span>\n<span class=\"o\">=</span>   <span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">]</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"ow\">-&gt;</span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"kt\">:=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"ow\">=</span><span class=\"w\">   </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>In our next example, we will see the differences between the languages. They all reduce to the same thing, albeit in different ways.</p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"nf\">\\</span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"ow\">-&gt;</span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)[</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"kt\">:=</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"nf\">\\</span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">))]</span><span class=\"w\"></span>\n<span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Note that the application on the right hand side is never evaluated. In an eager language like Racket or OCaml, the term being substituted must be a value, so the evaluation follows a different path.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span>    <span class=\"p\">((</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"n\">y</span><span class=\"p\">))</span> <span class=\"p\">((</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">a</span><span class=\"p\">)))</span>\n<span class=\"n\">-&gt;β</span> <span class=\"p\">((</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"n\">y</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">[</span> <span class=\"n\">z</span> <span class=\"n\">:=</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">]))</span>\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span>   <span class=\"p\">((</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"n\">y</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">a</span><span class=\"p\">))</span>\n<span class=\"n\">-&gt;β</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"n\">y</span><span class=\"p\">)[</span> <span class=\"n\">x</span> <span class=\"n\">:=</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">]</span>\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span>   <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<div class=\"brush: ocaml\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span>    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"o\">-&gt;</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">-&gt;</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"o\">-&gt;</span><span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">[</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">-&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">])</span>\n<span class=\"o\">=</span>   <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">-&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">-&gt;</span><span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">y</span><span class=\"o\">)[</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">-&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">]</span>\n<span class=\"o\">=</span>   <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The nondeterministic semantics of the λ-calculus lead to two possible paths through the above computation:</p>\n\n<pre><code>    (λx.λy.y) ((λz.z) (λa.a))\n-&gt;β (λx.λy.y) (z[ z := (λa.a) ])\n=   (λx.λy.y) (λa.a)\n-&gt;β (λy.y)[ x := (λa.a) ]\n=   (λy.y)</code></pre>\n\n<pre><code>    (λx.λy.y) ((λz.z) (λa.a))\n-&gt;β (λy.y)[ x := ((λz.z) (λa.a)) ]\n=   (λy.y)</code></pre>\n\n<p>Lets look at a final example. This one is more complicated than the previous ones. I&rsquo;m also going to stop showing the substitution explicitly. In the literature, it is fairly common not to see it explicitly, but you should still be able to follow what&rsquo;s going on.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span>    <span class=\"p\">((</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">(((</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)))</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"n\">y</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"n\">z</span><span class=\"p\">)))</span>\n<span class=\"n\">-&gt;β</span> <span class=\"p\">((</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">((</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">((</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"n\">b</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"n\">z</span><span class=\"p\">)))</span>\n<span class=\"n\">-&gt;β</span> <span class=\"p\">((</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">((</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"n\">z</span><span class=\"p\">)))</span>\n<span class=\"n\">-&gt;β</span> <span class=\"p\">((</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"n\">-&gt;β</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The same thing happens in OCaml</p>\n\n<div class=\"brush: ocaml\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span>    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">-&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"o\">-&gt;</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"o\">-&gt;</span> <span class=\"n\">z</span><span class=\"o\">));;</span>\n<span class=\"o\">-&gt;</span><span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"o\">-&gt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"o\">-&gt;</span> <span class=\"n\">z</span><span class=\"o\">));;</span>\n<span class=\"o\">-&gt;</span><span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"o\">-&gt;</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n<span class=\"o\">-&gt;</span><span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"o\">-&gt;</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"o\">-&gt;</span><span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"o\">-&gt;</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>In Haskell, the situation is a little different:</p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"nf\">\\</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"ow\">-&gt;</span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"ow\">-&gt;</span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"ow\">-&gt;</span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"ow\">-&gt;</span><span class=\"n\">β</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Finally, in the λ-calculus, things can go a few different ways.</p>\n\n<pre><code>    (λx.x) ((λa.λb.a b) (λy.y) (λz.z))\n-&gt;β (λx.x) ((λb.(λy.y) b) (λz.z))\n-&gt;β (λx.x) ((λy.y) (λz.z))\n-&gt;β (λy.y) (λz.z)\n-&gt;β (λz.z)</code></pre>\n\n<pre><code>    (λx.x) ((λa.λb.a b) (λy.y) (λz.z))\n-&gt;β (λa.λb.a b) (λy.y) (λz.z)\n-&gt;β (λb.(λy.y) b) (λz.z)\n-&gt;β (λy.y) (λz.z)\n-&gt;β (λz.z)</code></pre>\n\n<pre><code>    (λx.x) ((λa.λb.a b) (λy.y) (λz.z))\n-&gt;β (λx.x) ((λb.(λy.y) b) (λz.z))\n-&gt;β (λb.(λy.y) b) (λz.z)\n-&gt;β (λy.y) (λz.z)\n-&gt;β (λz.z)</code></pre>\n\n<p>There&rsquo;s a very interesting property of all of those examples: they all evaluate to the same thing, regardless of the reduction order taken. This is because β-reduction of the λ-calculus has the weak Church-Rosser Property. In systems that have this property, if a reduction sequence terminates, it will always evaluate to the same term, regardless of the path taken. This property does not necessarily hold if the term does not terminate. See if you can work out what happens to this term with each reduction strategy:</p>\n\n<pre><code>(λx.λy.y) ((λa.a a) (λb.b b))</code></pre>\n\n<p>A weaker property is called confluence, which states that all reduction sequences can be stepped to a common term. At the beginning of this post, I said that the λ-calculus is used as a model for real programming languages. This is generally true. There are proofs that the λ-calculus has this property, but people don&rsquo;t tend to prove such things about their actual languages, it is usually enough to build them knowing that their theoretical model has the property. In a follow up post, I&rsquo;ll explain the proofs that the λ-calculus does indeed have these properties.</p>\n\n<p>P.S. In Racket, you can look at the examples using the <a href=\"http://docs.racket-lang.org/stepper/\">stepper</a> which will allow you to interactively run the term and see how it reduces.</p>")) ((? . 14) f post (u . "PLISS: Oregon without the greek") (? . 14) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/02/28/pliss-oregon-without-the-greek/index.html" . unix) (u . "/blog/2017/02/28/pliss-oregon-without-the-greek/") (u . "2017-02-28T23:01:00") (? . 26) (? . 2) (c (u . "event") c (u . "lectures") c (u . "language implementation") c (u . "Author: Jan Vitek")) (u . "\n<p>What does every student interested in programming languages need to learn about the practical side of the field? That is the question that the first international summer school on programming language implementation (or <a href=\"https://pliss2017.github.io\">PLISS</a> for short) has set out to answer.</p>") #t (u . "\n<p>What does every student interested in programming languages need to learn about the practical side of the field? That is the question that the first international summer school on programming language implementation (or <a href=\"https://pliss2017.github.io\">PLISS</a> for short) has set out to answer.</p>\n<!-- more-->\n\n<p><img src=\"/img/pliss_summer_school_2017_logo.png\" alt=\"PLISS logo\" /></p>\n\n<p>The school will feature <a href=\"https://pliss2017.github.io/speakers.html\">twelve speakers</a> versed in programming language practicae ranging from abstract interpretation to garbage collection and from compiler implementation to language design. The lectures will feature hands on exercises as well as lessons learned from large scale industrial efforts.</p>\n\n<p>Lectures cover current research and future trends in programming language design and implementation, including:</p>\n\n<ul>\n <li>Writing Just-in-time Compilers with LLVM with Jan Vitek</li>\n <li>Performance Evaluation and Benchmarking with Laurie Tratt</li>\n <li>Designing a Commercial Actor Language with Sophia Drossopoulou and Heather Miller</li>\n <li>High-Performance Fully Concurrent Garbage Collection with Richard Jones</li>\n <li>Compiling Dynamic Languages with David Edelsohn</li>\n <li>Language-support for Distributed Datastores with Suresh Jagannathan</li>\n <li>Testing Programming Language Implementations with Alastair Donaldson</li>\n <li>Abstract Interpretation and Static Analysis with lectures by Francesco Logozzo and Matt Might</li>\n <li>The evolution of Scala with Martin Odersky</li></ul>\n\n<p>A summer school is also an opportunity to get know the speakers and get ideas for research problems. Students will have the opportunity to socialize with a peer group of other students in PL as well as professors and industrial researchers.</p>\n\n<p>Thanks to generous funding from NSF, ONR and SIGPLAN, costs will be kept low and some fellowships are available to cover travel costs.</p>\n\n<p>More information at:</p>\n\n<p><a href=\"https://pliss2017.github.io\">https://pliss2017.github.io</a></p>\n\n<p>(Oregon is a reference to the <a href=\"https://www.cs.uoregon.edu/research/summerschool/summer17/\">OPLSS</a>, in which you may also be interested.)</p>")) ((? . 15) f post (u . "Top Five Results of the Past 50 Years of Programming Languages Research") (? . 15) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/04/04/top-five-results-of-the-past-50-years-of-programming-languages-research/index.html" . unix) (u . "/blog/2017/04/04/top-five-results-of-the-past-50-years-of-programming-languages-research/") (u . "2017-04-04T10:21:36") (? . 21) (? . 85) (c (u . "HOPL") c (u . "Author: Ben Greenman")) (u . "\n<p>Over the past 50 years, which result from programming languages research has had the greatest impact on working programmers?</p>") #t (u . "\n<p>Over the past 50 years, which result from programming languages research has had the greatest impact on working programmers?</p>\n<!-- more-->\n\n<p>The center of the universe for a working programmer is the language (or languages) they use. Fundamental results in programming languages (PL) research can re-shape this universe.</p>\n\n<p>In <a href=\"http://www.ccs.neu.edu/home/matthias/7480-s17/index.html\">HOPL</a> two weeks ago, Matthias claimed that <em>type soundness</em> is the most useful and influential result to flow from PL research to PL practice in the last 50 years.</p>\n\n<p>But 50 years is a long time, and there are many serious contenders for the title of <em>greatest PL result</em>. Here are my (alphabetized) picks for the top five:</p>\n\n<h3 id=\"abstraction\">Abstraction</h3>\n\n<blockquote>\n <p>My goal in library design is this; I want to have a precise, elegant, re-usable abstraction &mdash;Conal Eliott, <a href=\"https://www.youtube.com/watch?v=zzCrZEil9iI\">BayHac 2014 (00:01:55)</a></p></blockquote>\n\n<p>By <em>abstraction</em>, I mean anything whose interface is not just &ldquo;read the implementation&rdquo;. Could be a tuple, module, object, structure, semaphore, macro, etc. Even the memory hierarchy pyramid in your operating systems textbook is an abstraction. They are everywhere, and they are what separates computer science (it&rsquo;s about <em>ideas</em>) from electrical engineering (it&rsquo;s about <em>transistors</em>). Thank you <a href=\"/img/l-plp-1965.pdf\">Peter Landin</a> and <a href=\"/img/m-thesis-1969.pdf\">J.H. Morris</a>.</p>\n\n<h3 id=\"generational-garbage-collection\">Generational Garbage Collection</h3>\n\n<p>I don&rsquo;t know much about garbage collection. I do know that I want it, and I&rsquo;m pretty sure that I wouldn&rsquo;t have it (outside of research languages) without generational garbage collection. Thank you <a href=\"/img/u-sde-1984.pdf\">David Ungar</a>.</p>\n\n<h3 id=\"generic-programming\">Generic Programming</h3>\n\n<p><em>a.k.a. the mainstream interpretations of parametric polymorphism</em></p>\n\n<p>The thought of programming in Java 1.4 is terrifying. Thank you <a href=\"/img/g-thesis-1972.pdf\">Jean-Yves Girard</a> and <a href=\"/img/r-cp-1974.pdf\">John C. Reynolds</a> and <a href=\"http://homepages.inf.ed.ac.uk/wadler/gj/\">Gilad Bracha and Martin Odersky and David Stoutamire and Philip Wadler</a>.</p>\n\n<h3 id=\"modularization\">Modularization</h3>\n\n<p>How can humans understand large software systems? By organizing the systems into smaller components (modules, objects) with well-defined interfaces. It&rsquo;s hard to imagine, but once upon a time the question of <em>how</em> to divide a system into modules was a new research problem. Thank you <a href=\"/img/p-tr-1971.pdf\">D.L. Parnas</a>.</p>\n\n<h3 id=\"type-soundness\">Type Soundness</h3>\n\n<p>Let me make two modest claims:</p>\n\n<ul>\n <li>Soundness (with respect to a dynamic semantics) is a desirable property for a static type system.</li>\n <li>A large number (at least, thousands) of working programmers agree that programming in a language with a sound, static type system is &ldquo;a good thing&rdquo;.</li></ul>\n\n<p>Neither of these claims were true 50 years ago. They are definitely true today. And the slogan &ldquo;well typed programs do not go wrong (up to a well-defined set of runtime errors)&rdquo; has become the catchphrase of PL research. Thank you <a href=\"/img/m-jcss-1978.pdf\">Robin Milner</a>.</p>\n\n<h2 id=\"honorable-mentions\">Honorable Mentions</h2>\n\n<ul>\n <li><a href=\"http://www.paulgraham.com/thist.html\">lexical scope</a></li>\n <li><a href=\"/img/d-thesis-1984.pdf\">type inference</a></li>\n <li><a href=\"https://www.quora.com/Why-does-Kent-Beck-refer-to-the-rediscovery-of-test-driven-development\">test-driven development</a></li>\n <li><a href=\"https://en.wikipedia.org/wiki/Simula\">object-oriented programming</a></li>\n <li><a href=\"/img/ss-tr-1975.pdf\">continuation passing style</a></li>\n <li><a href=\"/img/kffd-tr-1986.pdf\">hygienic macros</a></li></ul>\n\n<hr />\n\n<p><em>If you liked this post, you may also be interested in:</em></p>\n\n<ul>\n <li><a href=\"http://prl.ccs.neu.edu/blog/2016/05/18/gradual-typing-across-the-spectrum/\">Gradual Typing Across the Spectrum</a></li>\n <li><a href=\"http://jschuster.org/blog/2016/11/29/getting-started-in-programming-languages/\">Getting Started in Programming Languages</a></li>\n <li><a href=\"https://williamjbowman.com/blog/2017/03/24/what-even-is-compiler-correctness/\">What even is compiler correctness?</a></li></ul>")) ((? . 16) f post (u . "Final Algebra Semantics is Observational Equivalence") (? . 16) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/09/27/final-algebra-semantics-is-observational-equivalence/index.html" . unix) (u . "/blog/2017/09/27/final-algebra-semantics-is-observational-equivalence/") (u . "2017-09-27T15:44:57") (? . 18) (? . 17) (c (u . "category theory") c (u . "math") c (u . "final encoding") c (u . "observational equivalence") c (u . "Author: Max New")) (u . "\n<p>Recently, &ldquo;final encodings&rdquo; and &ldquo;finally tagless style&rdquo; have become popular techniques for defining embedded languages in functional languages. In a recent discussion in the Northeastern PRL lab, <a href=\"https://github.com/michaelballantyne\">Michael Ballantyne</a>, <a href=\"http://ccs.neu.edu/home/ryanc\">Ryan Culpepper</a> and I asked &ldquo;in what category are these actually final objects&rdquo;? As it turns out our very own <a href=\"http://www.ccs.neu.edu/home/wand/\">Mitch Wand</a> wrote one of the first papers to make exactly this idea precise, so I read it <a href=\"https://www.cs.indiana.edu/ftp/techreports/TR65.pdf\">available here</a> and was pleasantly surprised to see that the definition of a final algebra there is essentially equivalent to the definition of observational equivalence.</p>\n\n<p>In this post, I&rsquo;ll go over some of the results of that paper and explain the connection to observational equivalence. In the process we&rsquo;ll learn a bit about categorical logic, and I&rsquo;ll reformulate some of the category theory in that paper to be a bit more modern in presentation, cleaning some things up in the process.</p>") #t (u . "\n<p>Recently, &ldquo;final encodings&rdquo; and &ldquo;finally tagless style&rdquo; have become popular techniques for defining embedded languages in functional languages. In a recent discussion in the Northeastern PRL lab, <a href=\"https://github.com/michaelballantyne\">Michael Ballantyne</a>, <a href=\"http://ccs.neu.edu/home/ryanc\">Ryan Culpepper</a> and I asked &ldquo;in what category are these actually final objects&rdquo;? As it turns out our very own <a href=\"http://www.ccs.neu.edu/home/wand/\">Mitch Wand</a> wrote one of the first papers to make exactly this idea precise, so I read it <a href=\"https://www.cs.indiana.edu/ftp/techreports/TR65.pdf\">available here</a> and was pleasantly surprised to see that the definition of a final algebra there is essentially equivalent to the definition of observational equivalence.</p>\n\n<p>In this post, I&rsquo;ll go over some of the results of that paper and explain the connection to observational equivalence. In the process we&rsquo;ll learn a bit about categorical logic, and I&rsquo;ll reformulate some of the category theory in that paper to be a bit more modern in presentation, cleaning some things up in the process.</p>\n<!-- more-->\n\n<h1 id=\"intuition-implementing-a-signature\">Intuition: Implementing a Signature</h1>\n\n<p>As a running example, say we wanted to implement a datatype of finite maps whose keys and values are both integers, i.e., finite multisets of integers.</p>\n\n<p>We could specify such a datatype by specifying a little language of numbers and finite multisets. We&rsquo;ll have two &ldquo;sorts&rdquo; <code>num</code> and <code>multiset</code>, a constant for every integer, and an addition function</p>\n\n<pre><code>'n : () -&gt; num;\nadd : (num, num) -&gt; num</code></pre>\n\n<p>subject to the silly-looking equation:</p>\n\n<pre><code>add('n,'m) = '(n + m)</code></pre>\n\n<p>and some operations on multisets</p>\n\n<pre><code>empty : () -&gt; multiset;\nsingleton : (num) -&gt; multiset;\nunion : (multiset, multiset) -&gt; multiset;\nremove : (num, multiset) -&gt; multiset;\ncount : (num, multiset) -&gt; num</code></pre>\n\n<p>subject to the computational equations:</p>\n\n<pre><code>count('n, empty) = '0\ncount('n, singleton('n)) = '1\ncount('n, singleton('m)) = '0\ncount('n, union(s,t)) = add(count('n,s), count('n, t))\ncount('n, remove('n,s)) = '0\ncount('n, remove('m,s)) = count('n,s)</code></pre>\n\n<p>These are &ldquo;all&rdquo; of the equations we need to actually run our programs and get a number out, but not all the equations we intuitively <em>want</em> for reasoning about our programs. For instance, clearly <code>union</code> should be commutative, and <code>remove</code> should be idempotent, but it&rsquo;s impossible to prove that with just the equations specified. In fact, we can make a model of this theory that refutes them by constructing the &ldquo;initial algebra&rdquo;. In Haskell, we could say</p>\n\n<div class=\"brush: Haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kr\">data</span><span class=\"w\"> </span><span class=\"kt\">MultiSet</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Empty</span><span class=\"w\"> </span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"kt\">Singleton</span><span class=\"w\"> </span><span class=\"kt\">Integer</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"kt\">Union</span><span class=\"w\"> </span><span class=\"kt\">MultiSet</span><span class=\"w\"> </span><span class=\"kt\">MultiSet</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"kt\">Remove</span><span class=\"w\"> </span><span class=\"kt\">Integer</span><span class=\"w\"> </span><span class=\"kt\">MultiSet</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kr\">deriving</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Eq</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"nf\">count</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">Integer</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">MultiSet</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Integer</span><span class=\"w\"></span>\n<span class=\"nf\">count</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"kt\">Empty</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"nf\">count</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Singleton</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"nf\">count</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Singleton</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">/=</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"nf\">count</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Union</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"nf\">count</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Remove</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"nf\">count</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Remove</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">/=</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"></span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Then it is completely obvious that all of our equations hold, but then <code>Union</code> is <em>not</em> commutative, as ghci will tell us:</p>\n\n<div class=\"brush: Haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Singleton</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">`</span><span class=\"kt\">Union</span><span class=\"p\">`</span><span class=\"w\"> </span><span class=\"kt\">Singleton</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Singleton</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">`</span><span class=\"kt\">Union</span><span class=\"p\">`</span><span class=\"w\"> </span><span class=\"kt\">Singleton</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span>\n<span class=\"kt\">False</span><span class=\"w\"></span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>However, there is another encoding that will give us that <code>union</code> is commutative and <code>remove n</code> is idempotent and actually every equation we could possibly want! It&rsquo;s called the &ldquo;final encoding&rdquo; or &ldquo;final algebra&rdquo;. In Haskell, this looks like:</p>\n\n<div class=\"brush: Haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kr\">data</span><span class=\"w\"> </span><span class=\"kt\">MultiSet&#39;</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">MultiSet&#39;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">_count</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">Integer</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Integer</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"nf\">count&#39;</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">Integer</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">MultiSet&#39;</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Integer</span><span class=\"w\"></span>\n<span class=\"nf\">count&#39;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">_count</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"></span>\n\n<span class=\"nf\">empty</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">MultiSet&#39;</span><span class=\"w\"></span>\n<span class=\"nf\">empty</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">MultiSet&#39;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">_count</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"nf\">singleton</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">Integer</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">MultiSet&#39;</span><span class=\"w\"></span>\n<span class=\"nf\">singleton</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">MultiSet&#39;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">_count</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"></span>\n<span class=\"w\">                                         </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">                                         </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"nf\">union</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">MultiSet&#39;</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">MultiSet&#39;</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">MultiSet&#39;</span><span class=\"w\"></span>\n<span class=\"nf\">union</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">MultiSet&#39;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">_count</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">count&#39;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">count&#39;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"nf\">remove</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">Integer</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">MultiSet&#39;</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">MultiSet&#39;</span><span class=\"w\"></span>\n<span class=\"nf\">remove</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">MultiSet&#39;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">_count</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"></span>\n<span class=\"w\">                                        </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">                                        </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"n\">count&#39;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"nf\">test&#39;</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"n\">count&#39;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">count&#39;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">1000</span><span class=\"p\">]]</span><span class=\"w\"></span>\n<span class=\"nf\">s</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">singleton</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">`</span><span class=\"n\">union</span><span class=\"p\">`</span><span class=\"w\"> </span><span class=\"n\">singleton</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"nf\">t</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">singleton</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">`</span><span class=\"n\">union</span><span class=\"p\">`</span><span class=\"w\"> </span><span class=\"n\">singleton</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Now we can verify that <code>union</code> is commutative because</p>\n\n<div class=\"brush: Haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nf\">union</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">MultiSet&#39;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">_count</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">count&#39;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">count&#39;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">MultiSet&#39;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">_count</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">count&#39;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">count&#39;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">\t\t  </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">union</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"></span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>since <code>+</code> is commutative. Equality isn&rsquo;t decidable anymore so I can&rsquo;t give you a simple piece of code to witness this, but we can test our example before and we won&rsquo;t be able to distinguish them, no surprise:</p>\n\n<div class=\"brush: Haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"kr\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">singleton</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">`</span><span class=\"n\">union</span><span class=\"p\">`</span><span class=\"w\"> </span><span class=\"n\">singleton</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"kr\">let</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">singleton</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">`</span><span class=\"n\">union</span><span class=\"p\">`</span><span class=\"w\"> </span><span class=\"n\">singleton</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"n\">count&#39;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">count&#39;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">1000</span><span class=\"p\">]]</span><span class=\"w\"></span>\n<span class=\"kt\">True</span><span class=\"w\"></span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>How do we know this is the &ldquo;best&rdquo; or at least &ldquo;most canonical&rdquo; implementation of our datatype? The intuition is that we really don&rsquo;t care at all <em>how</em> our multisets are implemented as long as they behave the right way with respect to <code>count</code> since <code>count</code> returns an <code>Integer</code>, a type we do understand. Our encoding accomplishes this by representing a multiset <code>s</code> by the partially applied function <code>\\n -&gt; count n s</code>.</p>\n\n<p>The formal name for this idea is <em>observational equivalence</em>. We say that two closed terms <code>s,t</code> of sort <code>multiset</code> are <em>observationally equivalent</em> if for any term <code>C</code> of type <code>num</code> that has <code>s</code> as a subterm, we can swap <code>t</code> in for <code>s</code> and prove that the two terms are equal. For instance <code>C</code> might be <code>count(3, union(s, singleton(3)))</code> or <code>add(4,remove(5,s))</code>. Then we&rsquo;ve reduced the possibly complicated equality for <code>multiset</code> to the simple equality of <code>num</code>.</p>\n\n<p>Proving that the final encoding above satisfies all observational equivalences is beyond the scope of this blog post (see <a href=\"https://hal.inria.fr/inria-00076514/document\">here</a>), but let&rsquo;s see what all this talk about &ldquo;algebras&rdquo;, initial or final is all about.</p>\n\n<h1 id=\"formalization-attempt-1-algebras-of-a-theory\">Formalization Attempt 1: Algebras of a Theory</h1>\n\n<p>First, our little language of numbers and multisets is called a <em>theory</em>. The specific category gadget that we&rsquo;ll use to describe it is a <em>multi-sorted Lawvere theory</em>, or just <em>Lawvere theory</em> for short.</p>\n\n<p>A <em>Lawvere theory</em> is a category with finite products all of whose objects are finite products of a collection of <em>sorts</em> \\(S\\). We can construct this category from our little language above by making the objects be <em>contexts</em> \\(x:num,y:multiset,...\\) and morphisms \\(\\Gamma \\to\nx_1:s_1,...,x_n:s_n\\) to be \\(n\\)-tuples of terms \\(\\Gamma \\vdash t_1 : s_1,...,\n\\Gamma \\vdash t_n :  s_n\\) <em>modulo</em> the equations we&rsquo;ve specified. We&rsquo;ll use the letter \\(T\\) to mean a Lawvere theory.</p>\n\n<p>Then a <em>\\(T\\)-algebra</em> is a denotational semantics of our theory \\(T\\), i.e., a product preserving functor \\(A : T \\to Set\\). This means for every sort we get a set \\(A(s)\\) and for every term \\(x_1:s_1,...,x_n:s_n\n\\vdash t : s\\) a function \\(A(t) : A(s_1)\\times\\cdots \\times A(s_n) \\to\nA(s)\\).</p>\n\n<p>Finally a <em>morphism of \\(T\\)-algebras</em> from \\(A\\) to \\(B\\) is a way to translate one algebra into another. Briefly, it is a natural transformation from \\(A\\) to \\(B\\), but concretely this means for every sort \\(s\\) we get a function \\(\\alpha_s : A(s) \\to B(s)\\) that translates \\(A\\)s interpretation of \\(s\\) as a set into \\(B\\)s. The key property that we want is that the operations according to \\(A\\) and \\(B\\) do the same thing as determined by \\(\\alpha\\). Specifically, for any term \\(x_1:s_1,...,x_n:s_n \\vdash t :\ns\\), and inputs \\(x_1 \\in A(s_1),...,x_n \\in A(s_n)\\) we should get the same result if we evaluate \\(A(t)(x_1,\\ldots,x_n)\\) and then apply \\(\\alpha_s\\) as if we first translate \\(x_1,\\ldots,x_n\\) to \\(B(s_1),\\ldots,B(s_n)\\) and then apply \\(B(t)\\). If you unwind the definitions, this is exactly what naturality says.</p>\n\n<p>Then we have a category we&rsquo;ll call \\(T-Alg\\) of \\(T\\)-algebras and we can ask if there are initial or final algebra. It turns out that both of them <em>always</em> exist.</p>\n\n<p>The initial algebra is most famous here, we define for each sort \\(In(T)(s) = \\cdot \\vdash s\\), the closed terms of that sort modulo the equivalence of the theory, and \\(In(T)(s_1,\\ldots,s_n) =\nIn(T)(s_1)\\times\\ldots,In(T)(s_n)\\). Then the terms are just interpreted as the functions you get by plugging closed inputs into them. Then if we look at what what a morphism of \\(T\\)-algebras from \\(In(T) \\to A\\) is, we see that we don&rsquo;t have any choice, the only one is the one that maps \\(\\cdot \\vdash t : s\\) to \\(A(t)\\) and this makes all the right diagrams to commute. This is pretty similar to our definition of &ldquo;initial algebra&rdquo; before, except that this time we defined <code>count</code> as a function, not just a case of an ADT, but that was just an easy way to satisfy the computational equations for <code>count</code>.</p>\n\n<p>However, an egregious flaw presents itself when we look at what the <em>final</em> algebra is. It&rsquo;s completely trivial! We can define \\(Fin(T)\\) to take every sort to a one element set \\(Fin(T)(s) = \\{*\\}\\) and every term to the trivial function \\(\\{*\\}^n \\to \\{*\\}\\). What the hell? This interprets numbers and multisets as trivial one-element sets. To rule this one out, we need to add some conditions to our algebras.</p>\n\n<h1 id=\"formalization-algebras-of-a-theory-extension\">Formalization: Algebras of a Theory Extension</h1>\n\n<p>To rule out these boring algebras, and get a nice final algebra, we have to recognize that the sorts <code>num</code> and <code>multiset</code> in our theory are not really on equal footing. While we are not sure how multisets should be defined, we know <em>exactly</em> what numbers are!</p>\n\n<p>To formalize this we&rsquo;ll call the full theory \\(T_1\\) and the theory with just numbers \\(T_0\\). Then there should be a map from \\(T_0\\) to \\(T_1\\) that is the inclusion of theories. We&rsquo;ll formalize this as a <em>morphism of theories</em>. A morphism of theories is a <em>strict</em> product-preserving functor from one theory to another. The strictness ensures that we don&rsquo;t mix up our sorts and our contexts, a morphim of theories has to map sorts to sorts, whereas a non-strict functor could map a sort to a context with two sorts it&rsquo;s equivalent to. What this really amounts to is a translation of one theory into another. It maps sorts to sorts and terms to terms of the appropriate sorts in a compositional way. However, we don&rsquo;t want to consider <em>all</em> such morphisms, only the ones that are &ldquo;conservative extensions&rdquo;, which means</p>\n\n<ol>\n <li>there are no new closed terms at old types</li>\n <li>closed terms that were different before remain different.</li></ol>\n\n<p>In our example (1) ensures that we don&rsquo;t add any new exotic numbers like <code>undefined</code> or <code>∞</code>, and (2) ensures that we keep \\(0\\) different from \\(1\\), like the final algebra did before by having all numbers have the same interpreation \\(*\\).</p>\n\n<p>We can formalize this in the following way. Note that any morphism of Lawvere theories \\(m : T \\to S\\) induces a <em>functor</em> on the category of algebras \\(m^* : S-Alg \\to T-Alg\\) by just composing functors. An \\(S\\)-algebra is a functor from \\(S\\) to sets, and \\(m\\) is a functor from \\(T\\) to \\(S\\) so we can compose to get \\(m^*(A)(t) = A(m(t))\\).</p>\n\n<p>Now, we can express the idea of a conservative extension by saying that the canonical arrow from \\(In(T)\\) to \\(m^*(In(S))\\) is an isomorphism. Recalling the definition of initial algebras, this says exactly that the closed terms in \\(T\\) up to \\(T\\)-equivalence are isomorphic to the closed terms of the type provided by \\(m\\) in \\(S\\) up to \\(S\\)-equivalence. This is an equivalent formulation to the definition in Mitch&rsquo;s paper, but there it is separated into two properties fullness and faithfulness, and doesn&rsquo;t use the initial algebras and \\(m^*\\) explicitly.</p>\n\n<p>Now we can verify that the inclusion \\(i : T_0 \\to T_1\\) of the number theory into the number-multiset theory is an extension in this sense.</p>\n\n<p>Finally we can define our notion of \\(i\\)-algebra, which will be our correct notion of algebra. An \\(i\\)-algebra is a \\(T_1\\) algebra \\(A\\) such that</p>\n\n<ol>\n <li>The canonical algebra map \\(! : In(T_0) \\to m^*A\\) is an isomorphism.</li>\n <li>The canonical algebra map \\(! : In(T_1) \\to A\\) is surjective i.e.,  for each sort \\(s, !_s\\) is surjective.</li></ol>\n\n<p>The first condition says again that we have a conservative extension of \\(T_0\\), but the second is more interesting. It says that every denotation given by \\(A\\) is represented by some term in \\(T_1\\). In fact what it really ensures is that \\(A\\) determines a <em>congruence relation</em> on \\(T_1\\) given by \\(t1 \\equiv_A t2\\) if \\(A(t1) = A(t2)\\). In light of this, the first condition could be called <em>adequacy</em>.</p>\n\n<p>Furthermore, the surjectivity condition ensures that any morphism of \\(i\\) algebras, i.e., a map as \\(T_1\\)-algebras is also surjective, so a morphism \\(A \\to B\\) is a witness to the fact that \\(B\\) determines a <em>stronger</em> congruence relation on \\(T_1\\) than \\(A\\) does: \\(t1 \\equiv_B t2\n\\implies t1 \\equiv_A t2\\). Then asking for a final algebra is asking for exactly the:</p>\n\n<blockquote>\n <p>Strongest adequate congruence relation</p></blockquote>\n\n<p>which is exactly the definition of observational equivalence you will find in, say Pitt&rsquo;s chapter of <a href=\"https://www.cis.upenn.edu/~bcpierce/attapl/\">Advanced TAPL</a>. There is a difference in the meaning of <em>adequacy</em>, though. Usually adequacy is defined in terms of an operational semantics, but here everything is based on an axiomatic notion of equality, but I think they play the same role in the two settings, so I think it&rsquo;s reasonable to use the same word. On thing I like about this formulation is very nice though since it makes obvious that <em>adequacy</em> is not a predetermined concept, we have to pick \\(T_0\\) and \\(i\\) in order to know what adequacy means.</p>\n\n<h1 id=\"conclusion-tying-it-back-to-final-encodings\">Conclusion: Tying it back to Final Encodings</h1>\n\n<p>So now we&rsquo;ve seen that</p>\n\n<blockquote>\n <p>Final algebras are equivalent to initial algebras modulo observational equivalence</p></blockquote>\n\n<p>Of course we haven&rsquo;t precisely gotten back to where we started: we were talking about denotational semantics in terms of sets and functions, but what we really want are implementations in our favorite programming languages. Fortunately, we didn&rsquo;t use very many properties of sets in our definition, so it&rsquo;s pretty easy to swap out the category of Sets for some category built out of the terms of our programming language. We can also swap out sets for some much cooler category of denotations like domains or metric spaces or time-varying values.</p>\n\n<p>Another question is how to implement this when we have a proper <em>type theory</em> and not just some boring sorts. In particular, if we have function types, then we won&rsquo;t be able to get functions from functions in our term model to functions in our denotations due to contravariance. Perhaps logical relations are the solution?</p>")) ((? . 18) f post (u . "PLT Redex FAQ") (? . 18) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/09/25/plt-redex-faq/index.html" . unix) (u . "/blog/2017/09/25/plt-redex-faq/") (u . "2017-09-25T23:39:16") (? . 74) (? . 16) (c (u . "tutorial") c (u . "PLT Redex") c (u . "Author: Ben Greenman") c (u . "Author: Sam Caldwell")) (u . "\n<p>A short guide to Redex concepts, conventions, and common mistakes.</p>") #t (u . "\n<p>A short guide to Redex concepts, conventions, and common mistakes.</p>\n<!-- more-->\n\n<hr />\n\n<p><em>To contribute to this FAQ, submit issues and pull requests to:  <a href=\"https://github.com/nuprl/website/\">https://github.com/nuprl/website/</a></em></p>\n\n<h3 id=\"q-what-is-redex-useful-for\">Q. What is Redex useful for?</h3>\n\n<ol>\n <li>declaring <a href=\"https://en.wikipedia.org/wiki/Regular_tree_grammar\">regular tree grammars</a></li>\n <li>defining <em>pattern</em>-based judgments and relations on <em>terms</em></li>\n <li>testing properties of the above</li></ol>\n\n<p>More generally, Redex is helpful for experimenting with a programming language  design, and helping you decide what you might want to prove about a language.</p>\n\n<h3 id=\"q-what-is-redex-not-useful-for\">Q. What is Redex <strong>not</strong> useful for?</h3>\n\n<p>Proving theorems about a grammar, judgment, or relation.</p>\n\n<h3 id=\"q-what-is-a-term\">Q. What is a <em>term</em>?</h3>\n\n<p>Informally, a term is:</p>\n\n<ul>\n <li>a Redex &ldquo;atom&rdquo;, or</li>\n <li>an object that represents a sequence of characters.</li></ul>\n\n<p>More formally, a term is the result of evaluating <strong>(term X)</strong>, where <strong>X</strong> is  any syntactically-correct Racket expression.</p>\n\n<p>Examples:</p>\n\n<pre><code>$ racket\nWelcome to Racket v6.10.0.3.\n&gt; (require redex/reduction-semantics)\n&gt; (term 42)\n42\n&gt; (term (+ 2 2))\n'(+ 2 2)\n&gt; (term (\"hello\" world (#false)))\n'(\"hello\" world (#f))</code></pre>\n\n<p>Some terms may look strange. That&rsquo;s OK, because a term by itself has no meaning.</p>\n\n<p>Terms can refer to previously-defined values using the <strong>unquote</strong> escape.</p>\n\n<pre><code>&gt; (define x (term 42))\n&gt; (term (+ 2 x))\n'(+ 2 x)\n&gt; (term (+ ,x (unquote x)))\n'(+ 42 42)</code></pre>\n\n<h3 id=\"q-what-is-a-redex-model\">Q. What is a <em>Redex model</em>?</h3>\n\n<p>A Redex model is collection of tools for working with terms. The tools may include:</p>\n\n<ul>\n <li><em>languages</em>, to define a grammar for terms</li>\n <li><em>judgments</em>, to describe properties of terms or relations between terms</li>\n <li><em>metafunctions</em>, to transform terms</li>\n <li><em>reduction relations</em>, to define a term rewriting system</li></ul>\n\n<p>The goal of these tools is to encode a &ldquo;real thing&rdquo; (maybe, a programming language)  using Redex terms.</p>\n\n<h3 id=\"q-what-is-a-language\">Q. What is a language?</h3>\n\n<p>A Redex <em>language</em> is a named set of non-terminals, <em>patterns</em>, and <em>binding forms</em>. For example, a Redex model of the natural numbers might start with this language:</p>\n\n<pre><code>(define-language nat\n  [N ::= Zero\n         (Plus1 N)])</code></pre>\n\n<ul>\n <li>the name of the language is <strong>nat</strong></li>\n <li>the non-terminal <strong>N</strong> is associated with two patterns: <strong>Zero</strong> and <strong>(Plus1 N)</strong></li>\n <li>there are no <em>binding forms</em></li></ul>\n\n<p>Each pattern describes a syntactic category of terms. Each non-terminal gives a name to the union of the patterns that follow it.</p>\n\n<p>The non-terminal <strong>N</strong> describes all terms that are either:</p>\n\n<ol>\n <li>the symbol <strong>Zero</strong></li>\n <li>lists of the form <strong>(Plus1 N)</strong>, where <strong>N</strong> is either <strong>Zero</strong> or another &ldquo;Plus1&rdquo;</li></ol>\n\n<p>For example,</p>\n\n<pre><code>(term Zero)\n(term (Plus1 Zero))\n(term (Plus1 (Plus1 Zero)))\n(term (Plus1 (Plus1 (Plus1 Zero))))\n;; .... and so on</code></pre>\n\n<p>If a language has binding forms, then some terms can introduce names. See the question on <em>binding forms</em> (below) for an example.</p>\n\n<h3 id=\"q-what-is-a-pattern\">Q. What is a pattern?</h3>\n\n<p>A pattern is a sequence of characters and variables. If you have: (1) a language, and (2) a pattern that contains <em>named non-terminals</em> from the language,  then you can ask whether a Redex term matches the pattern.</p>\n\n<p>A <em>named non-terminal</em> for a language <strong>L</strong> is an identifier made of:  (1) a non-terminal from <strong>L</strong>, (2) an underscore (<strong>_</strong>), and (3) any other identifier. See the FAQ entry below.</p>\n\n<p>For example, <strong>(redex-match? L p t)</strong> returns <strong>#true</strong> if the term <strong>t</strong> matches  the pattern <strong>p</strong> relative to the language <strong>L</strong>.</p>\n\n<pre><code>(define-language nat\n  [N ::= Zero (Plus1 N)])\n\n(redex-match? nat N_some-name (term Zero))\n;; #true\n(redex-match? nat (Plus1 N_a) (term Zero))\n;; #false\n(redex-match? nat (Plus1 N_0) (term (Plus1 (Plus1 Zero))))\n;; #true</code></pre>\n\n<p>If <strong>(redex-match? L p t)</strong> is <strong>#true</strong>, then <strong>(redex-match L p t)</strong> shows how  named non-terminals in the pattern bind to subterms of <strong>t</strong>.</p>\n\n<pre><code>(redex-match nat N_0 (term Zero))\n;; (list (match (list (bind 'N_0 'Zero))))\n(redex-match nat (Plus1 N_0) (term Zero))\n;; #f\n(redex-match nat (Plus1 N_0) (term (Plus1 (Plus1 Zero))))\n;; (list (match (list (bind 'N_0 '(Plus1 Zero)))))</code></pre>\n\n<h3 id=\"q-what-is-a-named-non-terminal\">Q. What is a named non-terminal?</h3>\n\n<p>A named non-terminal in a language <strong>L</strong> is an identifier of the form <strong>X_Y</strong>, where:</p>\n\n<ul>\n <li><strong>X</strong> is a non-terminal from <strong>L</strong></li>\n <li><strong>Y</strong> is any identifier</li></ul>\n\n<p>The name helps when one pattern contains multiple occurrences of the same non-terminal. If you want the two occurrences to bind the same term, then use the same name.</p>\n\n<pre><code>(define-language trees\n  [binary-tree ::= Leaf\n                   (Node binary-tree binary-tree)])\n\n(redex-match trees\n  (Node binary-tree_left binary-tree_right)\n  (term (Node Leaf (Node Leaf Leaf))))\n;; (list\n;;  (match\n;;   (list (bind 'binary-tree_left 'Leaf)\n;;         (bind 'binary-tree_right '(Node Leaf Leaf)))))</code></pre>\n\n<h3 id=\"q-what-else-can-patterns-express\">Q. What else can patterns express?</h3>\n\n<p>Redex patterns may contain special identifiers to guide pattern-matching. For instance:</p>\n\n<ul>\n <li>The <strong>_</strong> pattern matches any term (and does not bind).</li>\n <li>A pattern <strong>(p &hellip;)</strong> matches any sequence whose elements match the pattern <strong>p</strong>.  If the pattern <strong>p</strong> is a named non-terminal, then the non-terminal binds  a sequence of subterms.</li></ul>\n\n<p>Examples:</p>\n\n<pre><code>(redex-match? nat (Plus1 _) (term (Plus1 9)))\n;; #true\n(redex-match? nat (N_0 ...) (term ()))\n;; #true\n(redex-match? nat (N_0 ...) (term (Zero)))\n;; #true\n(redex-match nat (N_0 ...) (term (Zero Zero Zero)))\n;; (list (match (list (bind 'N_0 '(Zero Zero Zero)))))</code></pre>\n\n<p>See <a href=\"http://docs.racket-lang.org/redex/The_Redex_Reference.html#%28tech._pattern%29\">the Redex reference</a> for the full pattern language,  including the <em>named and unique non-terminals</em> of the form <strong>X_!_Y</strong>.</p>\n\n<h3 id=\"q-what-can-patterns-not-express\">Q. What can patterns <strong>not</strong> express?</h3>\n\n<ul>\n <li>Disjunctions of patterns, e.g., &ldquo;number or boolean&rdquo;.  (Use a language non-terminal.)</li>\n <li>Negations of patterns. (Compose <strong>not</strong> with <strong>redex-match?</strong>.)</li>\n <li>Some non-regular patterns. (Named  dots <a href=\"http://docs.racket-lang.org/redex/The_Redex_Reference.html#%28tech._pattern%29\"><code>..._N</code></a>  or <a href=\"http://docs.racket-lang.org/redex/The_Redex_Reference.html#%28form._%28%28lib._redex%2Freduction-semantics..rkt%29._define-language%29%29\"><code>define-language</code></a>  with a side condition may be able to help.)</li></ul>\n\n<h3 id=\"q-what-is-a-judgment\">Q. What is a judgment?</h3>\n\n<p>A Redex <em>judgment</em> form defines a relation on terms. The relation is defined by a set of inference rules.</p>\n\n<p>Programming languages papers use inference rules all the time. Redex can express many of the judgments in papers; for example:</p>\n\n<ul>\n <li>well-formedness conditions (i.e., whether a term contains free variables)</li>\n <li>type checking rules</li>\n <li>type inference rules</li>\n <li>evaluation relations</li></ul>\n\n<p>Every judgment needs (1) a language (2) a mode (3) a contract (4) a set of inference rules. For example, the following judgment defines an equality relation on natural numbers.</p>\n\n<pre><code>(define-language nat\n  [N ::= Zero (Plus1 N)])\n\n(define-judgment-form nat\n  #:mode (N= I I)\n  #:contract (N= N N)\n  [\n   --- Zero=\n   (N= Zero Zero)]\n  [\n   (where (Plus1 N_0--) N_0)\n   (where (Plus1 N_1--) N_1)\n   (N= N_0-- N_1--)\n   --- Plus1=\n   (N= N_0 N_1)])</code></pre>\n\n<ol>\n <li>the language is <strong>nat</strong>; Redex uses the language to interpret patterns</li>\n <li>the mode is <strong>(N= I I)</strong>; this means <strong>N=</strong> is the name of a judgment that  expects two input terms (or, <strong>N=</strong> is a binary relation on terms)</li>\n <li>the contract is <strong>(N= N N)</strong>; in other words, <strong>N=</strong> expects two terms that  match the <strong>N</strong> non-terminal from the <strong>nat</strong> language</li>\n <li>there are two inference rules, named <strong>Zero=</strong> and <strong>Plus1=</strong></li>\n <li>the <strong>Zero=</strong> rule states that <strong>(N= Zero Zero)</strong> always holds</li>\n <li>the <strong>Plus1=</strong> rule states that <strong>(N= N_0 N_1)</strong> holds if <strong>N_0</strong> and <strong>N_1</strong>  are both <strong>Plus1</strong> terms whose contents are related by <strong>N=</strong></li></ol>\n\n<p>The <strong>where</strong> clauses are <em>guards</em>. When Redex tries to apply a rule with premises of the form  <strong>(where pattern term)</strong>, it checks that each pattern matches the corresponding term. If not, Redex stops applying the rule. See <a href=\"http://docs.racket-lang.org/redex/The_Redex_Reference.html#%28form._%28%28lib._redex%2Freduction-semantics..rkt%29._define-judgment-form%29%29\">the Redex reference</a> for more.</p>\n\n<pre><code>(judgment-holds (N= Zero Zero))\n;; #true\n(judgment-holds (N= (Plus1 (Plus1 Zero)) (Plus1 (Plus1 Zero))))\n;; #true\n(judgment-holds (N= (Plus1 Zero) (Plus1 (Plus1 Zero))))\n;; #false</code></pre>\n\n<p>Note: the inference rules form a <em>set</em>, not a <em>sequence</em>. So when you ask Redex whether <strong>(judgment-holds (N= Zero Zero))</strong>, it applies  all rules that match <strong>(N= Zero Zero)</strong>. For <strong>N=</strong> this is just one rule, but in general it could be many rules.</p>\n\n<h3 id=\"q-what-is-a-judgment-form-mode\">Q. What is a judgment form <strong>#:mode</strong>?</h3>\n\n<p>A <strong>#:mode</strong> declaration expects a list of the form <strong>(id pos-use &hellip;)</strong>,  where <strong>id</strong> is an identifier and each <strong>pos-use</strong> is either  <strong>I</strong> or <strong>O</strong>. These declarations say four things:</p>\n\n<ol>\n <li><strong>id</strong> is the name of a new judgment form</li>\n <li><strong>id</strong> expects <strong>N</strong> arguments, where <strong>N</strong> is the number of <strong>pos-use</strong> symbols</li>\n <li><strong>id</strong> expects an <em>input</em> at each position where the mode contains an <strong>I</strong></li>\n <li><strong>id</strong> produces an <em>output</em> at each position where the mode contains an <strong>O</strong></li></ol>\n\n<p>For example, a type inference judgment may take an expression as input and output a type. Here&rsquo;s a fast and easy type inference judgment for arithmetic expressions. Given any term <strong>e_0</strong>, the judgment outputs the type <strong>Int</strong>.</p>\n\n<pre><code>(define-language Arith\n  (e ::= integer (e + e))\n  (τ ::= Int))\n\n(define-judgment-form Arith\n  #:mode (infer-type I O)\n  #:contract (infer-type e τ)\n  [\n   --- T-Int\n   (infer-type e_0 Int)])</code></pre>\n\n<h3 id=\"q-what-can-judgments-not-express\">Q. What can judgments <strong>not</strong> express?</h3>\n\n<p>Redex does not support inference rules that require guessing.</p>\n\n<p>One example of this is a transitivity rule: \"<strong>τ_0</strong> is related to <strong>τ_2</strong>  if there exists a <strong>τ_1</strong> such that <strong>τ_0</strong> is related to <strong>τ_1</strong> and <strong>τ_1</strong> is  related to <strong>τ_2</strong>\". The following example tries to define a transitive subtyping (<strong>&lt;:</strong>) relation,  but Redex rejects the <strong>S-Trans</strong> rule.</p>\n\n<pre><code>(define-language SomeTypes\n  (τ ::= (→ τ τ) Integer))\n\n(define-judgment-form SomeTypes\n  #:mode (&lt;: I I)\n  #:contract (&lt;: τ τ)\n  [\n   (&lt;: τ_0 τ_1)\n   (&lt;: τ_1 τ_2)\n   --- S-Trans\n   (&lt;: τ_0 τ_2)]\n  [\n   --- S-Refl\n   (&lt;: τ_0 τ_0)]\n  [\n   (&lt;: τ_dom-1 τ_dom-0)\n   (&lt;: τ_cod-0 τ_cod-1)\n   --- S-Arrow\n   (&lt;: (→ τ_dom-0 τ_cod-0) (→ τ_dom-1 τ_cod-1))])</code></pre>\n\n<p>The error is that in the rule <strong>S-Trans</strong>,  the named non-terminal <strong>τ_1</strong> appears in an input position but is not bound to a term.</p>\n\n<h3 id=\"q-what-is-a-metafunction\">Q. What is a metafunction?</h3>\n\n<p>A metafunction is a term-level function on terms.</p>\n\n<p>Every metafunction needs: (1) a language (2) a name (3) a contract (4) a sequence of guarded input/output cases.</p>\n\n<p>Here is a metafunction that returns <strong>#true</strong> when given two equal natural numbers. The definition is similar to the <strong>N=</strong> judgment form.</p>\n\n<pre><code>(define-metafunction nat\n  N=? : N N -&gt; boolean\n  [(N=? Zero Zero)\n   #true]\n  [(N=? N_0 N_1)\n   (N=? N_0-- N_1--)\n   (where (Plus1 N_0--) N_0)\n   (where (Plus1 N_1--) N_1)]\n  [(N=? N_0 N_1)\n   #false])</code></pre>\n\n<ul>\n <li>the metafunction is named <strong>N=?</strong></li>\n <li>its contract is <strong>N N -&gt; boolean</strong>, this means <strong>N=?</strong> expects 2 terms that  match the <strong>N</strong> pattern and returns a term that matches the pattern <strong>boolean</strong></li>\n <li>there are three cases; the second case is guarded by two <strong>where</strong> clauses</li></ul>\n\n<p>Any occurrence of <strong>(N=? &hellip;.)</strong> in any term is evaluated.</p>\n\n<pre><code>(term (N=? (Plus1 (Plus1 Zero)) (Plus1 (Plus1 Zero))))\n;; #true\n(term ((N=? Zero Zero) Zero))\n;; '(#true Zero)\n(term (N=? (Plus1 Zero) (Plus1 (Plus1 Zero))))\n;; #false</code></pre>\n\n<p>Any occurrence of <strong>N=?</strong> outside a <strong>term</strong> is an error.</p>\n\n<p>Metafunction <strong>where</strong>-clauses are analogous to judgment form <strong>where</strong>-clauses. See <a href=\"http://docs.racket-lang.org/redex/The_Redex_Reference.html#%28tech._metafunction%29\">the Redex reference</a> for more.</p>\n\n<p>Note: the cases in a metafunction form a <em>sequence</em>, not a <em>set</em>. To evaluate a metafunction application, Redex tries each case in order  and returns the result of the first case that (1) matches the call-site (2)  for which all guards succeed.</p>\n\n<h3 id=\"q-should-i-use-a-metafunction-or-a-judgment-form\">Q. Should I use a metafunction or a judgment form?</h3>\n\n<p>Use a judgment form.</p>\n\n<p>Metafunctions are handy, but judgments are easier to read and debug and maintain.</p>\n\n<h3 id=\"q-what-is-a-reduction-relation\">Q. What is a reduction relation?</h3>\n\n<p>A reduction relation is a set of term-rewriting rules.</p>\n\n<p>Every reduction relation needs: (1) a language (2) a domain (3) a set of rewrite rules.</p>\n\n<ul>\n <li>The language tells Redex how to interpret patterns.</li>\n <li>The domain is a pattern.  Input to the reduction relation must match the pattern,  and output from the reduction relation must match the pattern.</li>\n <li>The rewrite rules have the form <strong>(&mdash;&gt; term term guard &hellip;)</strong>.  The term on the left is the input, the term on the right is the output.</li></ul>\n\n<p>See <a href=\"http://docs.racket-lang.org/redex/The_Redex_Reference.html#%28form._%28%28lib._redex%2Freduction-semantics..rkt%29._reduction-relation%29%29\">the Redex reference</a> for a full description of the guards.</p>\n\n<p>The preferred way to define a reduction relation is to define a language that includes three non-terminals:</p>\n\n<ol>\n <li>a non-terminal for the domain of the reduction relation</li>\n <li>a non-terminal for a <em>subset</em> of the domain that cannot reduce further</li>\n <li>a non-terminal for evaluation contexts</li></ol>\n\n<p>An evaluation context is a term that contains a <strong>hole</strong>. A reduction relation can match a term against an evaluation context to find  a sub-term to rewrite &mdash; in particular, the sub-term that matches the <strong>hole</strong>.</p>\n\n<p>In the following example, <strong>bexp</strong> is the domain of a reduction relation. A <strong>bexp</strong> term represents a boolean expression, which can be <strong>#true</strong> or  <strong>#false</strong> or a conjunction of expressions or a disjunction of expressions. The boolean expressions <strong>#true</strong> and <strong>#false</strong> are also values (<strong>val</strong>);  these cannot reduce further. The non-terminal <strong>E</strong> is for evaluation contexts.</p>\n\n<pre><code>(define-language Bool\n  (bexp ::= #true #false (bexp ∧ bexp) (bexp ∨ bexp))\n  (val ::= #true #false)\n  (E ::= hole (E ∧ bexp) (val ∧ E) (E ∨ bexp) (val ∨ E)))\n\n(define step\n  (reduction-relation Bool\n    #:domain bexp\n    [--&gt; (in-hole E (val_lhs ∧ val_rhs))\n         (in-hole E val_new)\n         ∧-step\n         (where val_new ,(and (term val_lhs) (term val_rhs)))]\n    [--&gt; (in-hole E (val_lhs ∨ val_rhs))\n         (in-hole E val_new)\n         ∨-step\n         (where val_new ,(or (term val_lhs) (term val_rhs)))]))</code></pre>\n\n<p>The function <strong>apply-reduction-relation</strong> applies a reduction relation to a  term and returns a list of ways that the term can step.</p>\n\n<pre><code>(apply-reduction-relation step (term #true))\n;; '()\n(apply-reduction-relation step (term (#true ∧ #true)))\n;; '(#true)\n(apply-reduction-relation step (term (#true ∧ #false)))\n;; '(#false)\n(apply-reduction-relation step (term ((#true ∨ #false) ∧ #true)))\n;; '((#true ∧ #true))</code></pre>\n\n<p>Three things about the reduction relation <strong>step</strong>:</p>\n\n<ol>\n <li>Using <strong>in-hole</strong> on the first argument of <strong>&mdash;&gt;</strong> searches a term  for a subterm that Redex can apply a reduction rule to.</li>\n <li>Using <strong>in-hole</strong> on the second argument of <strong>&mdash;&gt;</strong> puts a new value  back into the <strong>hole</strong> in the evaluation context.</li>\n <li>The unquote operator (<strong>,</strong>) escapes to &ldquo;Racket mode&rdquo; (see below) to evaluate  a conjunction or disjunction.</li></ol>\n\n<p>A judgment or metafunction is a formal alternative to &ldquo;escaping to Racket&rdquo;,  but escaping can be convenient.</p>\n\n<p>Note: the cases in a reduction relation form a <em>set</em>, not a <em>sequence</em>. If more than one case matches, Redex applies them all.</p>\n\n<h3 id=\"q-what-is-racket-mode-what-is-redex-mode\">Q. What is &ldquo;Racket mode&rdquo;? What is &ldquo;Redex mode&rdquo;?</h3>\n\n<p>Code in a Redex model is sometimes evaluated in &ldquo;Racket mode&rdquo; and  sometimes evaluated in &ldquo;Redex mode&rdquo;. Racket mode evaluates Racket syntax to Racket values. Redex mode evaluates Racket syntax (possibly containing metafunction names) to terms.</p>\n\n<p>Key points:</p>\n\n<ol>\n <li>A Redex program starts in Racket mode.</li>\n <li>The <strong>X</strong> in <strong>(term X)</strong> is evaluated in Redex mode &hellip;</li>\n <li>&hellip; unless <strong>X</strong> contains unquoted sub-expressions. Unquoting escapes to Racket mode &hellip;</li>\n <li>&hellip; and <strong>term</strong>s inside an unquoted sub-expression are evaluated in Redex mode.</li></ol>\n\n<p>In other words, <strong>term</strong> enters Redex mode and <strong>unquote</strong> (<strong>,</strong>) escapes back to Racket.</p>\n\n<p>Redex implicitly switches to Redex mode in a few other places, for example:</p>\n\n<ul>\n <li>the right-side of a <strong>where</strong> clause is in Redex mode</li>\n <li>the result of a metafunction is in Redex mode</li></ul>\n\n<p>When in doubt, try using an <strong>unquote</strong>. Redex will raise an exception if it finds an unquote in Racket mode.</p>\n\n<h3 id=\"q-are-side-conditions-evaluated-in-racket-mode-or-redex-mode\">Q. Are <strong>side-condition</strong>s evaluated in &ldquo;Racket mode&rdquo; or &ldquo;Redex mode&rdquo;?</h3>\n\n<p>A <strong>(side-condition e)</strong> sometimes evaluates <strong>e</strong> as a Racket expression  and sometimes evaluates <strong>e</strong> as a Redex expression.</p>\n\n<ul>\n <li>reduction relations and metafunctions expect a <strong>Racket</strong> expression</li>\n <li>judgments expect a <strong>Redex</strong> expression</li></ul>\n\n<h3 id=\"q-what-is-a-binding-form\">Q. What is a binding form?</h3>\n\n<p>In the lambda calculus, <strong>λ</strong>-terms bind variables. A term <strong>(λ x M)</strong> means that any free occurrence of <strong>x</strong> in the sub-term <strong>M</strong>  refers to the <strong>x</strong> from the <strong>λ</strong>-term.</p>\n\n<p>Redex can express this idea with a binding form.</p>\n\n<pre><code>(define-language Λ\n  [e ::= (e e) x (λ x e)]\n  [x ::= variable-not-otherwise-mentioned]\n  #:binding-forms\n  (λ x_0 e_0 #:refers-to x_0))</code></pre>\n\n<p>Note: all the non-terminals in a language must be defined before the <strong>#:binding-forms</strong> keyword. If a non-terminal definition appears after the <strong>#:binding-forms</strong> keyword, then Redex will interpret the &ldquo;definition&rdquo; as a binding form.</p>\n\n<p>Binding forms work together with Redex&rsquo;s functions for substitution and  alphabetic equivalence.</p>\n\n<pre><code>(alpha-equivalent? Λ\n  (term (λ x x))\n  (term (λ y y))))\n;; #true\n\n(define-metafunction Λ\n  test-substitute : e -&gt; e\n  [(test-substitute (λ x_0 e_0))\n   (substitute e_0 x_0 y)])\n(term (test-substitute (λ z (z z))))\n;; '(y y)</code></pre>\n\n<h3 id=\"q-what-is--what-is-\">Q. What is <strong>&hellip;</strong>? What is <strong>&hellip;.</strong>?</h3>\n\n<p>Three dots (<strong>&hellip;</strong>) is for building patterns. If <strong>p</strong> is a pattern then <strong>(p &hellip;)</strong> matches any list whose elements all  match <strong>p</strong>.</p>\n\n<pre><code>(define-language L)\n(redex-match? L (number ... boolean ...) (term (1 2 #true #true)))\n;; #true</code></pre>\n\n<p>Four dots (<strong>&hellip;.</strong>) may be used in <a href=\"http://docs.racket-lang.org/redex/The_Redex_Reference.html#%28form._%28%28lib._redex%2Freduction-semantics..rkt%29._define-extended-language%29%29\"><strong>define-extended-language</strong></a>  to extend a previously-defined non-terminal.</p>\n\n<pre><code>(define-language C\n  (keyword ::= auto break case))\n(define-extended-language C++\n  C\n  (keyword ::= .... class))\n\n(redex-match? C keyword (term auto))\n;; #true\n(redex-match? C keyword (term class))\n;; #false\n(redex-match? C++ keyword (term auto))\n;; #true\n(redex-match? C++ keyword (term class))\n;; #true</code></pre>\n\n<h3 id=\"q-where-to-learn-more-about-redex\">Q. Where to learn more about Redex?</h3>\n\n<p>&ldquo;Critical path&rdquo; resources:</p>\n\n<ul>\n <li>Code examples for this post: <a href=\"https://github.com/nuprl/website/blob/master/blog/static/redex-faq.rkt\">https://github.com/nuprl/website/blob/master/blog/static/redex-faq.rkt</a></li>\n <li>Redex documentation: <a href=\"http://docs.racket-lang.org/redex/index.html\">http://docs.racket-lang.org/redex/index.html</a></li>\n <li><a href=\"https://dvanhorn.github.io/redex-aam-tutorial/\"><em>An Introduction to Redex with Abstracting Abstract Machines</em></a> by David Van Horn</li>\n <li><a href=\"https://www.leafac.com/playing-the-game-with-plt-redex/\"><em>Playing the Game with PLT Redex</em></a> by Leandro Facchinetti</li>\n <li><a href=\"https://williamjbowman.com/doc/experimenting-with-redex/index.html\"><em>Experimenting with Languages in Redex</em></a> by William J. Bowman</li></ul>\n\n<p>&ldquo;Procrastination&rdquo; resources:</p>\n\n<ul>\n <li><a href=\"http://tata.gforge.inria.fr/\"><em>Tree Automata Techniques and Applications</em></a></li>\n <li><a href=\"http://lamport.azurewebsites.net/pubs/lamport-types.pdf\"><em>Should your Specification Language be Typed?</em></a></li>\n <li>Redex source code (see <code>redex-lib/</code>): <a href=\"https://github.com/racket/redex\">https://github.com/racket/redex</a></li></ul>")) ((? . 19) f post (u . "[Making an IDE Plugin for DrRacket (cross-post)](https://lang.video/blog/2018/03/21/making-an-ide-plugin-for-drracket/)") (? . 19) 1731904015 (p+ #"/home/runner/work/website/website/blog/2018/04/12/-making-an-ide-plugin-for-drracket-cross-post-https-lang-video-blog-2018-03-21-making-an-ide-plugin-for-drracket/index.html" . unix) (u . "/blog/2018/04/12/-making-an-ide-plugin-for-drracket-cross-post-https-lang-video-blog-2018-03-21-making-an-ide-plugin-for-drracket/") (u . "2018-04-12T12:12:53") (? . 6) (? . 37) (c (u . "tutorials") c (u . "Author: Leif Andersen")) (? . 5) #f (? . 5)) ((? . 20) f post (u . "[Ř Overview I (cross-post)](https://www.o1o.ch/lab/entry/1309rkp8krzaq1catz4by5gyt719ejoi4qpiabpnmzsx64fke3g4huga3b0qqinc.html)") (? . 20) 1731904015 (p+ #"/home/runner/work/website/website/blog/2022/02/16/-r\314\214-overview-i-cross-post-https-www-o1o-ch-lab-entry-1309rkp8krzaq1catz4by5gyt719ejoi4qpiabpnmzsx64fke3g4huga3b0qqinc-html/index.html" . unix) (u . "/blog/2022/02/16/-r%CC%8C-overview-i-cross-post-https-www-o1o-ch-lab-entry-1309rkp8krzaq1catz4by5gyt719ejoi4qpiabpnmzsx64fke3g4huga3b0qqinc-html/") (u . "2022-02-16T00:00:42") (? . 0) #f (c (u . "Ř JIT") c (u . "Author: Olivier Flückiger")) (? . 5) #f (? . 5)) ((? . 21) f post (u . "[What even is compiler correctness? (cross-post)](https://williamjbowman.com/blog/2017/03/24/what-even-is-compiler-correctness/)") (? . 21) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/03/24/-what-even-is-compiler-correctness-cross-post-https-williamjbowman-com-blog-2017-03-24-what-even-is-compiler-correctness/index.html" . unix) (u . "/blog/2017/03/24/-what-even-is-compiler-correctness-cross-post-https-williamjbowman-com-blog-2017-03-24-what-even-is-compiler-correctness/") (u . "2017-03-24T23:11:17") (? . 82) (? . 15) (c (u . "Author: William J. Bowman")) (? . 5) #f (? . 5)) ((? . 22) f post (u . "Artifacts for Semantics") (? . 22) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/05/15/artifacts-for-semantics/index.html" . unix) (u . "/blog/2017/05/15/artifacts-for-semantics/") (u . "2017-05-15T10:08:31") (? . 23) (? . 51) (c (u . "Author: Daniel Patterson")) (u . "\n<p><a href=\"http://gallium.inria.fr/~scherer/\">Gabriel Scherer</a> and I recently wrote an <a href=\"https://dbp.io/artifacts/funtal\">artifact</a> for a semantics <a href=\"https://dbp.io/pubs/2017/funtal.pdf\">paper</a> on a typed assembly language interoperating with a high-level functional language.</p>") #t (u . "\n<p><a href=\"http://gallium.inria.fr/~scherer/\">Gabriel Scherer</a> and I recently wrote an <a href=\"https://dbp.io/artifacts/funtal\">artifact</a> for a semantics <a href=\"https://dbp.io/pubs/2017/funtal.pdf\">paper</a> on a typed assembly language interoperating with a high-level functional language.</p>\n<!-- more-->\n\n<p>We wrote a interpreter, typechecker, and parser in OCaml, compiled it to Javascript using <a href=\"http://ocsigen.org/js_of_ocaml/\">js_of_ocaml</a>, and then put it on a webpage (with an editor with syntax highlighting and error reporting) that allows people to step through examples from the paper or write their own. (Feel free to start by playing a bit with <a href=\"https://dbp.io/artifacts/funtal\">our artifact</a>).</p>\n\n<p>This post will summarize the different parts to make it easier for others to repeat this process. We think it was a total success, and have gotten feedback that it makes understanding the (somewhat complex) language from the paper much easier. We argue that building such interpreters / typecheckers is easy enough that all papers should do this. Further, while our interpreter / typechecker is completely unverified, since we wrote it in OCaml, this approach should work equally well for semantics verified in Coq and then extracted to OCaml.</p>\n\n<hr />\n\n<p>The paper in question, <a href=\"https://dbp.io/pubs/2017/funtal.pdf\">FunTAL: Reasonably Mixing a Functional Language with Assembly</a> (to appear in PLDI17), presents a multi-language that incorporates a typed assembly language (TAL) and a simple functional language where each can be embedded within the other. The paper then develops a logical relation that can be used to reason about the equivalence of such mixed programs. For example in the paper we show an imperative register-based factorial and a functional factorial equivalent.</p>\n\n<p>Both the static and dynamic semantics are relatively complex. The typed assembly has registers (which store word-sized values), a heap (which stores code-blocks and tuples), and a stack (not a call-stack, simply a place where word-sized values can be pushed and popped). Code-blocks have pre-conditions on the state of the registers and the stack, and allow the tail of the stack to be abstracted over polymorphically. This allows values to be protected on the stack before jumping to blocks that otherwise could change them. This is used, along with a novel notion of <strong>return markers</strong>, to ensure well-bracketing in the control flow of the typed assembly. The return markers indicate the location that points to the block that will eventually be returned to (assuming it doesn&rsquo;t loop infinitely). At the top level, the return marker <code>end</code> indicates that, assuming it does not loop, eventually the program will stop, rather than returning somewhere else.</p>\n\n<p>Understanding the dynamic semantics requires tracking how values flow through the registers, the heap, and the stack, and rather than a call-stack, the user has to track the control flow through the statically-enforced return markers. This allows a good deal of low-level control-flow while still ensuring that calls will eventually return to the right place. This well-bracketing is vital to be able to reason about &ldquo;components&rdquo; that eventually return a value of a particular type, a necessity when embedding these components in a typed high-level program! However, it does mean that understanding the static and dynamic semantics from a few rules alone is a tall order. Our functional language is more standard, though we use (iso)-recursive types to allow recursion, which can easily trip up people, especially when you don&rsquo;t have a type-checker to catch typos!</p>\n\n<p>For that reason, when working through examples for the paper I implemented a simple interpreter for the multi-language. I did this in OCaml, in the most straightforward way possible: by translating the definitions from the paper into type definitions (<a href=\"https://github.com/dbp/funtal/blob/032be70f33f77e80f4fab7e62016bfabf96476f3/ftal.ml#L835\">for F</a> and <a href=\"https://github.com/dbp/funtal/blob/032be70f33f77e80f4fab7e62016bfabf96476f3/ftal.ml#L1209\">for TAL</a>), and the reduction relation into a <a href=\"https://github.com/dbp/funtal/blob/032be70f33f77e80f4fab7e62016bfabf96476f3/ftal.ml#L1155\">&ldquo;step&rdquo; function</a> that (assuming it wasn&rsquo;t stuck or a value), did one step of evaluation. Later, I did the same thing for the type-checker, translating rules into a <a href=\"https://github.com/dbp/funtal/blob/032be70f33f77e80f4fab7e62016bfabf96476f3/ftal.ml#L282\">type-checking function</a>. The latter had to deviate from the rules in the paper in a few minor ways, as the typing rules we had in the paper were slightly not syntax directed.</p>\n\n<p>Having the interpreter and type-checker was very useful for me, as I could check that the examples from the paper did not contain typos, but it was much less useful as an artifact for a reader of the paper. To use it the reader would have to download the source, install OCaml, write out examples as OCaml data constructors in a test file, compile it, run it, and then interpret the (quite overwhelming) output of every step of evaluation. At each step, I printed the current registers, current stack, current heap, what the evaluation context was (as you might be evaluating TAL instructions that were embedded inside a functional program that, in turn, was embedded in further TAL instructions), and what the current reduction was.</p>\n\n<p>To get from that useful-for-the-authors artifact to a useful-to-readers artifact requires doing three things:</p>\n\n<ol>\n <li>Allow reading/writing programs in a notation as close to the paper as  possible. In our paper we use superscripts, subscripts, and a few greek  letters, but ended up with a syntax otherwise very close to the paper &mdash; the biggest  differences were a few extra delimiters introduced to reduce ambiguity.</li>\n <li>Present an interface that highlights type errors at the location they  occurred in, and allow a reader to step forward and backwards through the  evaluation. Printing console output traces is fine for authors, but adds too  much effort for readers.</li>\n <li>Put it online! Don&rsquo;t require installing any software! Conveniently,  implementing 2 is also made easier once done online, as we could use existing  editor tooling to present the code, highlight errors, etc. By using OCaml, we  were able to easily use the  excellent <a href=\"http://ocsigen.org/js_of_ocaml/\">js_of_ocaml</a>.</li></ol>\n\n<p>The first was done by Gabriel, who wrote a grammar using <a href=\"http://gallium.inria.fr/~fpottier/menhir/\">Menhir</a>, and then equipped it with custom parsing error messages that provide much better feedback when there are typos in what people are trying. We also wrote a pretty-printer using the <a href=\"http://gallium.inria.fr/blog/first-release-of-pprint/\">PPrint</a> library, so we could show intermediate program states through the UI. After writing this, we were able to convert our existing suite of test cases and examples to be written textually, which was a huge improvement for us as well! These and other tests were used to ensure that the parser/pretty-printer would round-trip properly.</p>\n\n<p>For the interface, I built a simple web page that had the <a href=\"https://codemirror.net/\">CodeMirror</a> editor equipped with a very simple syntax highlighter (<a href=\"https://github.com/dbp/funtal/blob/032be70f33f77e80f4fab7e62016bfabf96476f3/artifact/index.html#L247\">8 lines of code</a> to highlight keywords &amp; atoms, plus a CodeMirror extension to highlight matching brackets) and error highlighting (which is triggered by the OCaml code). I then made a simple &ldquo;machine state&rdquo; UI that showed, in pretty-printed format, the heap, stack, registers, context, and redex. On the OCaml side, when the &ldquo;run&rdquo; button is clicked, we parse and typecheck and, assuming no errors occur, store the current state as our &ldquo;history&rdquo;. As the user clicks forward or backwards, we run the step function and append to the history of states or pop states off of the history. In total, there are <a href=\"https://github.com/dbp/funtal/blob/032be70f33f77e80f4fab7e62016bfabf96476f3/artifact/index.html#L246\">50 lines of Javascript</a> and about <a href=\"https://github.com/dbp/funtal/blob/032be70f33f77e80f4fab7e62016bfabf96476f3/web.ml\">150 lines of OCaml</a> that handle the logic for this interactive UI.</p>\n\n<p>Putting it online was very easy, based on the choice of tools used earlier. We compile the main file (<a href=\"https://github.com/dbp/funtal/blob/032be70f33f77e80f4fab7e62016bfabf96476f3/web.ml\">web.ml</a>) to Javascript using <a href=\"http://ocsigen.org/js_of_ocaml/\">js_of_ocaml</a>, and it pulls in the parser, type-checker, interpreter, examples, etc. The rest of the artifact is a single html file, a CSS file, and a few javascript files for CodeMirror. It requires no server backend, is easy to archive and save, and will even run on smartphones!</p>\n\n<p>The total time spent implementing the artifact was a small fraction of the time spent on the paper (probably 15 days of person-time), and while it was not in any critical way essential for the success of the paper, it does make the paper much easier to read, and we would argue that all semantics papers would be better off with easy to use artifacts for experimentation. Also, while implementing the artifact we found a few mistakes in the typing judgments for the language. The most interesting one was for our <code>protect</code> TAL instruction, which exists to protect the tail of the stack in a fresh type variable. We had written this as a typing rule that type-checked the rest of the instruction sequence with the abstracted tail, but this never allowed the tail to be accessed again. By translating the typing judgments exactly into code, we realized that there was a problem, because examples that should have worked did not type-check! We were then able to fix the typing rule to conform to what we originally thought it achieved &mdash; locally abstracting, but not abstracting from outside the component. What is interesting is that this did not come up in our proofs because the typing rule was perfectly valid &mdash; it just did not allow non-trivial programs that used the <code>protect</code> instruction. It&rsquo;s quite possible we would have noticed this without implementing the artifact, but the artifact certainly made it easier!</p>\n\n<p>To see the artifact online, visit:</p>\n\n<p><a href=\"https://dbp.io/artifacts/funtal\">https://dbp.io/artifacts/funtal</a></p>\n\n<p>The source code is at:</p>\n\n<p><a href=\"https://github.com/dbp/funtal/tree/032be70f33f77e80f4fab7e62016bfabf96476f3\">https://github.com/dbp/funtal</a></p>")) ((? . 24) f post (u . "Tutorial: Racket FFI, Part 2") (? . 24) 1731904015 (p+ #"/home/runner/work/website/website/blog/2016/06/29/tutorial-racket-ffi-part-2/index.html" . unix) (u . "/blog/2016/06/29/tutorial-racket-ffi-part-2/") (u . "2016-06-29T18:48:17") (? . 28) (? . 53) (c (u . "Racket") c (u . "FFI") c (u . "tutorial") c (u . "Author: Asumu Takikawa")) (u . "\n<p>This is part 2 of my tutorial on using the Racket FFI. If you haven&rsquo;t read\npart 1 yet, you can find it\n<a href=\"http://prl.ccs.neu.edu/blog/2016/06/27/tutorial-using-racket-s-ffi/\">here</a>.\n<span style=\"font-weight: bold\">Update:</span> part 3 is also now available\n<a href=\"http://prl.ccs.neu.edu/blog/2016/07/11/tutorial-racket-ffi-part-3/\">here</a>.</p>\n\n<p>Part 2 will continue with more Cairo examples. In this installment, I plan to\ngo over some more advanced FFI hacking such as handling computed argument\nvalues, custom return arguments, and using C structs.</p>") #t (u . "\n<p>This is part 2 of my tutorial on using the Racket FFI. If you haven&rsquo;t read\npart 1 yet, you can find it\n<a href=\"http://prl.ccs.neu.edu/blog/2016/06/27/tutorial-using-racket-s-ffi/\">here</a>.\n<span style=\"font-weight: bold\">Update:</span> part 3 is also now available\n<a href=\"http://prl.ccs.neu.edu/blog/2016/07/11/tutorial-racket-ffi-part-3/\">here</a>.</p>\n\n<p>Part 2 will continue with more Cairo examples. In this installment, I plan to\ngo over some more advanced FFI hacking such as handling computed argument\nvalues, custom return arguments, and using C structs.</p>\n<!--more-->\n\n<p>First, here&rsquo;s the core code from part 1 condensed and re-arranged into an\nexample that you can copy and paste into your definitions area:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><a class=\"RktModLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/guide/Module_Syntax.html#%28part._hash-lang%29\"><span class=\"RktMod\">#lang</span></a><span class=\"hspace\">&nbsp;</span><a class=\"RktModLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/index.html\"><span class=\"RktSym\">racket</span></a></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">racket/draw</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">ffi/unsafe</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">ffi/unsafe/define</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">pict</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">bitmap magic</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">make-bitmap</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">256</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">256</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt-surface</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">send</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">get-handle</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">C types</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_tagged-pointers.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._define-cpointer-type%29%29\">define-cpointer-type</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_tagged-pointers.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._define-cpointer-type%29%29\">define-cpointer-type</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_surface_t</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_line_cap_t</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Enumerations_and_Masks.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__enum%29%29\">_enum</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">butt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">round</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">square</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-lib</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Loading_Foreign_Libraries.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._ffi-lib%29%29\">ffi-lib</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">define-ffi-definer</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-lib</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">the foreign functions</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-create</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_surface_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">#:c-id</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo_create</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-move-to</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Other_Atomic_Types.html#%28def._%28%28quote._~23~25foreign%29.__void%29%29\">_void</a></span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">#:c-id</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo_move_to</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-line-to</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Other_Atomic_Types.html#%28def._%28%28quote._~23~25foreign%29.__void%29%29\">_void</a></span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">#:c-id</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo_line_to</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-set-line-width</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Other_Atomic_Types.html#%28def._%28%28quote._~23~25foreign%29.__void%29%29\">_void</a></span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">#:c-id</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo_set_line_width</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-stroke</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Other_Atomic_Types.html#%28def._%28%28quote._~23~25foreign%29.__void%29%29\">_void</a></span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">#:c-id</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo_stroke</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-set-line-cap</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_line_cap_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Other_Atomic_Types.html#%28def._%28%28quote._~23~25foreign%29.__void%29%29\">_void</a></span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">#:c-id</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo_set_line_cap</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-create</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt-surface</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Bitmap -&gt; Pict</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">a helper for displaying the bitmap</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">show</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">linewidth</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">frame</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bitmap</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<h1><a name=\"(part._.Dashes_and_array_arguments)\"></a>Dashes and array arguments</h1>\n\n<p>To start off, let&rsquo;s look at another C example from the Cairo\n<a href=\"https://www.cairographics.org/samples/\">samples page</a>.\nThis time we will look at the \"dash\" example, which has a\nuse of an input array:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">double</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">dashes</span><span class=\"RktPn\">[</span><span class=\"RktPn\">]</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">=</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">{</span><span class=\"RktVal\">50.0</span><span class=\"RktMeta\">,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktCmt\">/*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">ink</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">*/</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">10.0</span><span class=\"RktMeta\">,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktCmt\">/*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">skip</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">*/</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">10.0</span><span class=\"RktMeta\">,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktCmt\">/*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">ink</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">*/</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">10.0</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktCmt\">/*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">skip*/</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">}</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">int</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">ndash</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">=</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">sizeof</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">dashes</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">/sizeof</span><span class=\"RktPn\">(</span><span class=\"RktMeta\">dashes</span><span class=\"RktPn\">[</span><span class=\"RktVal\">0</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">double</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">offset</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">=</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">-</span><span class=\"RktVal\">50.0</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">&#160;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_set_dash</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">cr,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">dashes,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">ndash,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">offset</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_set_line_width</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">cr,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">10.0</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">&#160;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_move_to</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">cr,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">128.0</span><span class=\"RktMeta\">,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">25.6</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_line_to</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">cr,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">230.4</span><span class=\"RktMeta\">,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">230.4</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_rel_line_to</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">cr,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">-</span><span class=\"RktVal\">102.4</span><span class=\"RktMeta\">,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">0.0</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_curve_to</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">cr,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">51.2</span><span class=\"RktMeta\">,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">230.4</span><span class=\"RktMeta\">,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">51.2</span><span class=\"RktMeta\">,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">128.0</span><span class=\"RktMeta\">,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">128.0</span><span class=\"RktMeta\">,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">128.0</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">&#160;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_stroke</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">cr</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>The most interesting function here is <span class=\"stt\">cairo_set_dash</span>, which takes an\narray argument. The only other new functions are <span class=\"stt\">cairo_rel_line_to</span>\nand <span class=\"stt\">cairo_curve_to</span> which have very straightforward C types:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-rel-line-to</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Other_Atomic_Types.html#%28def._%28%28quote._~23~25foreign%29.__void%29%29\">_void</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">#:c-id</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo_rel_line_to</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-curve-to</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Other_Atomic_Types.html#%28def._%28%28quote._~23~25foreign%29.__void%29%29\">_void</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">#:c-id</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo_curve_to</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>Meanwhile, the C type signature for <span class=\"stt\">cairo_set_dash</span> from the Cairo\ndocs looks like this:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">void</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_set_dash</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">cairo_t</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">*cr,</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">const</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">double</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">*dashes,</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">int</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">num_dashes,</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">double</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">offset</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>Something to note about the arguments is that <span class=\"stt\">num_dashes</span>\nencodes the length of the array <span class=\"stt\">dashes</span>. This will come up later when\nwe want to make the C type for this function more convenient.</p>\n\n<p>On the Racket side, it&rsquo;s natural to represent the array of dashes as either a\nlist or <a class=\"techoutside Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/vectors.html#%28tech._vector%29\"><span class=\"techinside\">vector</span></a> of numbers. Given that, a fairly literal translation of\nthe C type above might look like the following:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-set-dash</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__list%29%29\">_list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">i</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__int%29%29\">_int</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Other_Atomic_Types.html#%28def._%28%28quote._~23~25foreign%29.__void%29%29\">_void</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">#:c-id</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo_set_dash</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>This type includes a type constructor we haven&rsquo;t seen yet: <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__list%29%29\">_list</a></span></span>.\nThis is a so-called <a class=\"techoutside Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28tech._custom._function._type%29\"><span class=\"techinside\">custom function type</span></a> that has special meaning\ninside of a <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span></span> type. It lets you convert between a Racket list and\na C array. Since arrays are often used for both input and output of a C function,\nthe constructor requires you to specify the mode in which you are using the\narray.</p>\n\n<p>Since we only want to provide a list from the Racket side to C, we&rsquo;ll use\nthe <span class=\"RktWrap\"><span class=\"RktSym\">i</span></span> input mode. We can then call the function like this:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-set-dash</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">50.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10.0</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">4</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\"><span class=\"nobreak\">-5</span>0.0</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>Note that because of how we defined the type of <span class=\"RktWrap\"><span class=\"RktSym\">cairo-set-dash</span></span> we had to\nprovide the length of the input list as a separate argument! This seems pretty\nsilly since it&rsquo;s very easy to get the length of a Racket list and because this\nis a likely source of mistakes. It would be preferable to compute the length\nargument automatically.</p>\n\n<p>Luckily, the <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span></span> type constructor actually lets you do this with the\n<span class=\"RktWrap\"><span class=\"RktPn\">(</span><span class=\"RktSym\">name</span><span class=\"stt\"> </span><span class=\"RktSym\">:</span><span class=\"stt\"> </span><span class=\"RktSym\">type</span><span class=\"RktPn\">)</span></span> syntax for naming arguments in combination with the\n<span class=\"RktWrap\"><span class=\"RktPn\">(</span><span class=\"RktSym\">type</span><span class=\"stt\"> </span><span class=\"RktVar\">=</span><span class=\"stt\"> </span><span class=\"RktSym\">expr</span><span class=\"RktPn\">)</span></span> syntax for supplying computed arguments:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-set-dash</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">name this argument for later uses in the type</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">dashes</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">:</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__list%29%29\">_list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">i</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">a computed argument position</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__int%29%29\">_int</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3d%29%29\">=</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._length%29%29\">length</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">dashes</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Other_Atomic_Types.html#%28def._%28%28quote._~23~25foreign%29.__void%29%29\">_void</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">#:c-id</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo_set_dash</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>When a computed argument is specified with a <span class=\"RktWrap\"><span class=\"RktVar\">=</span></span>, it&rsquo;s not necessary to provide\nthe argument on the Racket side. So <span class=\"RktWrap\"><span class=\"RktSym\">cairo-set-dash</span></span> is now an arity 3\nfunction that can be called like this:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-set-dash</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">50.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10.0</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\"><span class=\"nobreak\">-5</span>0.0</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>This means we&rsquo;ll never make a mistake in passing the length argument to Cairo.\nJust as an aside, it&rsquo;s also possible to use Racket vectors instead of lists by using\nthe <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__vector%29%29\">_vector</a></span></span> type constructor.</p>\n\n<p>Putting it all together, we can reproduce the dashes example like this:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">dashes</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">50.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10.0</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">offset</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\"><span class=\"nobreak\">-5</span>0.0</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-set-dash</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">dashes</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">offset</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-set-line-width</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">10.0</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-move-to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">128.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">25.6</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-line-to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">230.4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">230.4</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-rel-line-to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\"><span class=\"nobreak\">-1</span>02.4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0.0</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-curve-to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">51.2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">230.4</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">51.2</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">128.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">128.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">128.0</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-stroke</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">show</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><img src=\"/blog/img/posts/2016-06-29-tutorial-racket-ffi-part-2/pict.png\" alt=\"image\" height=\"262\" style=\"vertical-align: 0px; margin: -3px -3px -3px -3px;\" width=\"262\" /></p></td></tr></tbody></table></div>\n\n<h1><a name=\"(part._.Result_arguments_and_.C_structs)\"></a>Result arguments and C structs</h1>\n\n<p>For some more advanced FFI hacking, let&rsquo;s consider the problem of drawing some\ntext into a predetermined space. In particular, we have our usual 256x256\nbitmap that we want to draw some text into:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">txt-bt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">make-bitmap</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">256</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">256</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">txt-surface</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">send</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">txt-bt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">get-handle</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">txt-ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-create</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">txt-surface</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>Our challenge is to make a Racket function that takes a string (let&rsquo;s\nassume we can draw it in one line) and draws it into this bitmap.\nSince we are taking an arbitrary string, we will need to figure out\nhow to scale the text to fit. To make it simple, let&rsquo;s just scale the\ntext to fit the width and assume the height will be okay.</p>\n\n<p>To implement the key step of measuring the text size, we can use the\n<a href=\"https://www.cairographics.org/manual/cairo-text.html#cairo-text-extents\"><span class=\"stt\">cairo_text_extents</span></a>\nfunction. Its type signature is as follows:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">void</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_text_extents</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">cairo_t</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">*cr,</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">const</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">char</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">*utf8,</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_text_extents_t</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">*extents</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>The interesting part of this signature is that\n<a href=\"https://www.cairographics.org/manual/cairo-cairo-scaled-font-t.html#cairo-text-extents-t\"><span class=\"stt\">cairo_text_extents_t</span></a>\nis a struct type:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktCmt\">/*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">from</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">the</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">docs</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">*/</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">typedef</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">struct</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">{</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">double</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">x_bearing</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">double</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">y_bearing</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">double</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">width</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">double</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">height</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">double</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">x_advance</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">double</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">y_advance</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">}</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_text_extents_t</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>We haven&rsquo;t yet seen how to handle C structs with the FFI, but it&rsquo;s not\ntoo tricky. Support for C structs comes built-in and will look familiar\nif you&rsquo;re used to Racket structs. We can directly translate the documented\ndefinition above into a <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/C_Struct_Types.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._define-cstruct%29%29\">define-cstruct</a></span></span> declaration:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">the leading underscore is mandatory</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/C_Struct_Types.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._define-cstruct%29%29\">define-cstruct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_text_extents_t</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">x-bearing</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">y-bearing</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">width</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">height</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">x-advance</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">y-advance</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>This declaration does a couple of things. First, it defines a bunch of handy C types\nrelated to the struct for us:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">_cairo_text_extents_t</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#&lt;ctype&gt;</span></p></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">pointer to struct</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">_cairo_text_extents_t-pointer</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#&lt;ctype&gt;</span></p></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">allows NULL pointer</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">_cairo_text_extents_t-pointer/null</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#&lt;ctype&gt;</span></p></td></tr></tbody></table></div>\n\n<p>Along with functions that look like regular Racket struct operations:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">a struct constructor</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">make-cairo_text_extents_t</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#&lt;procedure:make-cairo_text_extents_t&gt;</span></p></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">a field selector</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">cairo_text_extents_t-width</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#&lt;procedure:cairo_text_extents_t-width&gt;</span></p></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">a predicate for the struct</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">cairo_text_extents_t?</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#&lt;procedure:^TYPE?&gt;</span></p></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">a field mutation function</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">set-cairo_text_extents_t-width!</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#&lt;procedure:set-cairo_text_extents_t-width!&gt;</span></p></td></tr></tbody></table></div>\n\n<p>With the struct type defined, it&rsquo;s easy to come up with a rudimentary\ninterface for <span class=\"RktWrap\"><span class=\"RktSym\">cairo-text-extents</span></span>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-text-extents</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/String_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__string%29%29\">_string</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">_cairo_text_extents_t-pointer</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Other_Atomic_Types.html#%28def._%28%28quote._~23~25foreign%29.__void%29%29\">_void</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">#:c-id</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo_text_extents</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>In order to actually use this function, we need to create a text extents struct\nand provide it as a pointer. Conveniently, the FFI treats instances of C structs\nas pointers so this is pretty straightforward:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">extents</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">make-cairo_text_extents_t</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">0.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0.0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-text-extents</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">txt-ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"hello world\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">extents</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo_text_extents_t-width</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">extents</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">54.0</span></p></td></tr></tbody></table></div>\n\n<p>This style of programming feels awfully imperative though. Since we&rsquo;re in a\nfunctional language, it would be nice to avoid the manual creation of the struct.\nWe can define an alternate version of the <span class=\"RktWrap\"><span class=\"RktSym\">cairo-text-extents</span></span> FFI wrapper\nby combining named arguments, a new <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__ptr%29%29\">_ptr</a></span></span> type constructor,\nand a neat feature of <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span></span> that lets you customize\nthe return result:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-text-extents*</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/String_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__string%29%29\">_string</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">named args and _ptr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">ext</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">:</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__ptr%29%29\">_ptr</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">o</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_text_extents_t</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">the return result of the C function</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Other_Atomic_Types.html#%28def._%28%28quote._~23~25foreign%29.__void%29%29\">_void</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">custom return result for the wrapper</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ext</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">#:c-id</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo_text_extents</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>The <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__ptr%29%29\">_ptr</a></span></span> constructor works like the <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__list%29%29\">_list</a></span></span> constructor we saw\nearlier in this blog post but typically for a single object. Since we are passing\nin a value to use as an output, we specify the <span class=\"RktWrap\"><span class=\"RktSym\">o</span></span> mode to <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__ptr%29%29\">_ptr</a></span></span>.\nIn output mode, this type will automatically allocate a new instance of the type\n(using the <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_pointer-funcs.html#%28def._%28%28quote._~23~25foreign%29._malloc%29%29\">malloc</a></span></span> function) and arrange for it to be passed in as\na pointer.</p>\n\n<p>The strangest part of this example is that there are now two uses of the\n<span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span></span> form! By providing a second arrow, we can customize what the FFI wrapper\nreturns. The expression to the right of the second arrow is just Racket code that can\nreference previously named arguments. The result of evaluating this\nexpression is used instead of the normal return result for calls to the\nwrapped function. In this case, we just return the struct that was allocated for us.</p>\n\n<p>Using this new version of the wrapper is much simpler:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo_text_extents_t-width</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-text-extents*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">txt-ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"hello world\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">54.0</span></p></td></tr></tbody></table></div>\n\n<p>With that in hand, it&rsquo;s pretty easy to write the function we set out to write:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-show-text</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/String_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__string%29%29\">_string</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Other_Atomic_Types.html#%28def._%28%28quote._~23~25foreign%29.__void%29%29\">_void</a></span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">#:c-id</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo_show_text</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-scale</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Other_Atomic_Types.html#%28def._%28%28quote._~23~25foreign%29.__void%29%29\">_void</a></span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">#:c-id</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo_scale</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">String -&gt; Void</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">draws a string scaled horizontally</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">fit-text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">str</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">padding</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">20</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-move-to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">txt-ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2F%29%29\">/</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">padding</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2.0</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">128.0</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">extents</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-text-extents*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">txt-ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">str</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x-bearing</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo_text_extents_t-x-bearing</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">extents</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">width</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo_text_extents_t-width</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">extents</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">scale</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2F%29%29\">/</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._-%29%29\"><span class=\"nobreak\">-</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">256.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">padding</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">x-bearing</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">width</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-scale</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">txt-ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">scale</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">scale</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-show-text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">txt-ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">str</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>And to conclude part 2 of this tutorial, here&rsquo;s an example use\nof the new <span class=\"RktWrap\"><span class=\"RktSym\">fit-text</span></span> function:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">fit-text</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"Saluton, Mondo / Hallo, mundo\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">show</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">txt-bt</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><img src=\"/blog/img/posts/2016-06-29-tutorial-racket-ffi-part-2/pict_2.png\" alt=\"image\" height=\"262\" style=\"vertical-align: 0px; margin: -3px -3px -3px -3px;\" width=\"262\" /></p></td></tr></tbody></table></div>")) ((? . 25) f post (u . "Bullets are good for your Coq proofs") (? . 25) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/02/21/bullets-are-good-for-your-coq-proofs/index.html" . unix) (u . "/blog/2017/02/21/bullets-are-good-for-your-coq-proofs/") (u . "2017-02-21T19:04:28") (? . 30) (? . 26) (c (u . "coq") c (u . "Author: Gabriel Scherer")) (u . "\n<p>I believe that bullets are one of the most impactful features of recent versions of Coq, among those that non-super-expert users can enjoy. They had a big impact on the maintainability of my proofs. Unfortunately, they are not very well-known, due to the fact that some introductory documents have not been updated to use them.</p>\n\n<p>Bullets are a very general construction and there are several possible ways to use them; I have iterated through different styles. In this post I will give the general rules, and explain my current usage style.</p>") #t (u . "\n<p>I believe that bullets are one of the most impactful features of recent versions of Coq, among those that non-super-expert users can enjoy. They had a big impact on the maintainability of my proofs. Unfortunately, they are not very well-known, due to the fact that some introductory documents have not been updated to use them.</p>\n\n<p>Bullets are a very general construction and there are several possible ways to use them; I have iterated through different styles. In this post I will give the general rules, and explain my current usage style.</p>\n<!-- more-->\n\n<h2 id=\"why-bullets\">Why bullets</h2>\n\n<p>While you are doing a proof, Coq shows a list of subgoals that have to be proved before the whole proof is complete. Most proof steps will operate on the current active subgoal, changing the hypotheses or the goal to prove, but some proof steps will split it into several subgoals (growing the total list of goals), or may terminate the proof of the current subgoal and show you the next active subgoal.</p>\n\n<p>Before bullets, a typical proof script would contain the proofs of each subgoal, one after another.</p>\n\n<pre><code>induction foo. (* this creates many subgoal *)\n\nproof of first subgoal.\n\nproof of second subgoal.</code></pre>\n\n<p>There are many ways to structure this to make the structure more apparent: people would typically have a comment on each subgoal, or make disciplined use of indentation and blank lines. But, in my experience, a major problem with this style was maintainability in the face of changes to the definitions or parts of automation. It could be very hard of what was happening when a proof suddenly broke after a change before in the file:</p>\n\n<ul>\n <li>\n  <p>If a proof step now proves <em>less</em> things, then what used to be the  end of a subgoal may not be anymore. Coq would then start reading  the proof of the next subgoal and try to apply it to the unfinished  previous goals, generating very confusing errors (you believe you  are in the second subgoal, but the context talks about a leaf case  of the first goal).</p></li>\n <li>\n  <p>If a proof step now proves <em>more</em> things, it is also very bad! The  next proof steps, meant for the first subgoal (for example), would  then apply to the beginning of the second subgoal, and you get very  confusing errors again.</p></li></ul>\n\n<p>What we need for robustness is a way to indicate our <em>intent</em> to Coq, when we think that a subgoal is finished and that a new subgoal starts, so that Coq can fail loudly at the moment where it notices that this intent does not match reality, instead of at an arbitrary later time.</p>\n\n<p>(The <code>S*Case</code> tactics used in (older versions of) Software Foundations can solve this problem if used in a carefully, systematic way, and additionally provides naming. Alexandre Pilkiewicz implemented an even more powerful <a href=\"https://github.com/pilki/cases\">cases</a> plugin. Bullets are available in standard Coq since 8.4 (released in 2012), and can be used with no effort.)</p>\n\n<p>There is not much discussion of bullets around; see the <a href=\"https://coq.inria.fr/distrib/8.6/refman/Reference-Manual009.html#sec326\">documentation</a> in the Coq manual. I learned a lot from Arthur Azevedo de Amorim&rsquo;s <a href=\"https://github.com/arthuraa/poleiro/blob/master/theories/Bullets.v\">Bullets.v</a> file.</p>\n\n<p>Finally, some people don&rsquo;t use bullets, because they systematically use so much automation that they never see subgoals &mdash; each lemma has a one-line proof. This is also a valid style. (I have been going to Adam Chlipala&rsquo;s <a href=\"https://frap.csail.mit.edu/main\">Formal Reasoning about Programs</a> 2017 class, where Adam ignores bullets because that is his usual style.) Because I am not crushy enough to do this from the start, my proofs tend to start with cases and subgoals, and then I refine them to add more automation for robustness. I found bullets very useful for the first step, and during the refinement process.</p>\n\n<h2 id=\"bullets\">Bullets</h2>\n\n<p>Bullets are actually a combination of two features, braces <code>{ ... }</code> and actual list bullets &mdash; <code>-</code>, <code>+</code>, <code>*</code>, or homogeneous repetitions of those, for example <code>--</code> or <code>***</code>.</p>\n\n<h3 id=\"braces\">Braces</h3>\n\n<p>The opening brace <code>{</code> focuses the proof on the current subgoal. If you finish the proof of the subgoal, the following subgoal will not become accessible automatically; you have to use the closing brace <code>}</code> first. (If you finish the goal earlier than you think, you get an error.) Conversely, <code>}</code> fails if the subgoal is not complete. (If you fail to finish, you get an error.)</p>\n\n<p>The previous example can thus be written as follows, and will be more robust:</p>\n\n<pre><code>induction foo. (* this creates many subgoal *)\n{\n  proof of first subgoal.\n}\n{\n  proof of second subgoal.\n}</code></pre>\n\n<p>If you also want to make sure that an error occurs if the number of subgoals changes (for example if new constructors are added to the inductive type of <code>foo</code>), you can use an outer layer of braces:</p>\n\n<pre><code>{ induction foo. (* this creates many subgoal *)\n  {\n    proof of first subgoal.\n  }\n  {\n    proof of second subgoal.\n  }\n} (* would fail if a new subgoal appeared *)</code></pre>\n\n<h3 id=\"list-bullets\">List bullets</h3>\n\n<p>A bullet, for example <code>--</code>, also focuses on the next subgoal. The difference is that when the subgoal is finished, you do not have a closing construction, you must use the same bullet to move to the next subgoal. (Again, this fails if the first proof step changes to prove too much or too little.) With bullets you would write</p>\n\n<pre><code>induction foo. (* this creates many subgoal *)\n+ proof of first subgoal.\n+ proof of second subgoal.</code></pre>\n\n<p>Bullets can be nested, but you must use different bullets for the different nesting levels. For example, if this proof is only one subgoal of a larger proof, you can use:</p>\n\n<pre><code>- induction foo. (* this creates many subgoal *)\n  + proof of first subgoal.\n  + proof of second subgoal.\n- (* would fail if a new subgoal appeared *)\n  rest of the proof</code></pre>\n\n<p>The natural ordering of bullets, I think, is by increasing number of lines: <code>-</code>, <code>+</code> then <code>*</code> (and then multi-character bullets, I guess). You can also mix bullets with braces: the opening brace resets the bullet scope, any bullet can be used again with the subgoal.</p>\n\n<p>This gives a large space of freedom in how you want to use these features. You can use only braces, only bullets, braces and only one level of bullets, etc. My own style evolved with experience using the feature, and I will present the current status below.</p>\n\n<h2 id=\"my-current-bullet-style\">My current bullet style</h2>\n\n<p>When deciding how to use bullets, one distinguishes the commands that preserve the number of subgoals and those that may create new subgoals. I use some additional distinctions.</p>\n\n<p>Some tactics, for example <code>assert</code>, create a number of subgoals that is <em>statically</em> known, always the same for the tactic. I then use braces around each sub-proof, except the last one, which I think of as the &ldquo;rest&rdquo; of the current proof.</p>\n\n<pre><code>assert foo as H.\n{ proof of foo. }\nrest of the proof using H:foo.</code></pre>\n\n<p>(If the proof of <code>foo</code> takes several lines, I two-indent them, with the braces alone on their lines.)</p>\n\n<p>Most tactics create a <em>dynamic</em> number of subgoals, that depends on the specifics of the objects being operated on; this is the case of <code>case</code>, <code>destruct</code>, <code>induction</code> for example. In this case, I open a brace before the tactic, and use a bullet for each subgoal.</p>\n\n<pre><code>{ induction foo; simpl; auto.\n- proof of first remaining subgoal.\n- proof of second remaining subgoal.\n  rest of the proof of the second subgoal.\n}</code></pre>\n\n<p>(Notice that the subgoal-creating step is vertically aligned with the proof steps: I use both braces and bullets, but take only one indentation level each time.)</p>\n\n<p>As an exception, I may omit the braces if we are at the toplevel of the proof (<code>Proof .. Qed</code> serve as braces).</p>\n\n<p>Note that omitting the braces here and using different bullets when you nest is also just fine. In my experience it gives proofs that are a bit more pleasant to read but also a bit more cumbersome to edit and move around.</p>\n\n<p>Finally, a not-uncommon mode of use of &ldquo;dynamic&rdquo; tactics in the sense above is to expect all the cases, except one, to be discharged by direct automation (for example they are all absurd except one). When it is my intent that all cases but one be discharged (and not a coincidence), I express it by not using braces (this command preserves the number of subgoals), but marking the remaining subgoal with a new bullet <em>without</em> increasing the indentation level.</p>\n\n<pre><code>{ induction foo.\n- first subgoal.\n- second subgoal.\n  case blah; discharge all sub-subgoals but one.\n+ remaining sub-subgoal of the second subgoal.\n  finish the sub-subgoal.\n- third subgoal.\n}</code></pre>\n\n<p>(This is the only time where I use several bullet levels.)</p>\n\n<p>If you are the kind of programmer that is passionate about indentation style, I should now have tricked you to use bullets to propose a different variant. Otherwise, please consider using bullets anyway, for example by following the style above, it will make your life easier in the face of changing developments.</p>")) ((? . 27) f post (u . "Does anyone still care about printed proceedings? (Grab some at NEU this week!)") (? . 27) 1731904015 (p+ #"/home/runner/work/website/website/blog/2016/06/13/does-anyone-still-care-about-printed-proceedings-grab-some-at-neu-this-week/index.html" . unix) (u . "/blog/2016/06/13/does-anyone-still-care-about-printed-proceedings-grab-some-at-neu-this-week/") (u . "2016-06-13T10:50:14") (? . 1) (? . 28) (c (u . "proceedings") c (u . "dawn of the digital era") c (u . "Author: Gabriel Scherer")) (u . "\n<p>Are you interested in printed conference Proceedings? We have a good stack of them left away at Northeastern University (Boston, MA) and it seems that nobody wants them!</p>") #t (u . "\n<p>Are you interested in printed conference Proceedings? We have a good stack of them left away at Northeastern University (Boston, MA) and it seems that nobody wants them!</p>\n<!-- more-->\n\n<p>If you are in the area and are interested, feel free to send me an email and come grab them. We have ASPLOS from XIII to XX, PLDI from 2005 to 2015 (but not 2014), and OOPSLA from 2002 to 2015. When I saw the stack, I grabbed the POPL ones from 2002 to 2015, but in fact I have no idea what to do with them and I&rsquo;m a bit skeptical they would be of use to me; if you know you would use them, I would be glad to let you have them.</p>\n\n<p>If you were to buy those proceedings at conference-subscription rates today, it would cost you a small fortune. Yet nobody seems to want them. An odd disconnect, that I found amusing and maybe worthy of a blog post.</p>\n\n<p>But don&rsquo;t get me wrong, the future of printed proceedings is not an important question. We should rather be asking ourselves: why are the products of the work of our communities not easily accessible in an Open Access long-term archive? Are you submitting your articles to arXiv, or another archive? Why not?</p>\n\n<p>Not caring about printed proceedings is perfectly fine; but please care about people outside institutions that want to access your work &mdash; for example, master student myself.</p>\n\n<hr />\n\n<p><em>Update (August 2017):</em> Gabriel returned to France and left the POPL proceedings  at his desk. The proceedings are sitting in the hallway at NEU, in case anyone  cares.</p>")) ((? . 29) f post (u . "Conversational Context and Concurrency") (? . 29) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/02/15/conversational-context-and-concurrency/index.html" . unix) (u . "/blog/2017/02/15/conversational-context-and-concurrency/") (u . "2017-02-15T01:21:55") (? . 62) (? . 30) (c (u . "HOPL") c (u . "Author: Tony Garnock-Jones")) (? . 5) #t (u . "<!-- more-->\n\n<p>When programs are written with concurrency in mind, the programmer reasons about the interactions between concurrent components or agents in the program. This includes exchange of information, as well as management of resources, handling of partial failure, collective decision-making and so on.</p>\n\n<p>These components might be objects, or threads, or processes, or actors, or some more nebulous and loosely-defined concept; a group of callbacks, perhaps. The programmer has the notion of an agent in their mind, which translates into some representation of that agent in the program.</p>\n\n<p>We think about the contexts (because there can be more than one) in which agents exist in two different ways. From each agent&rsquo;s perspective, the important thing to think about is the boundary between the agent and everything else in the system. But from the system perspective, we often think about <em>conversations</em> between agents, whether it&rsquo;s just two having an exchange, or a whole group collaborating on some task. Agents in a conversation play different roles, join and leave the group, and build shared conversational state.</p>\n\n<p>In this talk, I used the idea of these <em>conversational contexts</em> as a lens through which to view the development of various metaphors and mechanisms of communication and coordination. I presented four <em>computational models</em> for concurrent interaction:</p>\n\n<ul>\n <li>monitors, and shared memory concurrency generally</li>\n <li>the actor model</li>\n <li>channel-based communication</li>\n <li>tuplespaces</li></ul>\n\n<p>These aren&rsquo;t full programming languages, but there are many <em>programming models</em> that build upon them. In some cases, development of these ideas has progressed all the way up to <em>system models</em> including user interaction and so forth.</p>\n\n<p>The linked lecture notes include informal sketches of reduction semantics for each of the four models, plus a handful of small examples to give a feel for them.</p>\n\n<p>Lecture Notes:</p>\n\n<ul>\n <li><a href=\"https://github.com/nuprl/hopl-s2017/tree/master/conversational-context-and-concurrency/index.md\">https://github.com/nuprl/hopl-s2017/tree/master/conversational-context-and-concurrency/index.md</a></li></ul>\n\n<p>Discussion summary:</p>\n\n<ul>\n <li><a href=\"https://github.com/nuprl/hopl-s2017/blob/master/lecture_notes/2017-01-31.md\">https://github.com/nuprl/hopl-s2017/blob/master/lecture_notes/2017&ndash;01&ndash;31.md</a></li></ul>")) ((? . 10) f post (u . "Quotes and Stories from \"Turing 50\"") (? . 10) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/06/24/quotes-and-stories-from-turing-50/index.html" . unix) (u . "/blog/2017/06/24/quotes-and-stories-from-turing-50/") (u . "2017-06-24T20:00:52") (? . 8) (? . 9) (c (u . "dear diary") c (u . "Author: Ben Greenman")) (u . "\n<p>The ACM recently hosted <a href=\"https://www.acm.org/turing-award-50\">a celebration of 50 years of the A.M. Turing award</a>. These are some notes and thoughts from the event, including how Fred Brooks once rented a bus, Don Knuth&rsquo;s outrageous implementation of batch processing, and Judea Pearl&rsquo;s theory of homo sapiens.</p>") #t (u . "\n<p>The ACM recently hosted <a href=\"https://www.acm.org/turing-award-50\">a celebration of 50 years of the A.M. Turing award</a>. These are some notes and thoughts from the event, including how Fred Brooks once rented a bus, Don Knuth&rsquo;s outrageous implementation of batch processing, and Judea Pearl&rsquo;s theory of homo sapiens.</p>\n<!-- more-->\n\n<script>document.createElement('dialog');</script>\n\n<p><strong>Conventions / Disclaimers:</strong></p>\n\n<ul>\n <li>\n  <p>The blockquotes below are paraphrased, may be incorrect, and may be incorrectly attributed.  Make sure to watch the ACM&rsquo;s live stream before quoting anything here!!!</p></li>\n <li>\n  <p>Section-breaks are labeled as &ldquo;panel&rdquo;, &ldquo;talk&rdquo;, &ldquo;question&rdquo;, etc.</p></li>\n <li>\n  <p>This is intentionally &ldquo;bad writing&rdquo; in the Peter Lee sense (see below)  &mdash; primarily &ldquo;what I saw&rdquo;, very little about &ldquo;what I thought and felt&rdquo;.  A summary in my own words just wouldn&rsquo;t do justice to the panelists.</p></li>\n <li>\n  <p>The &ldquo;Augmented Reality&rdquo; session was my favorite.</p></li></ul>\n\n<h3 id=\"opening-remarks\">Opening Remarks</h3>\n\n<h4 id=\"alan-turing-is-with-us-today\"><em>Alan Turing is with us today</em></h4>\n\n<p>At the start of the event, the <a href=\"http://users.ecs.soton.ac.uk/wh/\">emcee</a> unveiled a bronze bust of Alan Turing. This statue was on display at center stage during the whole event.</p>\n\n<p>It&rsquo;s a good sculpture and it&rsquo;s good we remember Alan Turing, but I&rsquo;m sad  that the ACM would encourage this kind of idol-worship. Let&rsquo;s not forget Turing&rsquo;s excellent teachers and colleagues!</p>\n\n<h3 id=\"talk-impact-of-turing-recipients-work\">talk: Impact of Turing Recipients&rsquo; Work</h3>\n\n<h5 id=\"barbara-liskov\">Barbara Liskov</h5>\n\n<blockquote>\n <p><em>the first awards recognized achievements in the standard fields of theory, AI, and systems</em></p>\n <p><em>hostile environment around the first awards, trepidation about future awards</em></p>\n <p><em>with Unix, Ritchie and Thompson got the design right</em></p>\n <p><em>Niklaus Wirth: &ldquo;If I understood how important Pcode was, I would have spent more time designing it&rdquo;</em></p></blockquote>\n\n<h4 id=\"thoughts\">thoughts</h4>\n\n<p>What is &ldquo;systems&rdquo; &mdash; does that even have a definition? And Unix is definitely NOT an example of a &ldquo;right design&rdquo;; rather it&rsquo;s a  landmark of <a href=\"https://www.dreamsongs.com/WorseIsBetter.html\">worse is better</a> design.</p>\n\n<h3 id=\"panel-advances-in-deep-neural-networks\">panel: Advances in Deep Neural Networks</h3>\n\n<h4 id=\"stuart-russell\">Stuart Russell</h4>\n\n<blockquote>\n <p> <em>I work in all areas of AI except for deep learning</em></p></blockquote>\n\n<h4 id=\"judea-pearl\">Judea Pearl</h4>\n\n<blockquote>\n <p><em>I am a foreigner in this field &hellip; left because human beings are not good at handling information &hellip; people are very good with causal inference, not with statistical inference &hellip; deep learning is statistical</em></p>\n <p><em>there is a very old existence proof, homo sapiens took over the planet &hellip; I believe because they had an internal model of their environment &hellip; a drawing of a lion with wings is evidence of this model, you have  to have such a model before you can experiment with it and imagine &hellip; snakes have superb optics, result of a long  evolution process &hellip; very specific but they cannot build eyeglasses &hellip; humans have an internal model, can build a market based on promises  and build large communities based on promises</em></p>\n <p><em>I see four levels &hellip; second level is predicting events, if I do X then what? &hellip; third level is counterfactual, if I did things differently then how would the outcome change &hellip; very hard to advance between levels, are we working to help machine learning &lsquo;level up&rsquo;?</em></p>\n <p><em>data science is about the relation between data and reality &hellip; data alone is not data science</em></p></blockquote>\n\n<h5 id=\"michael-jordan\">Michael Jordan</h5>\n\n<blockquote>\n <p><em>today we can&rsquo;t think without holding a piece of metal</em></p>\n <p><em>machine learning is part of computer science rather than AI &hellip; AI is about how to make human &hellip; machine learning is about allocating resources &hellip; matrices are not all of human intelligence &hellip; neural nets are part of a wider toolbox &hellip; too much hype in NLP its just syntax</em></p>\n <p><em>huge gap between syntax and semantics &hellip; chat bots are just syntax, don&rsquo;t learn &hellip; faking intelligence with neural nets, so well that you can build a company &hellip;</em></p>\n <p><em>real metric is task completion</em></p>\n <p><em>if I say &lsquo;a GLEEB walked across the airport&rsquo; then true intelligence can make a lot of educated guesses about a &lsquo;GLEEB&rsquo; without any other context</em></p></blockquote>\n\n<h5 id=\"fei-fei-li\">Fei-Fei Li</h5>\n\n<blockquote>\n <p><em>I disagree, ML is part of AI &hellip; understanding intelligence and making intelligent methods for solving AI problems</em></p>\n <p><em>to quote Churchhill &lsquo;its not beginning of end, not end, not beginning of end, probably end of beginning&rsquo;</em></p>\n <p><em>todays AI powered by hardware and data</em></p>\n <p><em>AI cannot yet find our keys</em></p>\n <p><em>quote: &lsquo;todays AI is making a perfect chess move while the world is on fire&rsquo; &hellip; ignores context</em></p></blockquote>\n\n<h5 id=\"stuart-russell\">Stuart Russell</h5>\n\n<blockquote>\n <p><em>Turing &hellip; a program is a mathematical object &hellip; math community did not recognize this</em></p>\n <p><em>lots of grad student descent &hellip; tuning to get performance &hellip; deep learning is neglecting the problem of exponential data &hellip; deep learning is just circuits, circuits lack expressive power &hellip; a human can process data from CERN but a neural net cannot, need to know physics</em></p>\n <p><em>probabilistic programming, somewhat under the radar, maybe on the right track &hellip; 10-line program running/generating/updating a large network of possibilities &hellip; more composable and flexible</em></p></blockquote>\n\n<h5 id=\"ilya-sutskever\">Ilya Sutskever</h5>\n\n<blockquote>\n <p><em>why I like deep learning &hellip; philosophically satisfying &hellip; the hypothesis class is a circuit &hellip; powerful hypothesis class not too many parameters &hellip; can actually find circuits &hellip; &lsquo;violates all theory&rsquo; &hellip; really amazing &hellip; humans can see and hear pretty fast, even though our neurons are pretty slow, perhaps because we do a massively parallel process that doesn&rsquo;t take many steps &hellip; works well enough to be useful</em></p>\n <p><em>models e.g. for vision are very hard to understand &hellip; fight fire with fire &hellip; incomprehensible solution to incomprehensible problem</em></p></blockquote>\n\n<h5 id=\"raquel-urtasun\">Raquel Urtasun</h5>\n\n<blockquote>\n <p><em>the breakthrough in neural nets is not algorithms &hellip; it is tricks, hardware, and grad students</em></p>\n <p><em>with neural nets we forget about modeling, uncertainty, and prior knowledge &hellip; perception is a canonical example</em></p></blockquote>\n\n<h4 id=\"question-boundaries\">question: boundaries</h4>\n\n<h5 id=\"judea-pearl\">Judea Pearl:</h5>\n\n<blockquote>\n <p><em>glad to see people in deep learning understand its limitations &hellip; is there a clearer definition of the boundaries? Are you worried about bridging the levels factual/inferential/counterfactural?</em></p></blockquote>\n\n<h5 id=\"michael-jordan\">Michael Jordan</h5>\n\n<blockquote>\n <p><em>the big problem is decision making under uncertainty</em></p></blockquote>\n\n<h5 id=\"fei-fei-li\">Fei-Fei Li</h5>\n\n<blockquote>\n <p><em>cognition is a hard problem</em></p></blockquote>\n\n<h5 id=\"judea-pearl\">Judea Pearl</h5>\n\n<blockquote>\n <p><em>do you have a clear idea of the boundaries?</em></p></blockquote>\n\n<h5 id=\"michael-jordan\">Michael Jordan</h5>\n\n<blockquote>\n <p><em>neural nets use back-propagation &hellip; its non-modular, sad fact &hellip; performance and explainability is the tradeoff &hellip; then again people are non-modular</em></p></blockquote>\n\n<h5 id=\"stuart-russell\">Stuart Russell</h5>\n\n<blockquote>\n <p><em>AlphaGo is not deep learning &hellip; basically an improved version of the machines Arthur Samuel made in the late 1950s &hellip; the interesting code is in C++ &hellip; rules of go, next moves, searching future states &hellip; depends on transitive closure</em></p></blockquote>\n\n<h5 id=\"judea-pearl\">Judea Pearl</h5>\n\n<blockquote>\n <p><em>can AlphaGo take advice from a human?</em></p></blockquote>\n\n<h5 id=\"michael-jordan\">Michael Jordan</h5>\n\n<blockquote>\n <p><em>not currently, but that would be a new policy to add to the toolbox &hellip; just as neural nets are one tool within AlphaGo</em></p></blockquote>\n\n<h5 id=\"raquel-urtasun\">Raquel Urtasun</h5>\n\n<blockquote>\n <p><em>no reason to ask if deep learning is going to solve all problems</em></p></blockquote>\n\n<h4 id=\"question-education\">question: education?</h4>\n\n<h5 id=\"judea-pearl\">Judea Pearl</h5>\n\n<blockquote>\n <p><em>indeed, what DO you teach in your neural networks classes?</em></p></blockquote>\n\n<h5 id=\"fei-fei-li\">Fei-Fei Li</h5>\n\n<blockquote>\n <p><em>&hellip; chain rule, Taylor expansion</em></p></blockquote>\n\n<h5 id=\"judea-pearl\">Judea Pearl</h5>\n\n<blockquote>\n <p><em>teaching is communicating truths &hellip; what is true about neural nets? what are some things that will definitely not happen?</em></p></blockquote>\n\n<h5 id=\"stuart-russell\">Stuart Russell</h5>\n\n<blockquote>\n <p><em>Peter Norvig and I have a problem with our AI book &hellip; chapter on vision, chapter on speech, will probably post just point to the neural nets chapter &hellip; we don&rsquo;t really understand! &hellip; really selling students short</em></p></blockquote>\n\n<h5 id=\"fei-fei-li\">Fei-Fei Li</h5>\n\n<blockquote>\n <p><em>in labs we talk about what we cannot do &hellip; we all have open problems</em></p>\n <p><em>Stuart I hope you have a very good author for the chapters. There are so many open problems to communicate to students!</em></p></blockquote>\n\n<h5 id=\"michael-jordan\">Michael Jordan</h5>\n\n<blockquote>\n <p><em>CS cirriculum needs more statistics, inferential thinking &hellip; revise the whole cirriculum bottom-up to weave this in</em></p></blockquote>\n\n<h4 id=\"question-could-a-neural-net-fix-my-phone-without-breaking-it\">question: could a neural net fix my phone without breaking it?</h4>\n\n<h5 id=\"judea-pearl\">Judea Pearl</h5>\n\n<blockquote>\n <p><em>right! big problem that neural nets have no internal model to manipulate</em></p></blockquote>\n\n<h4 id=\"question-generalizability\">question: generalizability?</h4>\n\n<h5 id=\"ilya-sutskever\">Ilya Sutskever</h5>\n\n<blockquote>\n <p><em>special-purpose vs. general purpose solution depends on the problem &hellip; most things we give special-purpose solutions &hellip; I guess if you wanted to automate a mathematician that would need to be general</em></p></blockquote>\n\n<h5 id=\"stuart-russell\">Stuart Russell</h5>\n\n<blockquote>\n <p><em>always argue with your self &hellip; try to break what you&rsquo;ve built &hellip; there&rsquo;s a system that plays video games just using the pixels on screen as hints &hellip; it&rsquo;s very good at mazes; if a newborn baby learned to play maze games in 2 hours that would be amazing! &hellip; does the system scale? absolutely not</em></p></blockquote>\n\n<h4 id=\"thoughts\">thoughts</h4>\n\n<p>When Michael Jordan said &ldquo;people are non-modular&rdquo;, I think he means that people are able  to break abstraction barriers when needed.</p>\n\n<h3 id=\"panel-restoring-personal-privacy-without-compromising-national-security\">panel: Restoring Personal Privacy without Compromising National Security</h3>\n\n<h5 id=\"joan-feigenbaum\">Joan Feigenbaum</h5>\n\n<blockquote>\n <p><em>&hellip; wikileaks &hellip; russian hackers &hellip; social emergency &hellip;</em></p></blockquote>\n\n<h5 id=\"whitfield-diffie\">Whitfield Diffie</h5>\n\n<blockquote>\n <p><em>everything I say today is copyleft</em></p>\n <p><em>its a misunderstanding to talk about a conflict between security and privacy &hellip; two aspects &hellip; problem goes back to feudalism &hellip; the right to build a castle was granted by the king &hellip; on one hand a castle improves national security &hellip; on the other hand a castle can be used to attack the king &hellip; technology is upsetting the basic notion of private vs. public security &hellip; governments cannot protect citizens and cannot protect themselves &hellip; extremely difficult to prove that a small process is secure</em></p>\n <p><em>exceptional access makes it more complex</em></p></blockquote>\n\n<h5 id=\"paul-syverson\">Paul Syverson</h5>\n\n<blockquote>\n <p><em>major concern are national security threats and ability of authorities to confound threats &hellip; analogy to printing press &hellip; proclimation of 1635 that only state messengers can carry letters &hellip; 1663 treatise by the national censor, no printing house can have a back door &hellip; the general topic is very old &hellip; title of this session isn&rsquo;t very good, the real dilemma is investigation vs privacy</em></p></blockquote>\n\n<h5 id=\"bryan-ford\">Bryan Ford</h5>\n\n<blockquote>\n <p><em>code is law for better or worse, tech is not a tool like a watch &hellip; tech can monitor us and decide when it works &hellip; tech is government, not obedient tools &hellip; the mind is a warrant-proof space &hellip; 5th amendment rights should extend to wearables</em></p></blockquote>\n\n<h5 id=\"nadia-heninger\">Nadia Heninger</h5>\n\n<blockquote>\n <p><em>cannot divorce the security/privacy issues from the current political context &hellip; the serious vulnerabilities are not in math &hellip; they are in users and implementors</em></p></blockquote>\n\n<h4 id=\"question-back-doors\">question: back doors</h4>\n\n<h5 id=\"joan-feigenbaum\">Joan Feigenbaum</h5>\n\n<blockquote>\n <p><em>perhaps we should explain what a back door is</em></p></blockquote>\n\n<h5 id=\"bryan-ford\">Bryan Ford</h5>\n\n<blockquote>\n <p><em>agency keeps a master key in escrow</em></p>\n <p><em>non-lawyers can and should take a stand on basic issues</em></p>\n <p><em>there are legitimate warrant-proof spaces &hellip; electronic extensions of the mind need to be recognized as warrant-proof spaces</em></p>\n <p><em>the set of authorities with backdoor access should change as I travel between countries &hellip; but this will lead to a global race to the bottom</em></p></blockquote>\n\n<h5 id=\"whitfield-diffie\">Whitfield Diffie</h5>\n\n<blockquote>\n <p><em>germany has a law against sex tourism (committed by German citizens visiting other countries) &hellip; neither government will be willing to lose backdoor access</em></p></blockquote>\n\n<h5 id=\"nadia-heninger\">Nadia Heninger</h5>\n\n<blockquote>\n <p><em>technical reasons against backdoors &hellip; (1) &lsquo;weak crypto&rsquo; was implemented, nobody turned it off, is now breakable by anyone in 2015 &hellip; (2) Juniper used non-default crypto parameters, someone (inside?) changed the parameters &hellip; (3) attackers exploit back doors</em></p></blockquote>\n\n<h5 id=\"paul-syverson\">Paul Syverson</h5>\n\n<blockquote>\n <p><em>quote &lsquo;you can put a man on the moon, surely you can put a man on the sun&rsquo;</em></p></blockquote>\n\n<h5 id=\"whitfield-diffie\">Whitfield Diffie</h5>\n\n<blockquote>\n <p><em>trouble is getting him back safely</em></p></blockquote>\n\n<h5 id=\"bryan-ford\">Bryan Ford</h5>\n\n<blockquote>\n <p><em>I think back doors are okay, but not for personal devices &hellip; need public lab and transparent processes, need separation of powers &hellip; prosecutors are getting cases thrown out because courts do not accept their backdoors &hellip; there is a place for transparent back door tools</em></p></blockquote>\n\n<h5 id=\"nadia-heninger\">Nadia Heninger</h5>\n\n<blockquote>\n <p><em>politicians are rarely technical people</em></p></blockquote>\n\n<h5 id=\"bryan-ford\">Bryan Ford</h5>\n\n<blockquote>\n <p><em>tech is not a set of policy-neutral tools, need to address gap of understanding</em></p></blockquote>\n\n<h4 id=\"question-\">question: ???</h4>\n\n<h5 id=\"whitfield-diffie\">Whitfield Diffie</h5>\n\n<blockquote>\n <p><em>we don&rsquo;t know how to build good crypto programs &hellip; opponents are debugging our programs with different goals &hellip; we&rsquo;re trying for-all-paths safety (universal) &hellip; they&rsquo;re trying exists-bad-path (existential)</em></p></blockquote>\n\n<h5 id=\"bryan-ford\">Bryan Ford</h5>\n\n<blockquote>\n <p><em>cybersecurity market is a lemon market</em></p></blockquote>\n\n<h4 id=\"question-how-to-advise\">question: how to advise</h4>\n\n<h5 id=\"joan-feigenbaum\">Joan Feigenbaum</h5>\n\n<blockquote>\n <p><em>question from audience &lsquo;I am an advisor to a company working with nuclear energy, they are terrified of being attacked, how should I advise them?&rsquo;</em></p></blockquote>\n\n<h5 id=\"whitfield-diffie\">Whitfield Diffie</h5>\n\n<blockquote>\n <p><em>a network like that is probably separated enough to be safe &hellip; the problem is being safe AND connected to the web</em></p></blockquote>\n\n<h5 id=\"bryan-ford\">Bryan Ford</h5>\n\n<blockquote>\n <p><em>because the internet of things</em></p></blockquote>\n\n<h4 id=\"question-what-should-the-acm-do\">question: what should the ACM do?</h4>\n\n<h5 id=\"nadia-heninger\">Nadia Heninger</h5>\n\n<blockquote>\n <p><em>maybe we need increased regulation, the ACM could help bring experts together</em></p></blockquote>\n\n<h4 id=\"question-what-is-true-security\">question: what is true security</h4>\n\n<h5 id=\"paul-syverson\">Paul Syverson</h5>\n\n<blockquote>\n <p><em>it&rsquo;s all the same thing &hellip; gets labeled differently &hellip; just trying to control which bits can go where and who gets to read them</em></p></blockquote>\n\n<h5 id=\"nadia-heninger\">Nadia Heninger</h5>\n\n<blockquote>\n <p><em>security is the absense of being violated</em></p></blockquote>\n\n<h5 id=\"paul-syverson-no-true--security-need-to-consider-context\">Paul Syverson: <em>no true &gt; security, need to consider context</em></h5>\n\n<h5 id=\"joan-feigenbaum\">Joan Feigenbaum</h5>\n\n<blockquote>\n <p><em>problem of our community, have strict standards, may be unrealistic &hellip; maybe a lot more tolerance in practice than our model accepts</em></p></blockquote>\n\n<h5 id=\"paul-syverson\">Paul Syverson</h5>\n\n<blockquote>\n <p><em>security and privacy are environmental problems</em></p></blockquote>\n\n<h4 id=\"question-can-we-stop-the-needle-in-haystack-search-for-vulnerabilities\">question: can we stop the needle-in-haystack search for vulnerabilities?</h4>\n\n<h5 id=\"paul-syverson\">Paul Syverson</h5>\n\n<blockquote>\n <p><em>need to build in security from the start</em></p></blockquote>\n\n<h5 id=\"bryan-ford\">Bryan Ford</h5>\n\n<blockquote>\n <p><em>need rule of law, transparency, separation of powers</em></p></blockquote>\n\n<h5 id=\"whitfield-diffie\">Whitfield Diffie</h5>\n\n<blockquote>\n <p><em>stop delaying, instead of spending $$$ on fixing problems, we should invest in solving the fundamental issues</em></p></blockquote>\n\n<h3 id=\"panel-preserving-our-past-for-the-future\">panel: Preserving our Past for the Future</h3>\n\n<p>Note: I was volunteering during this session; quotes are sparse</p>\n\n<h5 id=\"mahadev-satyanarayanan\">Mahadev Satyanarayanan</h5>\n\n<blockquote>\n <p><em>the running system is the total documentation &hellip; there are too many details for prose to capture</em></p></blockquote>\n\n<h5 id=\"\">??</h5>\n\n<blockquote>\n <p><em>running old code has a danger of running old bugs</em></p></blockquote>\n\n<h5 id=\"\">??:</h5>\n\n<blockquote>\n <p><em>what not to save? &hellip; it&rsquo;s very hard to tell in advance</em></p></blockquote>\n\n<h5 id=\"mahadev-satyanarayanan\">Mahadev Satyanarayanan:</h5>\n\n<blockquote>\n <p><em>there is no absolute censor in a world with caching</em></p></blockquote>\n\n<h5 id=\"brewster-kahle\">Brewster Kahle</h5>\n\n<blockquote>\n <p><em>asking UNESCO to solve the problem is unrealistic &hellip; need to empower the fanatics, given them tools to preserve data</em></p></blockquote>\n\n<h4 id=\"thoughts\">thoughts</h4>\n\n<p>I totally agree with the &ldquo;empower the fanatics&rdquo; sentiment. Today, because of &ldquo;volunteer librarians&rdquo;, I think we&rsquo;re doing pretty well about preserving  the past. Suppose I found an old PowerPoint file. I&rsquo;m sure I could find a way to read it with help from the internet &mdash; either  by searching Google, pirating an old version of PowerPoint, or asking online forums. So personally I&rsquo;m not worried about losing data we have currently; I&rsquo;m more  worried about the future, the internet becoming &ldquo;less chaotic&rdquo;.</p>\n\n<p>The panel raised a good question about how to preserve research and encourage reproducibility. A <code>.pdf</code> or <code>.tex</code> document is not enough; a virtual machine is okay. Really I think we need a stronger cultural emphasis on literate programming  and a mature library like TeX to help authors store and share their work. <a href=\"https://thegamma.net/\">The Gamma</a> seems on the right track.</p>\n\n<p>I was surprised that the panel did not discuss search, version control, and  the ACM&rsquo;s open-access policy.</p>\n\n<h3 id=\"panel-moores-law-is-really-dead-whats-next\">panel: Moore&rsquo;s Law is Really Dead: What&rsquo;s Next?</h3>\n\n<p>Note: I was volunteering during this session</p>\n\n<h5 id=\"butler-lampson\">Butler Lampson</h5>\n\n<blockquote>\n <p><em>there&rsquo;s plenty of room at the top &hellip; with Moore&rsquo;s Law we got improvements at the bottom of the software stack, everything above got to benefit and it was easy to integrate the changes &hellip; there&rsquo;s lots of opportunities to trim fat in the middle/top of the software stack &hellip; these improvements will be harder to integrate, but there&rsquo;s lots of opportunities</em></p></blockquote>\n\n<h5 id=\"margaret-martonosi\">Margaret Martonosi</h5>\n\n<blockquote>\n <p><em>By the way, don&rsquo;t believe the brochure that says I&rsquo;m at Google. My affiliation is Princeton, Google and I are just friends.</em></p></blockquote>\n\n<h5 id=\"butler-lampson\">Butler Lampson</h5>\n\n<blockquote>\n <p><em>important to distinguish approximate vs. precise software &hellip; precise software has a specification and the customer cares about that specification &hellip; approximate software doesn&rsquo;t have a hard spec, just needs to approximately work &hellip; the web is approximate, it doesn&rsquo;t work and it doesn&rsquo;t need to! &hellip; windows is precise, definitely has a spec and users definitely care</em></p></blockquote>\n\n<h4 id=\"thoughts\">thoughts</h4>\n\n<p>The recording of this panel should be good; it was very lively, very practical. And the first audience question (by <a href=\"https://people.eecs.berkeley.edu/~pattrsn/\">David Patterson</a>) was &ldquo;an A+ question&rdquo;.</p>\n\n<p>The panel reminded me of a talk by <a href=\"http://users.ece.utexas.edu/~patt/\">Yale Patt</a>  about &ldquo;the end&rdquo; of the Von Neumann architecture. His opinion is future computers will be Von Neumann machines that rely  on &ldquo;accelerators&rdquo; like a GPU &mdash; computer organization is not going to change,  but will expand to have a bigger toolbox. So sure, Moore&rsquo;s Law is dead, but there are many opportunities to make  computers faster at places other than the bottom of the software stack.</p>\n\n<h3 id=\"panel-challenges-in-ethics-and-computing\">panel: Challenges in Ethics and Computing</h3>\n\n<p>Note: I was volunteering during this session</p>\n\n<h5 id=\"raj-reddy\">Raj Reddy</h5>\n\n<blockquote>\n <p><em>there are more slaves in the world currently than there were in the US during the civil war &hellip; here is one way technology could help, by giving everone a device to record their location &hellip; if someone&rsquo;s time and location is constant, they may be held against their will</em></p></blockquote>\n\n<h5 id=\"\">??</h5>\n\n<blockquote>\n <p><em>do you believe every problem has a technological solution?</em></p></blockquote>\n\n<h5 id=\"noel-sharkey\">Noel Sharkey</h5>\n\n<blockquote>\n <p><em>yes the training set may be biased against people similar to me, but I want you to consider my case as an individual</em></p></blockquote>\n\n<h5 id=\"\">??</h5>\n\n<blockquote>\n <p><em>a very nice Washington Post article</em></p></blockquote>\n\n<h5 id=\"\">??</h5>\n\n<blockquote>\n <p><em>whether to encrypt the back hall</em></p></blockquote>\n\n<h5 id=\"raj-reddy\">Raj Reddy</h5>\n\n<blockquote>\n <p><em>we can sit here and wring our hands, but nothing will come of it unless it is written in the US constitution</em></p></blockquote>\n\n<h4 id=\"thoughts\">thoughts</h4>\n\n<p>I did not enjoy this panel. This is an ACM event, not a United Nations event. An ACM-sponsored panel about social and political problems should  look for constructive ways that computer science can address these problems. Raj Reddy tried to give constructive solutions, but the panel seemed more  interested in complaining about how hopeless things are.</p>\n\n<p>The comment by Noel Sharkey about &ldquo;consider me as an individual&rdquo; was something  I hadn&rsquo;t thought about. Instead of worrying about biased datasets, let&rsquo;s use technology to  collect data on an individual instead of abstracting a person by their  race, age, or neighborhood.</p>\n\n<h3 id=\"talk-computer-science-as-a-major-body-of-accumulated-knowledge\">talk: Computer Science as a Major Body of Accumulated Knowledge</h3>\n\n<h5 id=\"donald-knuth\">Donald Knuth</h5>\n\n<blockquote>\n <p> <em>don&rsquo;t applaud me, just read my books</em></p>\n <p><em>at the time, computer science was AI, numerical analysis, and programming languages</em></p>\n <p><em>a colleague said &lsquo;I will believe that computer science is a science when it has 1000 deep theorems&rsquo; &hellip; I am not sure what a deep theorem is but I think its different from what&rsquo;s proven by deep learning</em></p>\n <p><em>great privilege that we can invent the problems we work on &hellip; imagination &hellip; physicists can only guess the size of the sun</em></p>\n <p><em>I&rsquo;ve always believed computer science and math are two parallel subjects &hellip; sometimes you hear people wondering if one subsumes the other</em></p>\n <p><em>when I won the Turing Award, the prize money was about $1,000,000 less than it is today &hellip; I did get a nice Tiffany bowl that my wife and I use to serve strawberries &hellip; strawberries actually taste better &hellip;</em></p>\n <p><em>very fortunate in this field &hellip; I&rsquo;m completely worthless as an economic advisor &hellip; it&rsquo;s a game I&rsquo;ve been able to take advantage of</em></p></blockquote>\n\n<h4 id=\"question-how-could-you-offer-to-pay-for-tex-bug-reports\">question: how could you offer to pay for TeX bug reports?</h4>\n\n<h5 id=\"donald-knuth\">Donald Knuth</h5>\n\n<blockquote>\n <p><em>well there were many, many bugs &hellip; I stopped doubling at 32768 &hellip; brought people out of nowhere &hellip; next time I check the bug reports will be 2021 &hellip; someone is queueing the bugs reports &hellip; I believe strongly in batch rather than swap-in/swap-out &hellip; last time I checked reports was 2014 so 2021 will be next</em></p>\n <p><em>TeX was a literate program, and it helped that I wrote &lsquo;The Errors of TeX&rsquo; about the first N bugs</em></p></blockquote>\n\n<h4 id=\"question-do-you-think-computers-will-become-good-composers-of-music-do-you-see-a-role-for-computer-assisted-proving\">question: do you think computers will become good composers of music? do you see a role for computer-assisted proving?</h4>\n\n<h5 id=\"donald-knuth\">Donald Knuth</h5>\n\n<blockquote>\n <p><em>Yes in part, assisted is the key word &hellip; I have a program running now that I hope will help me prove a theorem</em></p></blockquote>\n\n<h4 id=\"question-favorite-algorithm\">question: favorite algorithm?</h4>\n\n<h5 id=\"donald-knuth\">Donald Knuth</h5>\n\n<blockquote>\n <p><em>Tarjan&rsquo;s strong components &hellip; short deep useful</em></p></blockquote>\n\n<h4 id=\"question-thoughts-on-ai-computers-taking-over\">question: thoughts on AI, computers taking over?</h4>\n\n<h5 id=\"donald-knuth\">Donald Knuth</h5>\n\n<blockquote>\n <p><em>I get scared when I see Stuart Russell making assumptions based on people acting rationally &hellip; then you look at election results</em></p></blockquote>\n\n<h4 id=\"question-if-you-could-start-over-and-do-things-differently-what-would-you-change\">question: if you could start over and do things differently, what would you change?</h4>\n\n<h5 id=\"donald-knuth\">Donald Knuth</h5>\n\n<blockquote>\n <p><em>I would use decimal internally in TeX instead of binary</em></p></blockquote>\n\n<h4 id=\"question-how-to-record-history\">question: how to record history?</h4>\n\n<h5 id=\"donald-knuth\">Donald Knuth</h5>\n\n<blockquote>\n <p><em>a video &lsquo;Lets not dumb down the history of CS&rsquo; &hellip; used to be history of algorithms &hellip; trouble with funding &hellip; the history is nothing that a non-CS person could not understand &hellip; the whole field of history changed from internal to external &hellip; historians need to be external to get published in journals &hellip; no CS department supports a historian &hellip; recently read a dissertation about the ALGOL 60 copmiler &hellip; very careful, describes data structures and organization &hellip; this kind of thing is what deserves to be called history</em></p></blockquote>\n\n<h4 id=\"question-teachers\">question: teachers</h4>\n\n<h5 id=\"donald-knuth\">Donald Knuth</h5>\n\n<blockquote>\n <p><em>hardest thing for me is choosing between two hypotheses (1) could teach this to anyone (2) only 2% of the world is geeks &hellip; suppose the second is true then you can&rsquo;t talk about how to teach if the teacher is not in the 2% &hellip;</em></p>\n <p><em>the newest issue of CACM has a fun typo, &lsquo;deep earning&rsquo;</em></p></blockquote>\n\n<h3 id=\"panel-quantum-computing-far-away-around-the-corner-or-maybe-both-at-the-same-time\">panel: Quantum Computing: Far Away? Around the Corner? Or Maybe Both at the Same Time?</h3>\n\n<h5 id=\"john-martinis\">John Martinis</h5>\n\n<blockquote>\n <p><em>goal to have a 45&ndash;50 qbit machine &hellip; 1 error per 1000 operations &hellip; to test, run sample algorithm, chart output vs. a classical supercomputer &hellip; got to be a supercomputer to finish the computation in time</em></p></blockquote>\n\n<h5 id=\"andrew-yao\">Andrew Yao</h5>\n\n<blockquote>\n <p><em>I&rsquo;m a believer &hellip; one suggested benchmark is to factor 1000-digit numbers &hellip; impossible to attain &hellip; need to expore new possibilities, take physics attitute</em></p>\n <p><em>CS did well attracting attention to quantum &hellip; science should be more open &hellip; share results between physics chemistry CS &hellip; don&rsquo;t just stick to your specialized conferences</em></p>\n <p><em>CS departments reception to quantum is less than satisfactory &hellip; 15 years ago, maybe 4 or 5 universities &hellip; now, maybe 7 or 8 .. China doing much better in this regard</em></p></blockquote>\n\n<h5 id=\"jay-gambetta\">Jay Gambetta</h5>\n\n<blockquote>\n <p><em>not useful to make analogy to anything classical &hellip; universal fault tolerance? or computation in the presence of error &hellip; either would be excellent, still a long way off</em></p>\n <p><em>IBM put quantum on the cloud &hellip; picked an instruction set that tries to abstract away &hellip; have been 19 published papers on the behavior of this quantum hardware</em></p></blockquote>\n\n<h5 id=\"dorit-aharonov\">Dorit Aharonov</h5>\n\n<blockquote>\n <p><em>two paths &hellip; finding algorithms, besides Shor&rsquo;s algorithm &hellip; make quantum computer to realize the algorithms &hellip; finding algorithms is very difficult &hellip; information-processing point-of-view</em></p>\n <p><em>error correction still small scale &hellip; can we use entanglement between probes to improve accuracy?</em></p></blockquote>\n\n<h5 id=\"umesh-vazirani\">Umesh Vazirani</h5>\n\n<blockquote>\n <p>_different goals &hellip; maybe you want perfect Qbits for a perfect Hilbert space &hellip; reality is a noisy space &hellip; short run, how to compute with noise &hellip; how to correct errors &hellip;</p></blockquote>\n\n<h5 id=\"jay-gambetta\">Jay Gambetta:</h5>\n\n<blockquote>\n <p>_those 2 paths are the same to me &hellip; we want larger devices with fidelity</p>\n <p><em>lets build hardware see where goes &hellip; exciting prospect, computer scientists will explore what they can do with these erroneous qbits &hellip; that&rsquo;s why IBM has the instruction set open to the community</em></p></blockquote>\n\n<h4 id=\"question-why-isnt-adding-10-qbits-only-10x-harder\">question: why isn&rsquo;t adding 10 qbits only 10x harder?</h4>\n\n<h5 id=\"john-martinis\">John Martinis:</h5>\n\n<blockquote>\n <p><em>building infrastructure to scale &hellip; not just grad student code &hellip; we&rsquo;re all good coders using standard industry practices for coding</em></p></blockquote>\n\n<h5 id=\"jay-gambetta\">Jay Gambetta</h5>\n\n<blockquote>\n <p><em>fidelity is hard to achieve</em></p></blockquote>\n\n<h4 id=\"question-both-ibm-and-google-use-superconducting-storage\">question: both IBM and Google use superconducting storage?</h4>\n\n<h5 id=\"john-martinis\">John Martinis</h5>\n\n<blockquote>\n <p><em>superconducting scales &hellip; ion traps harder to scale, but we still watch, keep eye on data</em></p></blockquote>\n\n<h4 id=\"question-education\">question: education</h4>\n\n<h5 id=\"john-martinis\">John Martinis</h5>\n\n<blockquote>\n <p><em>I like talking to engineering colleges &hellip; physics and engineering need to work together</em></p></blockquote>\n\n<h4 id=\"question-is-quantum-going-to-change-programing-languages\">question: is quantum going to change programing languages?</h4>\n\n<h5 id=\"jay-gambetta\">Jay Gambetta</h5>\n\n<blockquote>\n <p><em>yes very different to handle errors &hellip; current challenge is building an abstraction over the superconducting hardware</em></p></blockquote>\n\n<h5 id=\"john-martinis\">John Martinis</h5>\n\n<blockquote>\n <p><em>hoping to first expose hardware, then get a model, eventually a language</em></p></blockquote>\n\n<h5 id=\"dorit-aharonov\">Dorit Aharonov</h5>\n\n<blockquote>\n <p><em>need to start with more algorithms</em></p></blockquote>\n\n<h4 id=\"question-what-would-feynman-do\">question: what would Feynman do?</h4>\n\n<h5 id=\"john-martinis\">John Martinis</h5>\n\n<blockquote>\n <p><em>experiments!</em></p></blockquote>\n\n<h5 id=\"dorit-aharonov\">Dorit Aharonov</h5>\n\n<blockquote>\n <p><em>yes he&rsquo;d tell us to keep playing, and play with us</em></p></blockquote>\n\n<h3 id=\"panel-augmented-reality-from-gaming-to-cognitive-aids-and-beyond\">panel: Augmented Reality: From Gaming to Cognitive Aids and Beyond</h3>\n\n<p>Peter Lee starts off wearing a headset.</p>\n\n<h5 id=\"ivan-sutherland\">Ivan Sutherland:</h5>\n\n<blockquote>\n <p><em>I can tell you how VR started. Bell Helicopter company wanted to land at night &hellip; put an infrared camera on the landing site and a display in the cockpit &hellip; to test they used the roof of their building &hellip; one day an observer in a Bell office is watching, though the camera, two men playing catch on the roof &hellip; one player threw the ball at the camera and the observer ducked &hellip; he had identified his position with the camera &hellip; my observation was that you didn&rsquo;t need a camera, could substitute a computer &hellip; the rest is history</em></p></blockquote>\n\n<h5 id=\"yvonne-rogers\">Yvonne Rogers</h5>\n\n<blockquote>\n <p><em>my goal is to augment people &hellip; <a href=\"https://en.wikipedia.org/wiki/The_Mother_of_All_Demos\">Englebart</a> very inspiring &hellip; ok 2 stories &hellip; (1) a student of mine wanted to help picky eaters &hellip; computer vision for when they tried to hide peas under the plate &hellip; projected colors onto the peas, called them &lsquo;disco peas&rsquo;, kids were distracted enough to get over their aversion &hellip; children and parents got involved, new social interaction &hellip; (2) opera makeup for schoolchildren, virtually getting into character &hellip; teenage boys in the classes got to try makeup for the first time &hellip; singers found it useful for rehearsals</em></p></blockquote>\n\n<h5 id=\"peter-lee\">Peter Lee</h5>\n\n<blockquote>\n <p><em>I feel socially awkward wearing this headset, but I have some of my slides here &hellip; making a wearable headset requires huge effort &hellip; research prototypes can be uncomfortable &hellip; a product needs to be perfect and its very hard to do perfect &hellip; one goal, give Lowe&rsquo;s VR to demo a virtual kitchen &hellip; Case Western anatomy class used virtual cadaver, great collective experience</em></p></blockquote>\n\n<h5 id=\"fred-brooks\">Fred Brooks</h5>\n\n<blockquote>\n <p><em>two stories &hellip; (1) Henry Fuchs 1998, working with breast surgeon, try augmented reality to improve the precision of biopsy probe insertion &hellip; 2 years to a working prototype, hard to track surgeon&rsquo;s eyes, display where probe is, where ultrasound is, provide low latency &hellip; one day trying on live patient, worked 100% perfect probe right on the mark, jubilation &hellip; then the doctor had to tell the patient &lsquo;yes it is really cancer&rsquo; &hellip; (2) a challenge, augmented reality EMT training &hellip; real teams, virtual patient, virtual surround &hellip; track real tools, 8 eyes, 8 images, team needs to interact</em></p></blockquote>\n\n<h4 id=\"question-what-are-current-uses-of-augmented-reality\">question: what are current uses of augmented reality?</h4>\n\n<h5 id=\"ivan-sutherland\">Ivan Sutherland</h5>\n\n<blockquote>\n <p><em>the pilot of a jumbo jet typically has 1 hour flight experience before he flies for the first time, but extensive training in a flight simulator</em></p></blockquote>\n\n<h5 id=\"fred-brooks\">Fred Brooks</h5>\n\n<blockquote>\n <p><em>the <strong>best</strong> AR</em></p></blockquote>\n\n<h5 id=\"ivan-sutherland\">Ivan Sutherland</h5>\n\n<blockquote>\n <p><em>once I was in a flight simulator with the chief pilot &hellip; and he turned to me and asked &lsquo;have you ever experienced a slow roll in a 747?&rsquo; &hellip; a slow roll is a twisting motion, a very benign maneuver, constant one-G pressure the plane doesn&rsquo;t know its upside down &hellip; &lsquo;here we go&rsquo; and suddenly the world inverted &hellip; I remarked that it was certainly impressive, but didn&rsquo;t you treat the simulator as a real experience, and never attempted anything you would not do in reality? &hellip; &lsquo;that is true, but I am the chief pilot&rsquo;</em></p></blockquote>\n\n<h5 id=\"peter-lee\">Peter Lee</h5>\n\n<blockquote>\n <p><em>construction, architecture</em></p></blockquote>\n\n<h5 id=\"fred-brooks\">Fred Brooks</h5>\n\n<blockquote>\n <p><em>where&rsquo;s the &lsquo;augmented&rsquo;?</em></p></blockquote>\n\n<h5 id=\"peter-lee\">Peter Lee</h5>\n\n<blockquote>\n <p><em>whether augmented or virtual</em></p></blockquote>\n\n<h5 id=\"fred-brooks\">Fred Brooks</h5>\n\n<blockquote>\n <p><em>yes we did my kitchen that way, made my wife sick when she tried it</em></p></blockquote>\n\n<h5 id=\"peter-lee\">Peter Lee</h5>\n\n<blockquote>\n <p><em>surgical</em></p></blockquote>\n\n<h5 id=\"fred-brooks\">Fred Brooks</h5>\n\n<blockquote>\n <p><em>still sounds virtual</em></p></blockquote>\n\n<h5 id=\"yvonne-rogers\">Yvonne Rogers</h5>\n\n<blockquote>\n <p><em>displays on a car, superimposed directions on the tarmac &hellip; one of the users took a vacation and had to use the old GPS technology &hellip; found it very difficult to go back</em></p></blockquote>\n\n<h4 id=\"question-ar-tools-for-developers\">question: AR tools for developers?</h4>\n\n<h5 id=\"blair-macintyre\">Blair MacIntyre</h5>\n\n<blockquote>\n <p><em>can developers write apps for the Microsoft <a href=\"https://www.microsoft.com/en-us/hololens\">Hololens</a>?</em></p></blockquote>\n\n<h5 id=\"peter-lee\">Peter Lee</h5>\n\n<blockquote>\n <p><em>we belive in experience, anything we can do to foster experiences is good</em></p></blockquote>\n\n<h5 id=\"fred-brooks\">Fred Brooks</h5>\n\n<blockquote>\n <p><em>faking things &hellip; subtle and important &hellip; I remember using a flight simulator, navigating the runway, and I turned my head to see if my wing was going to clip a plane &hellip; turned and there was nothing there &hellip; emotional shock to leave the simulation, I had been flying for 1 hour</em></p></blockquote>\n\n<h5 id=\"ivan-sutherland\">Ivan Sutherland</h5>\n\n<blockquote>\n <p><em>pilot training is an early adopter because the cost of real planes is so high, impossible to train for emergency situations</em></p>\n <p><em>the ultimate goal, you can sit in a virtual chair &hellip; and if the chair has handcuffs you cannot get up &hellip; a virtual bullet is lethal &hellip; probably impossible because bits don&rsquo;t weigh anything &hellip; you know Ben Franklin invented augmented reality, eyeglasses &hellip; the desire outweighs cost &hellip; I cannot see the audience here, maybe it would be good if I had a headset! but Peter took his off</em></p></blockquote>\n\n<h5 id=\"peter-lee\">Peter Lee</h5>\n\n<blockquote>\n <p><em>because of my slides I couldn&rsquo;t see the audience, but then without the headset I couldn&rsquo;t see them either</em></p></blockquote>\n\n<h4 id=\"question-any-challenges-to-suggest-to-the-audience\">question: any challenges to suggest to the audience?</h4>\n\n<h5 id=\"peter-lee\">Peter Lee</h5>\n\n<blockquote>\n <p><em>if we had holographic transport, we wouldn&rsquo;t need planes!</em></p></blockquote>\n\n<h5 id=\"yvonne-rogers\">Yvonne Rogers</h5>\n\n<blockquote>\n <p><em>maybe, but you need to give attendees a physical presence &hellip; smell, touch</em></p></blockquote>\n\n<h5 id=\"ivan-sutherland\">Ivan Sutherland</h5>\n\n<blockquote>\n <p><em>what makes us willing to work together? I had a collaboration with three people &hellip; all in different locations .. communicated with a phone &hellip; worked perfectly, because we had worked in the same location first and knew one another so well &hellip; how to get to that point, where a simulation could be a useful tool &hellip; another good observation by Fred Brooks, given a domain X ask how good does the simulation need to be for X &hellip; Licklider told me, you&rsquo;d need damn good fiction to land someone on the moon, the simulation would need to provide every detail &hellip; for flight simulation the user&rsquo;s imagination can fill some gaps, a pilot can recognize an aircraft carrier from a rougher picture</em></p></blockquote>\n\n<h5 id=\"fred-brooks\">Fred Brooks</h5>\n\n<blockquote>\n <p><em>at IBM I once hired buses to bring the Poughkeepsie secretaries to the main office &hellip; the secretaries at the two offices only knew one another from the phone &hellip; this one lunch did so much good &hellip; only $75 to rent a bus</em></p></blockquote>\n\n<h5 id=\"peter-lee\">Peter Lee</h5>\n\n<blockquote>\n <p><em>how important is it to shake hands, to bump into a table?</em></p></blockquote>\n\n<h5 id=\"yvonne-rogers\">Yvonne Rogers</h5>\n\n<blockquote>\n <p><em>for this conference, I think the live stream is getting a better experience because the cameras zoom in on us, the panelists &hellip; the audience in the back cannot see us, only a picture of us on the monitors</em></p></blockquote>\n\n<h5 id=\"peter-lee\">Peter Lee</h5>\n\n<blockquote>\n <p>_one excellent video game, starts in the dark, you hear a voice &hellip; turn around and there&rsquo;s a character sitting on a chair &hellip; if you rearrange your furniture he finds a new seat &hellip;</p></blockquote>\n\n<h5 id=\"yvonne-rogers\">Yvonne Rogers</h5>\n\n<blockquote>\n <p><em>games are a great example &hellip; Pokemon Go &hellip; Apple jusr released an app toolkit &hellip; need to get those in schools, in the hands of kids who can build with them</em></p></blockquote>\n\n<h4 id=\"question-ivan-about-your-ultimate-display-paper-what-has-since-surprised-or-frustrated-you\">question: Ivan, about your &lsquo;ultimate display&rsquo; paper, what has since surprised or frustrated you?</h4>\n\n<h5 id=\"ivan-sutherland\">Ivan Sutherland</h5>\n\n<blockquote>\n <p><em>I wasn&rsquo;t surprised because I never had any expectations &hellip; of course sticks are not real &hellip; no assumptions so no strong feelings</em></p></blockquote>\n\n<h4 id=\"question-people-already-distracted-by-cell-phones-how-to-manage-all-this-input\">question: people already distracted by cell phones, how to manage all this input?</h4>\n\n<h5 id=\"yvonne-rogers\">Yvonne Rogers</h5>\n\n<blockquote>\n <p><em>good question, how much data you can present to people &hellip; and then the problem with google glass, your companions don&rsquo;t know what you are looking at &hellip; at least with snapchat glasses, you can trust the device is simpler</em></p></blockquote>\n\n<h5 id=\"peter-lee\">Peter Lee</h5>\n\n<blockquote>\n <p><em>good writing defines reality, bad writing reports it &hellip; with the printing press, quickly went from 30,000 books to over 13,000,000 &hellip; novels evolved shortly after, a new form of expression</em></p></blockquote>\n\n<h4 id=\"question-peter-how-long-do-your-people-wear-the-hololens\">question: Peter, how long do your people wear the hololens?</h4>\n\n<h5 id=\"peter-lee\">Peter Lee</h5>\n\n<blockquote>\n <p><em>hard to say &hellip; but often longer than the battery lasts</em></p></blockquote>\n\n<h5 id=\"fred-brooks\">Fred Brooks</h5>\n\n<blockquote>\n <p><em>how long does it last?</em></p></blockquote>\n\n<h5 id=\"peter-lee\">Peter Lee</h5>\n\n<blockquote>\n <p><em>depends what you&rsquo;re doing, 3 hours</em></p></blockquote>\n\n<h5 id=\"fred-brooks\">Fred Brooks</h5>\n\n<blockquote>\n <p><em>that&rsquo;s encouraging, we had a 30-minute cutoff because participants had enough</em></p></blockquote>\n\n<h4 id=\"question-nausea\">question: nausea</h4>\n\n<h5 id=\"peter-lee\">Peter Lee</h5>\n\n<blockquote>\n <p><em>I get nauseous in our minecraft VR &hellip; but there&rsquo;s a pop-out feature where you keep playing, but the game world is in a TV set instead of around you &hellip; can pop back in when you&rsquo;re feeling better</em></p></blockquote>\n\n<h5 id=\"yvonne-rogers\">Yvonne Rogers</h5>\n\n<blockquote>\n <p><em>we&rsquo;ve seen about 20% of the population gets nauseous</em></p></blockquote>\n\n<h5 id=\"audience-member\">audience member</h5>\n\n<blockquote>\n <p><em>Dana Boyd conducted an experiment, found the nausea was worse for wemon</em></p></blockquote>\n\n<h5 id=\"yvonne-rogers\">Yvonne Rogers</h5>\n\n<blockquote>\n <p><em>oculus makes me feel sick, but the hololens has never given me trouble</em></p></blockquote>\n\n<h5 id=\"peter-lee\">Peter Lee</h5>\n\n<blockquote>\n <p><em>have models to predict head motion, to keep the VR world steadier</em></p></blockquote>\n\n<h5 id=\"blair-macintyre\">Blair MacIntyre</h5>\n\n<blockquote>\n <p><em>I remember reading papers that measured framerate &hellip; would be interesting to revisit</em></p></blockquote>\n\n<h5 id=\"fred-brooks\">Fred Brooks</h5>\n\n<blockquote>\n <p><em>framerate not important, its the latency that gets you &hellip; one colleague  of mine, we call her &lsquo;the canary&rsquo; because she&rsquo;s so sensitive, in fact &hellip;</em></p></blockquote>\n\n<h5 id=\"peter-lee\">Peter Lee</h5>\n\n<blockquote>\n <p><em>talking about nausea is part of the problem, people experience it more &hellip; every time I talk about it in public my co-workers tell me to stop!</em></p>\n <p><em>another cool application, there&rsquo;s a hololens app to give blind people a tour of the Redmond office &hellip; you say a building and it takes you there</em></p></blockquote>\n\n<h5 id=\"fred-brooks\">Fred Brooks</h5>\n\n<blockquote>\n <p><em>one challenge, the relative brightness of the real and virtual worlds</em></p></blockquote>\n\n<h4 id=\"question-any-last-remarks\">question: any last remarks</h4>\n\n<h5 id=\"ivan-sutherland\">Ivan Sutherland</h5>\n\n<blockquote>\n <p>_I hoped from the beginning that AR would be a teaching tool &hellip; I learned that <code>F = MA</code> not from a book but from a large flywheel in the school&rsquo;s basement &hellip; very substantial inertia &hellip; the greatest value for AR would be to show people things in a way that makes the underlying meaning clear &hellip; what color should the hydrogen atoms in a benzene ring be? the color will be fiction, but the quality of learning will depend on that fiction &hellip; challenge for content makers &hellip; what is the haptic experience of feeling bits?</p></blockquote>\n\n<h3 id=\"small-group-session\">Small Group Session</h3>\n\n<p>After the last panel, I got to attend a small group session with other students,  Dick Karp, and Don Knuth. It doesn&rsquo;t feel right to summarize or quote from the  session, but there&rsquo;s one thing I want to write about.</p>\n\n<p>During the group session, I said something that I now regret. There was a brief silence as the group changed subjects, and someone suggested that we do a round of introductions. I objected, <em>this will take so long</em>,  but in fact the introductions were a very good idea.</p>\n\n<p>Normally, I don&rsquo;t like introductions because they focus on names, backgrounds,  and credentials. I don&rsquo;t care about any of these when I&rsquo;m meeting someone! Rather, I prefer to just talk and by-the-way learn about the other person(s). There&rsquo;s an anaology to double-blind reviewing &mdash; the focus should be content  and not credentials.</p>\n\n<p>These introductions were successful for two reasons. First, they gave everyone in the room a turn to speak, and this seemed  to help people join the actual discussion sooner. That was strange to me. I always feel a little nervous the first time I speak up in front  of a group, but if I really feel like speaking then I can always get over this  little barrier. I guess it&rsquo;s not right to assume the nervousness is &ldquo;little&rdquo; for everyone. Second, the introductions format was &ldquo;say your name and a funny fact&rdquo;. This prompt by itself led to some nice conversation topics:</p>\n\n<ul>\n <li>Could a computer program decide whether a statement was funny or not funny?</li>\n <li>What kind of humor works in a classroom? In a textbook?</li>\n <li>Would this kind of introduction be acceptable in another era or culture,  for instance Victorian England?</li></ul>\n\n<p>&ldquo;Nice&rdquo; in the sense that everyone could contribute, which was a real challenge. Even the question &ldquo;does anyone have a favorite algorithm?&rdquo; didn&rsquo;t have much  success fostering discussion.</p>\n\n<p>Related: a useful greeting at the event was &ldquo;what SIG are you?&rdquo;. The answer was a good hint about what level of abstraction you two could best communicate at.</p>\n<!-- ### Misc.-->\n<!-- I noticed that some of the young people who served on panels and also gave-->\n<!-- long-and-not-very-insightful answers to questions were later on their laptops-->\n<!-- as other panels discussed things. I noticed some of the older people who-->\n<!-- served on panels falling asleep during other panels-->")) ((? . 31) f post (u . "Forgetful and Heedful contracts") (? . 31) 1731904015 (p+ #"/home/runner/work/website/website/blog/2019/04/07/forgetful-and-heedful-contracts/index.html" . unix) (u . "/blog/2019/04/07/forgetful-and-heedful-contracts/") (u . "2019-04-07T23:15:11") (? . 39) (? . 32) (c (u . "migratory typing") c (u . "higher-order contracts") c (u . "Author: Ben Greenman")) (u . "\n<p><em>Forgetful</em> and <em>heedful</em> are two methods for space-efficient contracts  developed by <a href=\"http://www.cs.pomona.edu/~michael/\">Michael Greenberg</a> in <a href=\"https://arxiv.org/abs/1410.2813\">2014</a>. These methods were born in the shadow of a third method, <em>eidetic</em>,  with stronger theoretic properties. Since then, however, the forgetful method has been re-invented at least twice. Both deserve a second look.</p>") #t (u . "\n<p><em>Forgetful</em> and <em>heedful</em> are two methods for space-efficient contracts  developed by <a href=\"http://www.cs.pomona.edu/~michael/\">Michael Greenberg</a> in <a href=\"https://arxiv.org/abs/1410.2813\">2014</a>. These methods were born in the shadow of a third method, <em>eidetic</em>,  with stronger theoretic properties. Since then, however, the forgetful method has been re-invented at least twice. Both deserve a second look.</p>\n<!-- more-->\n\n<hr />\n\n<p>Contracts are a tool for specifying and dynamically-enforcing the behavior  of a program. In a language with contracts, a programmer can annotate an API with  code that documents the intended use for other readers. When client code interacts with such an API, the annotations ensure that the  actual behavior matches the expected. If there is a mismatch, the contract annotations can report an issue  in terms of <a href=\"https://www2.ccs.neu.edu/racket/pubs/popl11-dfff.pdf\">three parties</a>:  the API code, the client code, and the contract between them.</p>\n\n<p>For example, a Racket module that exports a sorting function can use a contract  to describe the kind of input it expects. If a client module sends invalid input, the contract blames the client  module for the error, assuming that the contract is bug-free:</p>\n\n<pre><code>  #lang racket/base\n\n  (module sort racket\n    (provide\n      (contract-out\n        [quicksort\n          (-&gt; (vectorof point/c) void?)]))\n\n    (define point/c (vectorof integer?))\n\n    (define (quicksort points)\n      ....))\n\n  (module client racket\n    (require (submod \"..\" sort))\n    (quicksort '()))\n\n  (require 'client)</code></pre>\n\n<pre><code>quicksort: contract violation;\n expected a vector\n  given: '()\n  in: the 1st argument of\n      (-&gt; (vectorof (vectorof integer?)) void?)\n  contract from: \n      (file.rkt sort)\n  blaming: (file.rkt client)\n   (assuming the contract is correct)</code></pre>\n\n<p>That covers the basics. For an extended introduction to contracts, visit  <a href=\"https://docs.racket-lang.org/guide/contracts.html\">The Racket Guide</a>.</p>\n\n<p>The quicksort example and the related figures are from the paper  <a href=\"http://users.cs.northwestern.edu/~robby/pubs/papers/oopsla2018-fgsfs.pdf\"><em>Collapsible Contracts: Fixing a Pathology of Gradual Typing</em></a></p>\n\n<h3 id=\"classic-contracts-and-space-efficiency\">Classic contracts and &ldquo;Space Efficiency&rdquo;</h3>\n\n<p>The <code>(vectorof point/c)</code> contract used above describes a possibly-mutable  array whose elements match the <code>point/c</code> contract. Since the array can be mutated, this contract has implications for two parties:</p>\n\n<ol>\n <li>the client module must supply a good array, and</li>\n <li>the sorting module must not insert a bad element.</li></ol>\n\n<p>To enforce the second condition, the <code>vectorof</code> contract wraps incoming  vectors in a proxy that checks future writes. Suppose the client sends a vector with four points:</p>\n\n<pre><code>(quicksort (vector (vector 4 4)\n                   (vector 2 2)\n                   (vector 1 1)\n                   (vector 3 3)))</code></pre>\n\n<p>After applying the contract, the vector is wrapped in a proxy that checks  incoming writes and outgoing reads. The following picture illustrates the wrapper with a <strong>solid</strong> blue bar  for the <strong>write</strong> checks against the sort module and a <em>striped</em> blue bar  for the <em>read</em> checks against the client.</p>\n\n<p><img src=\"/img/vector-chaperone-0.png\" alt=\"A wrapped vector\" /></p>\n\n<p>In a straightforward implementation, these wrappers can stack up if multiple  contracts are applied to the same value. For our quicksort in particular, the elements of the vector are mutable  vectors and may accumulate wrappers as the vector is sorted &mdash;  because every <strong>write</strong> and <em>read</em> applies a contract to the element.</p>\n\n<p><img src=\"/img/vector-chaperone-1.png\" alt=\"Layers of element wrappers\" /></p>\n\n<p>On the bright side, these wrappers enforce the contracts and help the  programmer understand the source of the error if any contract is violated.</p>\n\n<p>Unfortunately, the wrappers also affect the performance of the program. There are prices to pay for:  (1) checking values against the contracts,  (2) allocating new wrappers,  (3) and &ldquo;indirecting&rdquo; future writes/reads through wrappers. These space and time costs can add up.</p>\n\n<blockquote>\n <p>&ldquo;on a randomly ordered vector of 1,000 points, a call to quicksort can wrap the inner vectors an average of 21 times&rdquo; &mdash; <a href=\"http://users.cs.northwestern.edu/~robby/pubs/papers/oopsla2018-fgsfs.pdf\"><em>Collapsible Contracts</em></a></p></blockquote>\n\n<p>To fix the problem, researchers have been exploring <em>space-efficient</em>  implementations of contracts that attach a bounded number of wrappers to any  value. Michael Greenberg is one of these researchers, and <em>eidetic</em>, <em>forgetful</em>,  and <em>heedful</em> are his names for three implementations.</p>\n\n<p>(Although the goal of this post is to promote <em>forgetful</em> and <em>heedful</em>,  we will review all three.)</p>\n\n<h3 id=\"eidetic-space-efficiency\">Eidetic space-efficiency</h3>\n\n<p>The eidetic method introduces a data structure to represent higher-order  contracts. The structure supports a <em>merge</em> operation;  when two contracts meet, they are merged in a way that avoids duplication. Eidetic contracts have the same behavior as normal &ldquo;wrapping&rdquo; contracts  and their size is bounded by the number (and height) of source-code  contracts in the program.</p>\n\n<p>An eidetic contract is an <code>N</code>-ary tree (for <code>N &gt; 0</code>):</p>\n\n<ul>\n <li>each node represents a higher-order contract combinator, such as <code>vectorof</code></li>\n <li>the <code>N</code> children of a node represent the different interactions that the  value supports</li>\n <li>each leaf is a list of non-higher-order, or <em>flat</em>, contracts</li></ul>\n\n<p>For example, the <code>(vectorof point/c)</code> source-code contract describes an  eidetic tree with 3 nodes and 4 singleton-list leaves. Section 3.1 of the <a href=\"http://users.cs.northwestern.edu/~robby/pubs/papers/oopsla2018-fgsfs.pdf\">Collapsible Contracts</a> paper has an illustration. Each tree node represents a <code>vectorof</code> contract;  these nodes have <code>N=2</code> children because vectors support reads and writes.</p>\n\n<p>A successful merge combines two trees of the same shape  by re-using half the nodes  and appending the leaf lists. Re-using nodes saves some space, and helps reduce the overhead of trees  relative to simple wrapping contracts. The main savings comes from filtering the leaf lists &mdash; if an  implementation comes with a <code>contract-stronger?</code> predicate that tests  whether one flat contract accepts fewer values than a second, then it  can remove leaf-list contracts that are preceded by stronger ones. Trees make this filtering possible.</p>\n\n<p>Suffice to say, eidetic is an ideal solution in theory but comes with  practical challenges. Are trees more expensive than wrappers in the common case? Can the leaf-lists in a tree share elements? Should <code>contract-stronger?</code> try to solve problems that lack polynomial-time  solutions?</p>\n\n<p>Thankfully, there are at least two &ldquo;compromise&rdquo; alternatives.</p>\n\n<h3 id=\"forgetful-space-efficiency\">Forgetful space-efficiency</h3>\n<!-- \"no operation relies on e being a T2, skipping the check doesn't risk soundness\" p.12-->\n<!-- \"In forgetful \\lambda_H, we offer a simple solution to space inefficient casts: just forget about them\" p.11-->\n<!-- \"Just the same, when accumulating casts on the stack, we throw away all but the last cast\" p.11-->\n<!-- \"forgetful ... skip[s] checks and change[s] blame labels\" p.3-->\n\n<blockquote>\n <p>&ldquo;Forgetful is an interesting middle ground: if contracts exist to make partial operations safe (and not abstraction or information hiding), forgetfulness may be a good strategy.&rdquo; &mdash; <a href=\"https://arxiv.org/abs/1410.2813\"><em>Space-Efficient Manifest Contracts</em></a></p><!-- Section 10, bottom of page 23--></blockquote>\n\n<p>The forgetful method is exceptionally simple. When applying a new contract to a value, first check whether it is  wrapped in a similar contract. If so, then replace the existing wrapper with one that combines:</p>\n\n<ol>\n <li>the client obligations from the old contract, and</li>\n <li>the server obligations from the new contract</li></ol>\n\n<p>If not, proceed as usual &mdash; by wrapping (an unwrapped value)  or raising an error. Every value receives at most <strong>one</strong> wrapper;  this wrapper changes as the value flows to different clients.</p>\n\n<p>Forgetful is safe in the sense that every piece of code can trust the  top-level shape of the values it receives. Suppose module <code>A</code> exports a function <code>f</code> with contract <code>(-&gt; T1 T2)</code> to  module <code>B</code>, and suppose module <code>B</code> shares this function with a few other  client modules using different contracts. As <code>f</code> flows to a new client, it keeps the <code>T1</code> domain check and gets a  replacement for the <code>T2</code> codomain check.</p>\n\n<ul>\n <li>Keeping <code>T1</code> ensures that the code inside the function  (defined by module <code>A</code>) receives input that matches its expectation.</li>\n <li>Replacing <code>T2</code> ensures that each new client receives output that it expects.</li></ul>\n\n<p>Unfortunately, replacing <code>T2</code> also means that clients of module <code>B</code> cannot  trust the <code>T2</code> contract. This contract is not checked, and so forgetful contracts <strong>miss</strong> some  errors that would be caught by standard contracts. For the same reason, a bug in module <code>B</code> may go undetected by its clients  &mdash; even if a later contract reports an issue, the contract system has  no memory that <code>B</code> was partly-responsible.</p>\n\n<p>Despite these changes in behavior, forgetful is a straightforward  method for saving space and time relative to classic contracts.</p>\n\n<h3 id=\"heedful-space-efficiency\">Heedful space-efficiency</h3>\n\n<p>A heedful contract is a set of classic higher-order contracts. When applying a new contract to a value, check whether the new contract  is in the set. If so, ignore the new contract. If not, add the new contract to the set &mdash; or raise an error. Every value gets at most one set-wrapper, and each member of a set-wrapper  represents a new constraint.</p>\n\n<p>To check a value against a set, for example when reading from a vector, check  each of the elements in any order. If an element raises an error, report it.* Alternatively, an implementation can check all the elements and report  all that disagree with the value.</p>\n\n<p>The heedful method is a compromise between forgetful and eidetic.</p>\n\n<ul>\n <li>\n  <p>Unlike forgetful, heedful uses a new data structure to represent contacts  and requires some kind of <code>contract-stronger?</code> predicate.  Heedful also remembers (some of) the history of a value and catches the  same errors as classic and eidetic contracts.</p></li>\n <li>\n  <p>Unlike eidetic, heedful uses a simpler data structure with  no need to keep duplicate flat contracts  depending on the order they are encountered.  Heedful cannot, however, uniquely identify the two parties involved in a  contract error.  In general, there are multiple contracts that a programmer  must inspect to find the source of a mismatch.</p></li></ul>\n\n<p>For details, see <a href=\"https://arxiv.org/abs/1410.2813\">the extended version</a>  of Michael&rsquo;s POPL 2015 paper. Don&rsquo;t bother searching <a href=\"http://www.cs.pomona.edu/~michael/papers/popl2015_space.pdf\">the conference version</a>  &mdash; aside from one remark  in Appendix B, heedful and forgetful are nowhere to be found.</p>\n\n<p><code>*</code> If an implementation promises to report one mismatch, instead of all  mismatches, then it does not need to keep the full set of contracts. Thanks to <a href=\"http://mballantyne.net/\">Michael Ballantyne</a> for explaining  this to me.</p>\n\n<h3 id=\"priorities-and-appearances\">Priorities and Appearances</h3>\n\n<p>The extended version of <em>Space-Efficient Manifest Contracts</em> introduces  the forgetful and heedful methods with extreme modesty. It&rsquo;s tempting to skip past them and focus on the eidetic method.</p>\n\n<blockquote>\n <p>&ldquo;Since eidetic and classic contracts behave the same, why bother with forgetful and heedful? First and foremost, the calculi offer insights into the semantics of contracts: the soundness of forgetful depends on a certain philosophy of contracts; heedful relates to threesomes without blame [<a href=\"https://dl.acm.org/citation.cfm?doid=1706299.1706342\">Siek and Wadler 2010</a>]. Second, we offer them as alternative points in the design space. Finally and perhaps cynically, they are strawmen&mdash;warm up exercises for eidetic.&rdquo; &mdash; <a href=\"https://arxiv.org/abs/1410.2813\"><em>Space-Efficient Manifest Contracts</em></a></p><!-- Section 1, bottom of page 2--></blockquote>\n\n<p>And yet, at least two other research papers rely on these &ldquo;strawmen&rdquo; &mdash; or  rather, the ideas behind the names.</p>\n\n<p><a href=\"https://dl.acm.org/citation.cfm?id=3110285\"><em>Gradual Typing with Union and Intersection Types</em></a>,  at ICFP 2017,  demonstrates one technique for adding two varieties of types to a gradual  language. The semantics in the paper is forgetful;  if a higher-order value crosses multiple type boundaries,  the intermediate server obligations disappear.</p>\n\n<blockquote>\n <p>&ldquo;if a lambda abstraction is preceded by multiple casts, then the rule erases all of them, except for the last one&rdquo; &mdash; <a href=\"https://dl.acm.org/citation.cfm?id=3110285\"><em>Gradual Typing with Union and Intersection Types</em></a></p><!-- page 21--></blockquote>\n\n<p>This forgetfulness was a deliberate choice. A classic semantics would satisfy the same type soundness theorem,  but the authors picked forgetful for its simplicity and performance  implications.</p>\n\n<blockquote>\n <p>&ldquo;removing these casts preserves the soundness of the evaluation while reducing the number of them&rdquo;</p>\n <p>&ldquo;while this choice makes the calculus simpler without hindering soundness, it yields a formalism unfit to finger culprits&rdquo; &mdash; <a href=\"https://dl.acm.org/citation.cfm?id=3110285\"><em>Gradual Typing with Union and Intersection Types</em></a></p><!-- p.27--><!-- page 21--></blockquote>\n<!-- The followup at POPL 2019 is not forgetful.-->\n<!-- It's similar to eager coercions ... keep all types around and error-->\n<!--  if there's a new type that doesn't match the old ones.-->\n<!-- Also, that paper chooses not to let functions have intersection types,-->\n<!--  which kind-of-avoids the questions ... but really the eagerness is key.-->\n\n<p><a href=\"https://dl.acm.org/citation.cfm?id=3009849\"><em>Big Types in Little Runtime</em></a>, at POPL 2017,  presents a gradual typing system that avoids the use of wrappers. Instead, their <em>transient</em> semantics rewrites typed code ahead of time  to mimic the checks that forgetful contracts would perform. These checks suffice for a shallow type soundness theorem.</p>\n\n<p>That paper also introduces a heedful-like strategy for improving the error  messages produced by a forgetful check. The strategy adds a global map to the semantics;  keys in the map are unique identifiers for values (heap addresses),  and values are sets of types. When a value meets a compatible type, the type is added to the value&rsquo;s set. When a mismatch occurs, the semantics <a href=\"https://www.ccs.neu.edu/home/types/resources/notes/transient-undefined-blame-extract.pdf\">tries to report</a>  every type in the set that relates to the mismatch.</p>\n\n<p>And so, forgetful and heedful were edged out of POPL 2015 but managed to sneak in  to POPL 2017. Since then, forgetful appeared in ICFP 2017 and, briefly, in  <a href=\"https://www2.ccs.neu.edu/racket/pubs/icfp18-gf.pdf\">ICFP 2018</a>. Where will we see them next?</p>")) ((? . 33) f post (u . "Turnstile Mailing List") (? . 33) 1731904015 (p+ #"/home/runner/work/website/website/blog/2018/11/30/turnstile-mailing-list/index.html" . unix) (u . "/blog/2018/11/30/turnstile-mailing-list/") (u . "2018-11-30T14:55:30") (? . 35) (? . 63) (c (u . "announcement") c (u . "turnstile") c (u . "Author: Stephen Chang")) (u . "\n<p><a href=\"https://docs.racket-lang.org/turnstile/The_Turnstile_Guide.html\">Turnstile</a> now has a mailing list: <a href=\"https://groups.google.com/forum/#!forum/turnstile-users\">https://groups.google.com/forum/#!forum/turnstile-users</a></p>") #t (u . "\n<p><a href=\"https://docs.racket-lang.org/turnstile/The_Turnstile_Guide.html\">Turnstile</a> now has a mailing list: <a href=\"https://groups.google.com/forum/#!forum/turnstile-users\">https://groups.google.com/forum/#!forum/turnstile-users</a></p>\n<!-- more-->\n\n<p>There is also a <code>#turnstile</code> channel on <a href=\"https://racket.slack.com\">the Racket Slack</a>.</p>")) ((? . 34) f post (u . "Defining Local Bindings in Turnstile Languages") (? . 34) 1731904015 (p+ #"/home/runner/work/website/website/blog/2018/10/22/defining-local-bindings-in-turnstile-languages/index.html" . unix) (u . "/blog/2018/10/22/defining-local-bindings-in-turnstile-languages/") (u . "2018-10-22T15:05:17") (? . 78) (? . 35) (c (u . "turnstile") c (u . "tutorial") c (u . "language") c (u . "dsl") c (u . "Author: Sam Caldwell")) (u . "\n<p>In <a href=\"http://racket-lang.org/\">Racket</a>, programmers can create powerful abstractions by bundling together a family of values, functions, and syntax extensions in the form of a new language. These languages, however, are typically untyped. <a href=\"http://docs.racket-lang.org/turnstile/The_Turnstile_Guide.html\">Turnstile</a> is a new Racket {library,language} for creating typed languages by integrating type checking with Racket&rsquo;s existing tools for describing languages. The technique is described by fellow PRL&rsquo;ers in the paper <a href=\"http://www.ccs.neu.edu/home/stchang/pubs/ckg-popl2017.pdf\"><em>Type Systems as Macros</em></a>.</p>\n\n<p>Racket encourages language developers to take full advantage of <a href=\"https://scholarship.rice.edu/handle/1911/17993\">linguistic reuse</a> by defining new language forms in terms of existing constructs. Unsurprisingly, language extensions often retain some of the Racket-y flavor from the underlying constructs. Implementors save time and energy while users of the language benefit from the familiarity they already have with the Racket ecosystem.</p>\n\n<p>Unfortunately, Turnstile does not lend itself to expressing one of Racket&rsquo;s most ubiquitous idioms: naming local bindings with <code>define</code>. Early experience reports from Turnstile, including my own, suggest that language implementors very much desire to include <code>define</code>-like binding forms in their languages.</p>\n\n<p>This blog post provides a brief overview of what Turnstile is and how it works, an introduction to defining typed language forms, and how to equip these languages with a <code>define</code> binding form.</p>") #t (u . "\n<p>In <a href=\"http://racket-lang.org/\">Racket</a>, programmers can create powerful abstractions by bundling together a family of values, functions, and syntax extensions in the form of a new language. These languages, however, are typically untyped. <a href=\"http://docs.racket-lang.org/turnstile/The_Turnstile_Guide.html\">Turnstile</a> is a new Racket {library,language} for creating typed languages by integrating type checking with Racket&rsquo;s existing tools for describing languages. The technique is described by fellow PRL&rsquo;ers in the paper <a href=\"http://www.ccs.neu.edu/home/stchang/pubs/ckg-popl2017.pdf\"><em>Type Systems as Macros</em></a>.</p>\n\n<p>Racket encourages language developers to take full advantage of <a href=\"https://scholarship.rice.edu/handle/1911/17993\">linguistic reuse</a> by defining new language forms in terms of existing constructs. Unsurprisingly, language extensions often retain some of the Racket-y flavor from the underlying constructs. Implementors save time and energy while users of the language benefit from the familiarity they already have with the Racket ecosystem.</p>\n\n<p>Unfortunately, Turnstile does not lend itself to expressing one of Racket&rsquo;s most ubiquitous idioms: naming local bindings with <code>define</code>. Early experience reports from Turnstile, including my own, suggest that language implementors very much desire to include <code>define</code>-like binding forms in their languages.</p>\n\n<p>This blog post provides a brief overview of what Turnstile is and how it works, an introduction to defining typed language forms, and how to equip these languages with a <code>define</code> binding form.</p>\n<!-- more-->\n\n<p>The code for this blog post can be found <a href=\"https://gist.github.com/howell/e2d4501e24db503e4cd9aa368172a502\">in this gist</a>. To run it, you will need the Turnstile package, which can be installed with <code>raco pkg install\nturnstile</code>.</p>\n\n<h2 id=\"turnstile-typechecking-intertwined-with-elaboration\">Turnstile: Typechecking Intertwined with Elaboration</h2>\n\n<p>Turnstile provides a convenient way of defining syntax transformations that also perform typechecking. Since processing the syntax of a form typically involves some amount of analysis, such as for error checking, it is a natural place to put the logic for typechecking. With forms defined as such, macro expanding a program determines both a type and an elaborated term in the target language.</p>\n\n<p>While macro expansion proceeds outside-in, type information typically flows up from the leaves of the AST during checking. To reconcile the two directions, Turnstile language forms invoke the macro expander on subexpressions when their types are needed for the current rule. This expansion yields both the elaboration of the term and its type, or fails with an error. Turnstile abstracts over the process of invoking the expander on subterms, allowing implementors to describe the language in terms of high-level type checking and elaboration specifications.</p>\n\n<h2 id=\"type--elaboration-rules\">Type &amp; Elaboration Rules</h2>\n\n<p>To get a feel for defining language forms in Turnstile, this section walks through the core of a simply-typed functional language.</p>\n\n<h3 id=\"functions\">Functions</h3>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"n\">define-type-constructor</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types-extra..rkt)._~e2~86~92))\" style=\"color: inherit\">→</a></span> <span class=\"kd\">#:arity</span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e~3d))\" style=\"color: inherit\">&gt;=</a></span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">define-typed-syntax</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">([</span><span class=\"n\">x:id</span> <span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/stxparse-patterns.html#(form._((lib._syntax/parse..rkt)._~7edatum))\" style=\"color: inherit\">~datum</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span><span class=\"p\">)</span> <span class=\"n\">τ_in:type</span><span class=\"p\">]</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span> <span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"n\">≫</span>\n  <span class=\"p\">[[</span><span class=\"n\">x</span> <span class=\"n\">≫</span> <span class=\"n\">x-</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span> <span class=\"n\">τ_in.norm</span><span class=\"p\">]</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span> <span class=\"n\">⊢</span> <span class=\"n\">e</span> <span class=\"n\">≫</span> <span class=\"n\">e-</span> <span class=\"n\">⇒</span> <span class=\"n\">τ_out</span><span class=\"p\">]</span>\n  <span class=\"n\">-------------------------------------------------</span>\n  <span class=\"p\">[</span><span class=\"n\">⊢</span> <span class=\"p\">(</span><span class=\"n\">#%plain-lambda-</span> <span class=\"p\">(</span><span class=\"n\">x-</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span> <span class=\"n\">e-</span><span class=\"p\">)</span> <span class=\"n\">⇒</span> <span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types-extra..rkt)._~e2~86~92))\" style=\"color: inherit\">→</a></span> <span class=\"n\">τ_in.norm</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span> <span class=\"n\">τ_out</span><span class=\"p\">)])</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Looking at this item by item, we see:</p>\n\n<ol>\n <li><code>define-type-constructor</code> creates a new type. Here, we say the <code>→</code> requires  at least one parameter.</li>\n <li><code>define-typed-syntax</code> is the primary way to define a language form in terms  of its syntactic shape, how it is type checked, the target language term it  expands to, and its type.</li>\n <li>The next part is a <a href=\"http://docs.racket-lang.org/syntax/stxparse-patterns.html\">syntax-pattern</a> describing the the shape of  the syntax this rule applies to. In this case, we&rsquo;re defining <code>λ</code> as a macro  that expects a parenthesized sequence of identifier-colon-type triples,  describing the formal arguments to the procedure, followed by the body <code>e</code>. The  <code>type</code> <a href=\"http://docs.racket-lang.org/syntax/stxparse-specifying.html\">syntax class</a> is provided by Turnstile, and describes the surface  syntax of types (such as those created with <code>define-type-constructor</code>);  internal operations over types use the expanded version of the type, which is  accessed via the <code>norm</code> attribute.</li>\n <li>The chevron <code>≫</code> on the first line signifies that there is only one case in  this type rule. Some rules, which we will see later, use multiple  cases to check different kinds of uses.</li>\n <li>The body of the rule is a sequence of premises, that usually check and  analyze the types of sub-expressions, followed by a dashed line, and  then the conclusion, describing the output syntax and its type.</li>\n <li>Here, the single premise describes how to check the body of the function. The  context, which associates variables with types, goes to the left of the  turnstile (<code>⊢</code>). For each formal <code>x</code>, this lets us know what type <code>x</code> has  when we find a reference to it in <code>e</code>. In this rule, we are saying &ldquo;while  checking the right-hand-side, assume <code>x</code>&mdash;which elaborates to  <code>x-</code>&mdash;has type <code>τ_in</code>, for each triple in the input syntax (signified by the  ellipses <code>...</code>)&rdquo;. More on the &ldquo;elaborates to <code>x-</code>&rdquo; below.</li>\n <li>To the right of the turnstile, we write the expression we are checking, <code>e</code>,  and patterns <code>e-</code> and <code>τ_out</code> matching the elaboration of <code>e</code> and its type,  respectively.</li>\n <li>After the dashes comes the conclusion, which begins with <code>⊢</code>. The next part  specifies the elaboration of the term. Here, the meaning of the typed <code>λ</code> is  given in terms of Racket&rsquo;s <a href=\"http://docs.racket-lang.org/reference/lambda.html?q=%23%25plain-lambda#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._~23~25plain-lambda%29%29\"><code>#%plain-lambda</code></a>. Turnstile uses the  convention of a <code>-</code> suffix for forms in the untyped/target language to avoid  conflicting names and confusion. Suffixed names are usually bound using  <code>postfix-in</code>, such as in <code>(require (postfix-in - racket/base))</code> to bind  <code>#%plain-lambda-</code>.</li>\n <li>Finally, we give the type of the term to the right of the <code>⇒</code>, referring to  pattern variables bound in the premises.</li></ol>\n\n<h4 id=\"renaming-typed-variables\">Renaming Typed Variables</h4>\n\n<p>Turnstile lets the Racket expander take care of the details of variable scope, shadowing, etc. To associate identifier <code>x</code> with type <code>τ</code>, Turnstile binds <code>x</code> to a macro that knows <code>τ</code> when it expands. References to <code>x</code> now become references to that macro, and expanding them provides access to <code>τ</code>. Concretely, the underlying Racket code implementing this behavior looks roughly like this:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">([</span><span class=\"n\">x-</span> <span class=\"p\">(</span><span class=\"n\">assign-type</span> <span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/reference/syntax-util.html#(def._((lib._racket/syntax..rkt)._generate-temporary))\" style=\"color: inherit\">generate-temporary</a></span> <span class=\"o\">#'</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">#'</span><span class=\"n\">τ</span><span class=\"p\">)])</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let-syntax))\" style=\"color: inherit\">let-syntax</a></span> <span class=\"p\">([</span><span class=\"n\">x</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/stxtrans.html#(def._((quote._~23~25kernel)._make-rename-transformer))\" style=\"color: inherit\">make-rename-transformer</a></span> <span class=\"n\">x-</span><span class=\"p\">)])</span>\n    <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Expanding_Top-Level_Forms.html#(def._((quote._~23~25kernel)._expand))\" style=\"color: inherit\">expand</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">check</span> <span class=\"n\">forms</span> <span class=\"n\">that</span> <span class=\"n\">may</span> <span class=\"n\">reference</span> <span class=\"n\">x</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The type <code>τ</code> is attached as <a href=\"http://docs.racket-lang.org/reference/stxprops.html\">metadata</a> for a new identifier <code>x-</code>, which is what <code>x</code> will transform to at any reference site. In order for this to work, <code>x-</code> must be distinct from <code>x</code>&mdash;hence the <code>generate-temporary</code>&mdash;to avoid an infinite expansion loop.</p>\n\n<h3 id=\"application\">Application</h3>\n\n<p>We can define a version of <code>#%app</code> that type checks function applications to  accompany our typed <code>λ</code>:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"n\">define-typed-syntax</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/application.html#(form._((lib._racket/private/base..rkt)._~23~25app))\" style=\"color: inherit\">#%app</a></span> <span class=\"n\">e_fn</span> <span class=\"n\">e_arg</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span> <span class=\"n\">≫</span>\n  <span class=\"p\">[</span><span class=\"n\">⊢</span> <span class=\"n\">e_fn</span> <span class=\"n\">≫</span> <span class=\"n\">e_fn-</span> <span class=\"n\">⇒</span> <span class=\"p\">(</span><span class=\"n\">~→</span> <span class=\"n\">τ_in</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span> <span class=\"n\">τ_out</span><span class=\"p\">)]</span>\n  <span class=\"kd\">#:fail-unless</span> <span class=\"p\">(</span><span class=\"n\">stx-length=?</span> <span class=\"o\">#'</span><span class=\"p\">[</span><span class=\"n\">τ_in</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">]</span> <span class=\"o\">#'</span><span class=\"p\">[</span><span class=\"n\">e_arg</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">])</span>\n                <span class=\"p\">(</span><span class=\"n\">num-args-fail-msg</span> <span class=\"o\">#'</span><span class=\"n\">e_fn</span> <span class=\"o\">#'</span><span class=\"p\">[</span><span class=\"n\">τ_in</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">]</span> <span class=\"o\">#'</span><span class=\"p\">[</span><span class=\"n\">e_arg</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">])</span>\n  <span class=\"p\">[</span><span class=\"n\">⊢</span> <span class=\"n\">e_arg</span> <span class=\"n\">≫</span> <span class=\"n\">e_arg-</span> <span class=\"n\">⇐</span> <span class=\"n\">τ_in</span><span class=\"p\">]</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span>\n  <span class=\"n\">--------</span>\n  <span class=\"p\">[</span><span class=\"n\">⊢</span> <span class=\"p\">(</span><span class=\"n\">#%plain-app-</span> <span class=\"n\">e_fn-</span> <span class=\"n\">e_arg-</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span> <span class=\"n\">⇒</span> <span class=\"n\">τ_out</span><span class=\"p\">])</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<ol>\n <li>The syntax pattern on the first line describes the shape of applications.</li>\n <li>On the second line, we pattern match the result of expanding and checking  <code>e_fn</code>, checking that it produces an arrow type. More specifically, when we defined the arrow  type <code>→</code> above, <code>define-type-constructor</code> also implicitly defined a <a href=\"http://docs.racket-lang.org/syntax/stxparse-patterns.html?q=pattern%20expander#%28part._.Pattern_.Expanders%29\">pattern  expander</a> <code>~→</code> (which uses the Racket <code>~</code> prefix convention for syntax patterns)  that matches instances of the type.</li>\n <li>The next clause checks that the number of provided arguments matches the  arity of the function as specified by its type.</li>\n <li>Line 5 checks that each argument expression has the required type. Turnstile  uses <a href=\"http://davidchristiansen.dk/tutorials/bidirectional.pdf\">bidirectional typechecking rules</a>, which either infer the type of a  term or checks that a term satisfies a given type. We write <code>⇐ τ_in</code> in the  premise to switch to checking mode.</li>\n <li>Finally, typed function application elaborates to Racket&rsquo;s function application,  <code>#%plain-app</code>, with the usual suffix, and produces type <code>τ_out</code> for the application</li></ol>\n\n<p>We can try out these new typed forms on a few examples:</p>\n\n<ul>\n <li><code>((λ ([x : Int]) (+ x 1)) 2)</code> successfully typechecks and yields <code>3</code>.</li>\n <li><code>((λ ([x : Int]) (+ x 1)))</code> raises an error based on the check on lines 3 and  4 in the rule: \"#%app: (λ ((x : Int)) (+ x 1)): wrong number of arguments: expected  1, given 0.\"</li>\n <li><code>((λ ([x : (→ Int Int)]) (x 1)) 2)</code> raises an error: \"#%app: type mismatch:  expected (→ Int Int), given Int\" as a consequence of using checking mode on  line 5 of the rule.</li></ul>\n\n<h2 id=\"extending-our-language-with-local-bindings\">Extending Our Language with Local Bindings</h2>\n\n<p>When writing functional programs, we often want to name various sub-computations. One way to do that is with a <code>let</code> construct, which Turnstile allows us to easily create:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"n\">define-typed-syntax</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">([</span><span class=\"n\">x:id</span> <span class=\"n\">e-x</span><span class=\"p\">]</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span> <span class=\"n\">e-body</span><span class=\"p\">)</span> <span class=\"n\">≫</span>\n  <span class=\"p\">[</span><span class=\"n\">⊢</span> <span class=\"n\">e-x</span> <span class=\"n\">≫</span> <span class=\"n\">e-x-</span> <span class=\"n\">⇒</span> <span class=\"n\">τ-x</span><span class=\"p\">]</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span>\n  <span class=\"p\">[[</span><span class=\"n\">x</span> <span class=\"n\">≫</span> <span class=\"n\">x-</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span> <span class=\"n\">τ-x</span><span class=\"p\">]</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span> <span class=\"n\">⊢</span> <span class=\"n\">e-body</span> <span class=\"n\">≫</span> <span class=\"n\">e-body-</span> <span class=\"n\">⇒</span> <span class=\"n\">τ-body</span><span class=\"p\">]</span>\n  <span class=\"n\">-------------------------------------</span>\n  <span class=\"p\">[</span><span class=\"n\">⊢</span> <span class=\"p\">(</span><span class=\"n\">let-</span> <span class=\"p\">([</span><span class=\"n\">x-</span> <span class=\"n\">e-x-</span><span class=\"p\">]</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span> <span class=\"n\">e-body-</span><span class=\"p\">)</span> <span class=\"n\">⇒</span> <span class=\"n\">τ-body</span><span class=\"p\">])</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Unsurprisingly, this looks very similar to the definition of <code>λ</code> above. Now we can write functions with named intermediate results:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">([</span><span class=\"n\">x</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span> <span class=\"n\">Int</span><span class=\"p\">])</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">([</span><span class=\"n\">almost-there</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"p\">)])</span>\n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">almost-there</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>However, in Racket it&rsquo;s common to name such intermediate results using <code>define</code> rather than <code>let</code>. In fact, it&rsquo;s <a href=\"https://docs.racket-lang.org/style/Choosing_the_Right_Construct.html#%28part._.Definitions%29\">prescribed by the style guide</a>. Naturally, we would like to do so in our Racket language extension as well, which would allow us to write the above function as:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">([</span><span class=\"n\">x</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span> <span class=\"n\">Int</span><span class=\"p\">])</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">almost-there</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">almost-there</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Unfortunately, this is not nearly as easy to do in Turnstile as <code>let</code>.</p>\n\n<h2 id=\"sequences\">Sequences</h2>\n\n<p>At first glance, the issue seems to be that the definition of <code>λ</code> above limits the body to be a single expression when what we want to put there is a sequence of definitions and expressions. To reach our goal, we need to change the definition of <code>λ</code> to allow its body to be a sequence.</p>\n\n<p>The first step is to create a typed form for sequences of definitions and expressions, which can then be used by rules like <code>λ</code>:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"n\">define-typed-syntax</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/begin.html#(form._((quote._~23~25kernel)._begin))\" style=\"color: inherit\">begin</a></span> <span class=\"n\">e</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/stxparse-patterns.html#(form._((lib._syntax/parse..rkt)._......+))\" style=\"color: inherit\">...+</a></span><span class=\"p\">)</span> <span class=\"n\">≫</span>\n  <span class=\"p\">[</span><span class=\"n\">⊢</span> <span class=\"n\">e</span> <span class=\"n\">≫</span> <span class=\"n\">e-</span> <span class=\"n\">⇒</span> <span class=\"n\">τ</span><span class=\"p\">]</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span>\n  <span class=\"kd\">#:with</span> <span class=\"n\">τ-final</span> <span class=\"p\">(</span><span class=\"n\">stx-last</span> <span class=\"o\">#'</span><span class=\"p\">(</span><span class=\"n\">τ</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))</span>\n  <span class=\"n\">-----------------------------------</span>\n  <span class=\"p\">[</span><span class=\"n\">⊢</span> <span class=\"p\">(</span><span class=\"n\">begin-</span> <span class=\"n\">e-</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span> <span class=\"n\">⇒</span> <span class=\"n\">τ-final</span><span class=\"p\">])</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This directs type checking to:</p>\n\n<ol>\n <li>Check each <code>e</code> in the sequence individually, obtaining an expanded <code>e-</code> and  inferred type <code>τ</code> for each.</li>\n <li>Take the last type in the sequence and call it <code>τ-final</code>; Turnstile allows  using <code>syntax-parse</code> <a href=\"http://docs.racket-lang.org/syntax/stxparse-specifying.html?#%28tech._pattern._directive%29\">directives</a> such as <code>#:with</code> as premises.</li>\n <li>Expand to Racket&rsquo;s <code>begin</code> (with the usual <code>-</code> suffix) and give the whole  expression the type of the last term in the body.</li></ol>\n\n<p>Now, we can use <code>begin</code> in a revised definition of <code>λ</code>. The new rule takes a non-empty sequence of forms in the body and wraps them in our new <code>begin</code> form for typechecking.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"n\">define-typed-syntax</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">([</span><span class=\"n\">x:id</span> <span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/stxparse-patterns.html#(form._((lib._syntax/parse..rkt)._~7edatum))\" style=\"color: inherit\">~datum</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span><span class=\"p\">)</span> <span class=\"n\">τ_in:type</span><span class=\"p\">]</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span> <span class=\"n\">e</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/stxparse-patterns.html#(form._((lib._syntax/parse..rkt)._......+))\" style=\"color: inherit\">...+</a></span><span class=\"p\">)</span> <span class=\"n\">≫</span>\n  <span class=\"p\">[[</span><span class=\"n\">x</span> <span class=\"n\">≫</span> <span class=\"n\">x-</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span> <span class=\"n\">τ_in.norm</span><span class=\"p\">]</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span> <span class=\"n\">⊢</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/begin.html#(form._((quote._~23~25kernel)._begin))\" style=\"color: inherit\">begin</a></span> <span class=\"n\">e</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span> <span class=\"n\">≫</span> <span class=\"n\">e-</span> <span class=\"n\">⇒</span> <span class=\"n\">τ_out</span><span class=\"p\">]</span>\n  <span class=\"n\">-------------------------------------------------</span>\n  <span class=\"p\">[</span><span class=\"n\">⊢</span> <span class=\"p\">(</span><span class=\"n\">#%plain-lambda-</span> <span class=\"p\">(</span><span class=\"n\">x-</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span> <span class=\"n\">e-</span><span class=\"p\">)</span> <span class=\"n\">⇒</span> <span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types-extra..rkt)._~e2~86~92))\" style=\"color: inherit\">→</a></span> <span class=\"n\">τ_in.norm</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span> <span class=\"n\">τ_out</span><span class=\"p\">)])</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Now we need a way to include definitions in these sequences and we&rsquo;re set!</p>\n\n<h2 id=\"the-difficulty-with-define\">The Difficulty With Define</h2>\n\n<p>If we think about how type information is communicated between a binder and its reference we can see why <code>define</code> is a different beast than <code>let</code></p>\n\n<pre><code>(let ([x 5]) (+ x 1))\n       ^        ^\n       |        |- TO HERE\nFROM HERE</code></pre>\n\n<p>When the rule for our <code>let</code> is invoked, it has access to both the binding sites and the place where references may occur. The situation lends itself to a straightforward implementation strategy: create an environment of identifier/type associations to use when analyzing the body. Turnstile directly accommodates this scenario in its language for creating type rules with the optional context appearing on the left of the <code>⊢</code>, as in our rules for <code>λ</code> and <code>let</code> above.</p>\n\n<p>Define is different.</p>\n\n<pre><code>(define x 5)\n        ^\n        |------ TO WHERE?\nFROM HERE</code></pre>\n\n<p>The problem is apparent: we can&rsquo;t see where the reference to <code>x</code> occurs! The information about the binding needs to escape from the <code>define</code> to the surrounding context. In other words, when we implement <code>define</code>, we don&rsquo;t have a body term available that contains all the possible references. Instead, we will have to find a way of communicating the existence of the <code>x</code> binding and its type to the surrounding context.</p>\n\n<p>Above, in the subsection on &ldquo;Renaming Typed Variables&rdquo;, we saw that the context in Turnstile type rules is implemented as syntax transformers with <code>let</code>-like scope (created with <code>let-syntax</code>). One idea would be to mimic this approach, but instead of using <code>let-syntax</code> to achieve <code>let</code>-like scope, use <code>define-syntax</code> to achieve <code>define</code>-like scope.</p>\n\n<p>Fortunately for us, someone has already tried their hand at writing a <code>define</code> form for Turnstile languages using a <code>define-syntax</code> rename, found in the <a href=\"https://github.com/stchang/macrotypes/blob/c5b663f7e663c564cb2baf0e0a352d5fde4d2bd7/turnstile/examples/ext-stlc.rkt#L55\">Turnstile examples</a>. We can take that as our starting point:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"n\">define-base-type</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.Void))\" style=\"color: inherit\">Void</a></span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">define-</span> <span class=\"n\">a-deep-dark-void</span> <span class=\"p\">(</span><span class=\"n\">#%app-</span> <span class=\"n\">void-</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">define-typed-syntax</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">x:id</span> <span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"n\">≫</span>\n  <span class=\"p\">[</span><span class=\"n\">⊢</span> <span class=\"n\">e</span> <span class=\"n\">≫</span> <span class=\"n\">e-</span> <span class=\"n\">⇒</span> <span class=\"n\">τ</span><span class=\"p\">]</span>\n  <span class=\"kd\">#:with</span> <span class=\"n\">x-</span> <span class=\"p\">(</span><span class=\"n\">assign-type</span> <span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/reference/syntax-util.html#(def._((lib._racket/syntax..rkt)._generate-temporary))\" style=\"color: inherit\">generate-temporary</a></span> <span class=\"o\">#'</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">#'</span><span class=\"n\">τ</span> <span class=\"kd\">#:wrap?</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n  <span class=\"n\">-----------------------------------------------------</span>\n  <span class=\"p\">[</span><span class=\"n\">⊢</span> <span class=\"p\">(</span><span class=\"n\">begin-</span>\n       <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define-syntax))\" style=\"color: inherit\">define-syntax</a></span> <span class=\"n\">x</span> <span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/transformer-helpers.html#(def._((lib._syntax/transformer..rkt)._make-variable-like-transformer))\" style=\"color: inherit\">make-variable-like-transformer</a></span> <span class=\"o\">#'</span><span class=\"n\">x-</span><span class=\"p\">))</span>\n       <span class=\"p\">(</span><span class=\"n\">define-</span> <span class=\"n\">x-</span> <span class=\"n\">e-</span><span class=\"p\">)</span>\n       <span class=\"n\">a-deep-dark-void</span><span class=\"p\">)</span>\n     <span class=\"n\">⇒</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.Void))\" style=\"color: inherit\">Void</a></span><span class=\"p\">])</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Let&rsquo;s break it down.</p>\n\n<ol>\n <li>Create a new type, <code>Void</code>, to assign definitions.</li>\n <li>Create a constant to serve as the canonical value of type <code>Void</code>.</li>\n <li>Define a new typed form, <code>define</code>, used as in <code>(define x e)</code>.</li>\n <li>Check the type of the expression <code>e</code>, getting its  expansion <code>e-</code> and type <code>τ</code>.</li>\n <li>Create a new name, <code>x-</code>, and attach the type <code>τ</code> as metadata.</li>\n <li>Expand to Racket&rsquo;s <code>begin</code>. Unlike <code>let</code>, <code>begin</code> does not create a new  scope; definitions inside a <code>begin</code> are also visible in the surrounding  context. That behavior is needed for scenarios like this one that expand to  multiple definitions.</li>\n <li>Create a macro binding for <code>x</code> that rewrites to <code>x-</code>. By using a define-like  form, the macro has the same scoping rules as <code>define</code>, so it will apply to  references to <code>x</code> in the surrounding context&mdash;exactly what we want. (We are  using <code>make-variable-like-transformer</code> to avoid the special treatment the  expander gives to <code>rename-transformer</code>s. The specifics are beyond the scope  of this post.)</li>\n <li>Define <code>x-</code> to refer to the supplied expression. Note that here <code>define-</code> is  Racket&rsquo;s <code>define</code>.</li>\n <li>Keep the result of evaluating this form in line with the type by yielding a  value of type <code>Void</code>.</li></ol>\n\n<p>This implementation of <code>define</code> gets us pretty far. If we put definitions at the top-level of a module in our language, we can reference them within other terms in the module:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"c1\">;; module top level</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">x</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"c1\">;;=&gt; 6</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Unfortunately, we encounter a problem if we try to create <em>local</em> definitions:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">add2</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span> <span class=\"p\">([</span><span class=\"n\">x</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span> <span class=\"n\">Int</span><span class=\"p\">])</span>\n     <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">almost</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n     <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">almost</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>\n<span class=\"c1\">;;==&gt; almost: unbound identifier...</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Pointing to the reference on the final line. The problem is that our <code>define</code> and <code>begin</code> forms are not interacting in the way we might have hoped.</p>\n\n<p>When we expand the body of the function above, we associate <code>x</code> with type <code>Int</code> then start checking the body, wrapped in a <code>begin</code>:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/begin.html#(form._((quote._~23~25kernel)._begin))\" style=\"color: inherit\">begin</a></span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">almost</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">almost</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Consulting the definition of <code>begin</code>, we see that it checks/expands each sub-expression in seqence. First in the sequence is a use of <code>define</code>, yielding</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"n\">begin-</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define-syntax))\" style=\"color: inherit\">define-syntax</a></span> <span class=\"n\">almost</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">define-</span> <span class=\"n\">almost-</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n  <span class=\"n\">a-deep-dark-void</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Crucially, the expansion of our <code>define</code> form <strong>stops</strong> at this point, without examining the <code>begin-</code> form and its contained definitions. The interface through which Turnstile invokes the macro expander, <a href=\"http://docs.racket-lang.org/reference/stxtrans.html?q=local-expand#%28def._%28%28quote._~23~25kernel%29._local-expand%29%29\"><code>local-expand</code></a>, takes a parameter referred to as the <em>stop list</em> for stopping expansion at certain points. The stop list contains identifiers which, when encountered by the expander, halt expansion.</p>\n\n<p>The syntax output from typed forms created using Turnstile are wrapped with a particular macro, named <code>erased</code>, that serves (only) to orchestrate stopping expansion. So, the output of our <code>define</code> form actually looks like</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"n\">erased</span>\n  <span class=\"p\">(</span><span class=\"n\">begin-</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define-syntax))\" style=\"color: inherit\">define-syntax</a></span> <span class=\"n\">almost</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"n\">define-</span> <span class=\"n\">almost-</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n    <span class=\"n\">a-deep-dark-void</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>And since Turnstile includes <code>erased</code> in the stop list for <code>local-expand</code>, expansion stops before analyzing the rest of the output. The point of all this <code>erased</code> business, if you are wondering, is to improve the performance of Turnstile languages by avoiding unnecessary re-expansions.</p>\n\n<p>Control returns to the <code>begin</code> transformer, which turns to checking/expanding the subsequent <code>(+ almost 1)</code>, where it will encounter the identifier <code>almost</code> without a corresponding binding. Even though our <code>define</code> form produced a binding as part of its output, the expander hasn&rsquo;t actually analyzed it before reaching the reference in the next expression.</p>\n\n<p>The problem is a symptom of analyzing the sequence of forms using an ellipses, which corresponds to mapping the typechecking/expanding process over each individually. The mapping operation stipulates that checking each item is independent of checking the others. But when we add <code>define</code> to the language that is no longer the case. A definition form influences how we typecheck its neighbors by introducing a new name and its type. This information must be communicated to the following forms in order to properly check references. That is, instead of setting up binding information and then checking, analyzing bindings must be interleaved with type checking. Unfortunately, Turnstile doesn&rsquo;t provide a fold-like mechanism for threading binding information through the checking of a sequence of typed forms. We&rsquo;re going to need to implement our own solution, requiring us to dive underneath the abstractions provided by Turnstile and get intimate with Racket&rsquo;s syntax model.</p>\n\n<h2 id=\"internal-definition-contexts\">Internal Definition Contexts</h2>\n\n<p>In order for the <code>(+ almost 1)</code> expression from above to successfully typecheck/expand, we need to be able to associate <code>almost</code> with a suitable type. Turnstile provides a way to set up such an association, but as we saw before, Turnstile&rsquo;s interface doesn&rsquo;t suit this scenario.</p>\n\n<p>Racket has the notion of an <a href=\"http://docs.racket-lang.org/reference/syntax-model.html?#%28tech._internal._definition._context%29\">internal definition context</a> that allows definitions to be mixed with expressions. The syntax system exposes tools for creating and manipulating such contexts programmatically, allowing macro writers a great deal of power for manipulating the bindings in a program.</p>\n\n<p>When using <code>local-expand</code>, we can optionally pass in a definition context containing binding information. If we create a definition context for the body of the function and extend it with each definition, then <code>local-expand</code>-ing references such as the above one should work out. Normally, Turnstile calls <code>local-expand</code> internally in accordance with the type rules we write down, but in order to use our own definition context we&rsquo;re going to have to call it ourselves.</p>\n\n<p>We can create a definition context with <a href=\"http://docs.racket-lang.org/reference/stxtrans.html#%28def._%28%28quote._~23~25kernel%29._syntax-local-make-definition-context%29%29\"><code>syntax-local-make-definition-context</code></a>, as in</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">def-ctx</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/stxtrans.html#(def._((quote._~23~25kernel)._syntax-local-make-definition-context))\" style=\"color: inherit\">syntax-local-make-definition-context</a></span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>And then (imperatively) add bindings to <code>def-ctx</code> with <a href=\"http://docs.racket-lang.org/reference/stxtrans.html#%28def._%28%28quote._~23~25kernel%29._syntax-local-bind-syntaxes%29%29\"><code>syntax-local-bind-syntaxes</code></a>. The first argument is a list of identifiers to bind; we will only be binding one identifier at a time, consequently only passing singleton lists. The second argument dictates what the given identifier <em>means</em>. Passing <code>#f</code> corresponds to a run-time/phase 0 binding, such as that of a procedure argument, <code>let</code>, or <code>define</code>; alternatively, we can provide syntax that evaluates to a function, establishing a transformer binding invoked on references to the identifier. Using both alternatives, we can define a renaming macro and give a meaning to the new name:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define-for-syntax))\" style=\"color: inherit\">define-for-syntax</a></span> <span class=\"p\">(</span><span class=\"n\">int-def-ctx-bind-type-rename!</span> <span class=\"n\">x</span> <span class=\"n\">x-</span> <span class=\"n\">t</span> <span class=\"n\">ctx</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/stxtrans.html#(def._((quote._~23~25kernel)._syntax-local-bind-syntaxes))\" style=\"color: inherit\">syntax-local-bind-syntaxes</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span> <span class=\"n\">x</span><span class=\"p\">)</span>\n                              <span class=\"o\">#`</span><span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/transformer-helpers.html#(def._((lib._syntax/transformer..rkt)._make-variable-like-transformer))\" style=\"color: inherit\">make-variable-like-transformer</a></span>\n                                 <span class=\"p\">(</span><span class=\"n\">assign-type</span> <span class=\"o\">#'#,</span><span class=\"n\">x-</span> <span class=\"o\">#'#,</span><span class=\"n\">t</span> <span class=\"kd\">#:wrap?</span> <span class=\"no\">#f</span><span class=\"p\">))</span>\n                              <span class=\"n\">ctx</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/stxtrans.html#(def._((quote._~23~25kernel)._syntax-local-bind-syntaxes))\" style=\"color: inherit\">syntax-local-bind-syntaxes</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span> <span class=\"n\">x-</span><span class=\"p\">)</span> <span class=\"no\">#f</span> <span class=\"n\">ctx</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The first call binds <code>x</code> to a transformer that renames to <code>x-</code>; the second lets the expander know that we are taking care of making sure that <code>x-</code> will actually be bound to something.</p>\n\n<p>Our <code>define</code> form must communicate the information needed to call <code>int-def-ctx-bind-type-rename!</code> back out to the surrounding context. One way to do this is to add an intermediate step to the expansion of <code>define</code> that includes the necessary information as part of its syntax. Then, the surrounding context can analyze the expansion of each term, looking for that form.</p>\n\n<p>Concretely, <code>define</code> will expand to <code>define/intermediate</code>, which will in turn expand to what <code>define</code> originally expanded to:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"n\">define-typed-syntax</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">x:id</span> <span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"n\">≫</span>\n  <span class=\"p\">[</span><span class=\"n\">⊢</span> <span class=\"n\">e</span> <span class=\"n\">≫</span> <span class=\"n\">e-</span> <span class=\"n\">⇒</span> <span class=\"n\">τ</span><span class=\"p\">]</span>\n  <span class=\"kd\">#:with</span> <span class=\"n\">x-</span> <span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/reference/syntax-util.html#(def._((lib._racket/syntax..rkt)._generate-temporary))\" style=\"color: inherit\">generate-temporary</a></span> <span class=\"o\">#'</span><span class=\"n\">x</span><span class=\"p\">)</span>\n  <span class=\"kd\">#:with</span> <span class=\"n\">x+</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/stxtrans.html#(def._((quote._~23~25kernel)._syntax-local-identifier-as-binding))\" style=\"color: inherit\">syntax-local-identifier-as-binding</a></span> <span class=\"o\">#'</span><span class=\"n\">x</span><span class=\"p\">)</span>\n  <span class=\"n\">--------------------------------------------------</span>\n  <span class=\"p\">[</span><span class=\"n\">⊢</span> <span class=\"p\">(</span><span class=\"n\">define/intermediate</span> <span class=\"n\">x+</span> <span class=\"n\">x-</span> <span class=\"n\">τ</span> <span class=\"n\">e-</span><span class=\"p\">)</span> <span class=\"n\">⇒</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types..rkt)._.Void))\" style=\"color: inherit\">Void</a></span><span class=\"p\">])</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define-syntax))\" style=\"color: inherit\">define-syntax</a></span> <span class=\"p\">(</span><span class=\"n\">define/intermediate</span> <span class=\"n\">stx</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Parsing_Syntax.html#(form._((lib._syntax/parse..rkt)._syntax-parse))\" style=\"color: inherit\">syntax-parse</a></span> <span class=\"n\">stx</span>\n    <span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span> <span class=\"n\">x:id</span> <span class=\"n\">x-:id</span> <span class=\"n\">τ</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n     <span class=\"kd\">#:with</span> <span class=\"n\">x-/τ</span> <span class=\"p\">(</span><span class=\"n\">assign-type</span> <span class=\"o\">#'</span><span class=\"n\">x-</span> <span class=\"o\">#'</span><span class=\"n\">τ</span> <span class=\"kd\">#:wrap?</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n     <span class=\"o\">#'</span><span class=\"p\">(</span><span class=\"n\">begin-</span>\n         <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define-syntax))\" style=\"color: inherit\">define-syntax</a></span> <span class=\"n\">x</span> <span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/transformer-helpers.html#(def._((lib._syntax/transformer..rkt)._make-variable-like-transformer))\" style=\"color: inherit\">make-variable-like-transformer</a></span> <span class=\"o\">#'</span><span class=\"n\">x-/τ</span><span class=\"p\">))</span>\n         <span class=\"p\">(</span><span class=\"n\">define-</span> <span class=\"n\">x-</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n         <span class=\"n\">a-deep-dark-void</span><span class=\"p\">)]))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>(The reason we create an <code>x+</code> using <a href=\"http://docs.racket-lang.org/reference/stxtrans.html#%28def._%28%28quote._~23~25kernel%29._syntax-local-identifier-as-binding%29%29\"><code>syntax-local-identifier-as-binding</code></a> is <a href=\"https://github.com/racket/racket/pull/2237\">due to a bug in the expander</a>. The explanation is rather involved and frankly I only barely understand what&rsquo;s going on myself (if at all), so let&rsquo;s just leave it at that and move on.)</p>\n\n<p>Then, for each form <code>e</code> in a sequence, we can call <code>local-expand</code> with <code>def-ctx</code> and then check the expansion, <code>e-</code>, for <code>define/intermediate</code>. In those cases, we can use <code>int-def-ctx-bind-type-rename!</code> to add it to the context. The procedure <code>add-bindings-to-ctx!</code> performs this check on an expanded form <code>e-</code> (remembering that Turnstile will wrap the output of <code>define</code> in an <code>erased</code> macro):</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define-for-syntax))\" style=\"color: inherit\">define-for-syntax</a></span> <span class=\"p\">(</span><span class=\"n\">add-bindings-to-ctx!</span> <span class=\"n\">e-</span> <span class=\"n\">def-ctx</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Parsing_Syntax.html#(form._((lib._syntax/parse..rkt)._syntax-parse))\" style=\"color: inherit\">syntax-parse</a></span> <span class=\"n\">e-</span>\n        <span class=\"kd\">#:literals</span> <span class=\"p\">(</span><span class=\"n\">erased</span><span class=\"p\">)</span>\n        <span class=\"p\">[(</span><span class=\"n\">erased</span> <span class=\"p\">(</span><span class=\"n\">define/intermediate</span> <span class=\"n\">x:id</span> <span class=\"n\">x-:id</span> <span class=\"n\">τ</span> <span class=\"n\">e-</span><span class=\"p\">))</span>\n         <span class=\"p\">(</span><span class=\"n\">int-def-ctx-bind-type-rename!</span> <span class=\"o\">#'</span><span class=\"n\">x</span> <span class=\"o\">#'</span><span class=\"n\">x-</span> <span class=\"o\">#'</span><span class=\"n\">τ</span> <span class=\"n\">def-ctx</span><span class=\"p\">)]</span>\n        <span class=\"p\">[</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span>\n         <span class=\"c1\">;; when e expands to something other than a definition there&#39;s nothing to bind</span>\n         <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/void.html#(def._((quote._~23~25kernel)._void))\" style=\"color: inherit\">void</a></span><span class=\"p\">)]))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>We now have the key ingredients to define a procedure, <code>walk/bind</code>, that will serve as the primary vehicle to type check a sequence of forms, threading binding information through using a definition context. Processing sequences of defintions and expressions will iterate through them one at a time, and for each form <code>e</code>:</p>\n\n<ol>\n <li><code>local-expand</code> using our internal definition context, resulting in an <code>e-</code>.</li>\n <li>Retrieve the type of <code>e</code> from the metadata of <code>e-</code> using Turnstile&rsquo;s  <a href=\"http://docs.racket-lang.org/turnstile/The_Turnstile_Reference.html?q=typeof#%28def._%28%28lib._turnstile%2Fmain..rkt%29._typeof%29%29\"><code>typeof</code></a> helper.</li>\n <li>Check if <code>e</code> defined a binding, in which case add it to the context.</li></ol>\n\n<p>Aggregating the expanded syntax and type of each form as we go along, we get</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define-for-syntax))\" style=\"color: inherit\">define-for-syntax</a></span> <span class=\"p\">(</span><span class=\"n\">walk/bind</span> <span class=\"n\">e...</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">def-ctx</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/stxtrans.html#(def._((quote._~23~25kernel)._syntax-local-make-definition-context))\" style=\"color: inherit\">syntax-local-make-definition-context</a></span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">unique</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/symbols.html#(def._((quote._~23~25kernel)._gensym))\" style=\"color: inherit\">gensym</a></span> <span class=\"o\">'</span><span class=\"ss\">walk/bind</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((quote._~23~25kernel)._define-values))\" style=\"color: inherit\">define-values</a></span> <span class=\"p\">(</span><span class=\"n\">rev-e-...</span> <span class=\"n\">rev-τ...</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for/fold))\" style=\"color: inherit\">for/fold</a></span> <span class=\"p\">([</span><span class=\"n\">rev-e-...</span> <span class=\"o\">'</span><span class=\"p\">()]</span>\n               <span class=\"p\">[</span><span class=\"n\">rev-τ...</span> <span class=\"o\">'</span><span class=\"p\">()])</span>\n              <span class=\"p\">([</span><span class=\"n\">e</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/sequence..rkt)._in-syntax))\" style=\"color: inherit\">in-syntax</a></span> <span class=\"n\">e...</span><span class=\"p\">)])</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">e-</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/stxtrans.html#(def._((quote._~23~25kernel)._local-expand))\" style=\"color: inherit\">local-expand</a></span> <span class=\"n\">e</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span> <span class=\"n\">unique</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span> <span class=\"o\">#'</span><span class=\"n\">erased</span><span class=\"p\">)</span> <span class=\"n\">def-ctx</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">τ</span> <span class=\"p\">(</span><span class=\"n\">typeof</span> <span class=\"n\">e-</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"n\">add-bindings-to-ctx!</span> <span class=\"n\">e-</span> <span class=\"n\">def-ctx</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/values.html#(def._((quote._~23~25kernel)._values))\" style=\"color: inherit\">values</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"n\">e-</span> <span class=\"n\">rev-e-...</span><span class=\"p\">)</span>\n              <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"n\">τ</span> <span class=\"n\">rev-τ...</span><span class=\"p\">))))</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/values.html#(def._((quote._~23~25kernel)._values))\" style=\"color: inherit\">values</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/list..rkt)._reverse))\" style=\"color: inherit\">reverse</a></span> <span class=\"n\">rev-e-...</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/list..rkt)._reverse))\" style=\"color: inherit\">reverse</a></span> <span class=\"n\">rev-τ...</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The value <code>unique</code> and its use as an argument is dictated by the documentation of <a href=\"http://docs.racket-lang.org/reference/stxtrans.html?q=local-expand#%28def._%28%28quote._~23~25kernel%29._local-expand%29%29\"><code>local-expand</code></a>: &ldquo;For a particular internal-definition context, generate a unique value and put it into a list for context-v.&rdquo; By using <code>#'erased</code> in the stop list for <code>local-expand</code>, we stop expansion at the same points that Turnstile does.</p>\n\n<p>Now we can implement <code>begin</code> in terms of <code>walk/bind</code>:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"n\">define-typed-syntax</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/begin.html#(form._((quote._~23~25kernel)._begin))\" style=\"color: inherit\">begin</a></span> <span class=\"n\">e</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/stxparse-patterns.html#(form._((lib._syntax/parse..rkt)._......+))\" style=\"color: inherit\">...+</a></span><span class=\"p\">)</span> <span class=\"n\">≫</span>\n  <span class=\"kd\">#:do</span> <span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((quote._~23~25kernel)._define-values))\" style=\"color: inherit\">define-values</a></span> <span class=\"p\">(</span><span class=\"n\">e-...</span> <span class=\"n\">τ...</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">walk/bind</span> <span class=\"o\">#'</span><span class=\"p\">(</span><span class=\"n\">e</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)))]</span>\n  <span class=\"kd\">#:with</span> <span class=\"n\">τ-final</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._last))\" style=\"color: inherit\">last</a></span> <span class=\"n\">τ...</span><span class=\"p\">)</span>\n  <span class=\"n\">--------------------</span>\n  <span class=\"p\">[</span><span class=\"n\">⊢</span> <span class=\"p\">(</span><span class=\"n\">begin-</span> <span class=\"o\">#,@</span><span class=\"n\">e-...</span><span class=\"p\">)</span> <span class=\"n\">⇒</span> <span class=\"n\">τ-final</span><span class=\"p\">])</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>and voilà!</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">add2</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span> <span class=\"n\">Int</span><span class=\"p\">])</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">almost</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">almost</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">add2</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"c1\">;;=&gt; 5</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h1 id=\"but-wait-theres-more\">But Wait, There&rsquo;s More</h1>\n\n<p>I believe this design is can be dropped in &lsquo;as-is&rsquo; and with a few extensions be useful for a wide variety of Turnstile languages. However, there are a few shortcomings (that I am aware of) that I will leave as exercises for the interested reader:</p>\n\n<ul>\n <li>The <code>define</code> form here doesn&rsquo;t provide the useful shorthand for creating  functions, <code>(define (f x) e ...)</code>. Extending it to do so is relatively  straightforward.</li>\n <li>Supporting <em>recursive</em> (and mutually recursive) function definitions is a bit  more complicated, but shouldn&rsquo;t require many changes to the above code.</li>\n <li>There&rsquo;s an extensibility issue&mdash;macros that expand to multiple uses of  <code>define</code> inside a <code>begin</code> won&rsquo;t work (why not?), such as</li></ul>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define-syntax))\" style=\"color: inherit\">define-syntax</a></span> <span class=\"p\">(</span><span class=\"n\">define/memo</span> <span class=\"n\">stx</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Parsing_Syntax.html#(form._((lib._syntax/parse..rkt)._syntax-parse))\" style=\"color: inherit\">syntax-parse</a></span> <span class=\"n\">stx</span>\n    <span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt).__))\" style=\"color: inherit\">_</a></span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/stxparse-patterns.html#(form._((lib._syntax/parse..rkt)._~7edatum))\" style=\"color: inherit\">~datum</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span><span class=\"p\">)</span> <span class=\"n\">τ</span><span class=\"p\">]</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span> <span class=\"n\">e</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/stxparse-patterns.html#(form._((lib._syntax/parse..rkt)._......+))\" style=\"color: inherit\">...+</a></span><span class=\"p\">)</span>\n     <span class=\"o\">#'</span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/begin.html#(form._((quote._~23~25kernel)._begin))\" style=\"color: inherit\">begin</a></span>\n         <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">memo</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span> <span class=\"n\">memo</span> <span class=\"n\">table</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n         <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))\" style=\"color: inherit\">:</a></span> <span class=\"n\">τ</span><span class=\"p\">]</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n           <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span> <span class=\"n\">check</span> <span class=\"n\">memo</span> <span class=\"n\">table</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span>\n           <span class=\"n\">e</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))]))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Finally, there&rsquo;s some question as to how to lift these ideas to an abstraction at the Turnstile level, so that future language authors don&rsquo;t have to muck around with <code>syntax-local-bind-syntaxes</code> and friends. If you have any ideas on this front, feel free to reach out.</p>\n<!-- References-->")) ((? . 36) f post (u . "[Getting Started in Programming Languages (Cross-Post)](http://jschuster.org/blog/2016/11/29/getting-started-in-programming-languages/)") (? . 36) 1731904015 (p+ #"/home/runner/work/website/website/blog/2016/11/30/-getting-started-in-programming-languages-cross-post-http-jschuster-org-blog-2016-11-29-getting-started-in-programming-languages/index.html" . unix) (u . "/blog/2016/11/30/-getting-started-in-programming-languages-cross-post-http-jschuster-org-blog-2016-11-29-getting-started-in-programming-languages/") (u . "2016-11-30T15:24:45") (? . 42) (? . 43) (c (u . "tutorial") c (u . "semantics") c (u . "books") c (u . "Author: Jonathan Schuster")) (? . 5) #f (? . 5)) ((? . 37) f post (u . "[How to prove a compiler fully abstract (cross-post)](https://dbp.io/essays/2018-04-19-how-to-prove-a-compiler-fully-abstract.html)") (? . 37) 1731904015 (p+ #"/home/runner/work/website/website/blog/2018/04/23/-how-to-prove-a-compiler-fully-abstract-cross-post-https-dbp-io-essays-2018-04-19-how-to-prove-a-compiler-fully-abstract-html/index.html" . unix) (u . "/blog/2018/04/23/-how-to-prove-a-compiler-fully-abstract-cross-post-https-dbp-io-essays-2018-04-19-how-to-prove-a-compiler-fully-abstract-html/") (u . "2018-04-23T10:07:48") (? . 19) (? . 59) (c (u . "Author: Daniel Patterson")) (? . 5) #f (? . 5)) ((? . 38) f post (u . "Scoping in R") (? . 38) 1731904015 (p+ #"/home/runner/work/website/website/blog/2019/09/10/scoping-in-r/index.html" . unix) (u . "/blog/2019/09/10/scoping-in-r/") (u . "2019-09-10T10:00:00") (? . 11) (? . 71) (c (u . "scope") c (u . "r") c (u . "Author: Ming-Ho Yee")) (u . "\n<p>In the <a href=\"/blog/2019/09/05/lexical-and-dynamic-scope/\">previous post</a> of this three-part blog series, we discussed lexical and dynamic scope. Now, in this second part, we can return to the original question: <em>is R lexically or dynamically scoped?</em></p>") #t (u . "\n<p>In the <a href=\"/blog/2019/09/05/lexical-and-dynamic-scope/\">previous post</a> of this three-part blog series, we discussed lexical and dynamic scope. Now, in this second part, we can return to the original question: <em>is R lexically or dynamically scoped?</em></p>\n<!-- more-->\n\n<p>Recall the example program from before:</p>\n\n<div class=\"brush: r\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">1</span>\n<span class=\"n\">f</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"n\">x</span>\n<span class=\"n\">g</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">2</span>\n  <span class=\"nf\">f</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">g</span><span class=\"p\">()</span> <span class=\"c1\"># what does this return?</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Let&rsquo;s examine what happens when we run this example. First, we create a mapping for <code>x</code> in the top-level environment. On line 2, we define a function <code>f</code>, which returns the value of some <code>x</code>. On line 3, we define a function <code>g</code>, which creates a new mapping for <code>x</code>, and then calls <code>f</code>. Note that the assignment on line 4 does <em>not</em> update the definition on line 1.</p>\n\n<p>When <code>f</code> is called, it needs to look up the value of <code>x</code>. In other words, does the reference of <code>x</code> on line 2 refer to the assignment on line 1 or the assignment on line 4? If <code>f</code> returns <code>1</code>, then the behaviour matches lexical scoping. If it returns <code>2</code>, then the behaviour matches dynamic scoping.</p>\n\n<p>When we run this example, the result is <code>1</code>. This implies that R is lexically scoped.</p>\n\n<p>But there&rsquo;s more to this story. In the rest of this blog post, I&rsquo;ll examine some interesting scoping examples in R, and discuss how the scoping definitions relate to R.</p>\n\n<p>The <a href=\"/blog/2019/09/10/four-kinds-of-scoping-in-r/\">next and final part</a> of this blog series, published simultaneously with this one, is an appendix where I implement four different scoping disciplines in R.</p>\n\n<h2 id=\"r-is-lexically-scoped-but\">R is lexically scoped, but&hellip;</h2>\n\n<p>In <em>Evaluating the Design of the R Language</em>,<sup><a href=\"#2019-09-10-scoping-in-r-footnote-1-definition\" name=\"2019-09-10-scoping-in-r-footnote-1-return\">1</a></sup> Morandat, Hill, Osvald, and Vitek write:</p>\n\n<blockquote>\n <p>As is often the case, R is lexically scoped up to the point it is not. R is above all a dynamic language with full reflective access to the running program’s data and representation.</p></blockquote>\n\n<p>In other words, R provides many different &ldquo;escape hatches&rdquo;&mdash;ways to bypass lexical scoping. Additionally, even without escape hatches, some of R&rsquo;s functionality can be surprising.</p>\n\n<h3 id=\"functions-environments-and-variables-in-r\">Functions, environments, and variables in R</h3>\n\n<p>Before we look at some examples, I think it&rsquo;s useful to briefly discuss some of the core concepts in R that relate to scoping.</p>\n\n<ul>\n <li>\n  <p><strong>Functions.</strong> R has first-class functions, and functions evaluate to  closures. In other words, a function value includes both the body of the  function as well as the environment that the function was evaluated in. In  R, the programmer can modify the environment of a closure. Note that R is  function scoped; there is no block scoping.</p></li>\n <li>\n  <p><strong>Environments.</strong> An environment in R is a mapping from variables to  values. Each function has its own local environment. Furthermore, each  environment has a reference to the &ldquo;enclosing&rdquo; environment that it was  evaluated in. R environments are first-class, meaning the programmer can  add, modify, or removing variable mappings, and also change the reference to  the enclosing environment.</p></li>\n <li>\n  <p><strong>Variable lookup.</strong> When R looks up a variable, it will search in the  current environment for a mapping. If no mapping is found, then it will  search in the enclosing environment. This process continues until a mapping  is found, or the topmost, empty environment is reached, in which case an  error is raised.</p></li>\n <li>\n  <p><strong>Variable assignment.</strong> <code>&lt;-</code> is the variable assignment operator in R. The  expression <code>x &lt;- 1</code> assigns the value <code>1</code> to the variable <code>x</code> in the  current environment. If a mapping for <code>x</code> already exists in the  environment, then the assignment will update and overwrite the existing  value. Otherwise, a new mapping is created in the environment. Note that  variable assignment can only update the current environment, and never  creates a scope.</p></li></ul>\n\n<p>From this description, we can see that R implements lexical scoping (or at least, something that behaves a lot like lexical scoping): each function value is associated with the environment it was evaluated in, and variable lookup proceeds along the chain of enclosing environments. In fact, the creators of R have confirmed that lexical scoping was their intent.<sup><a href=\"#2019-09-10-scoping-in-r-footnote-2-definition\" name=\"2019-09-10-scoping-in-r-footnote-2-return\">2</a></sup></p>\n\n<p>On the other hand, variable lookup depends on the run-time state of the program&mdash;names cannot be resolved statically. Furthermore, since R provides operations for environment manipulation, a programmer can easily circumvent lexical scoping.</p>\n\n<p>The following examples will make this clear.</p>\n\n<h3 id=\"examples\">Examples</h3>\n\n<h4 id=\"adding-variable-mappings-at-run-time\">Adding variable mappings at run time</h4>\n\n<div class=\"brush: r\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">1</span>\n<span class=\"n\">f</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">g</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"n\">x</span>\n  <span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">2</span>\n  <span class=\"nf\">g</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">f</span><span class=\"p\">()</span> <span class=\"c1\"># 2</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>When <code>f</code> is called, it creates a function <code>g</code> that returns <code>x</code>, assigns <code>2</code> to <code>x</code>, and then calls <code>g</code>. When <code>g</code> is called, it looks up <code>x</code>. Since no mapping is found in <code>g</code>&rsquo;s environment, it searches in the enclosing environment (<code>f</code>&rsquo;s), and finds that <code>x</code> has value <code>2</code>. Therefore, <code>g</code> returns <code>2</code>.</p>\n\n<p>Note that the <code>x</code> on line 3 is resolved only when function <code>g</code> is called, not when it is defined. However, when <code>g</code> is defined, its environment has a reference to <code>f</code>&rsquo;s environment. Therefore, as long as <code>x</code> is defined <em>before</em> <code>g</code> is called, the lookup will always succeed.</p>\n\n<p>Here&rsquo;s a second example:</p>\n\n<div class=\"brush: r\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">1</span>\n<span class=\"n\">f</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nf\">if </span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">2</span>\n  <span class=\"n\">x</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"kc\">TRUE</span><span class=\"p\">)</span>  <span class=\"c1\"># 2</span>\n<span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"kc\">FALSE</span><span class=\"p\">)</span> <span class=\"c1\"># 1</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><code>f</code> is a function that branches on its argument, <code>b</code>. If <code>b</code> evaluates to true, then the expression <code>x &lt;- 2</code> is evaluated, and a mapping for <code>x</code> is created in <code>f</code>&rsquo;s environment. Otherwise, no mapping is created.</p>\n\n<p>When we look up the value of <code>x</code> on line 5, R will first search the function&rsquo;s environment. If <code>b</code> evaluated to true, then R will find a value for <code>x</code>, which is <code>2</code>. Otherwise, R will search in the enclosing environment of <code>f</code>, and find that <code>x</code> is <code>1</code>.</p>\n\n<p>Both of these examples vaguely resemble dynamic scoping, in that <code>x</code> takes the value of the most recent assignment. However, this is not how R is implemented, and it is not consistent with how R behaves in other examples.</p>\n\n<h4 id=\"function-lookup\">Function lookup</h4>\n\n<div class=\"brush: r\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">f</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">x</span>\n<span class=\"n\">g</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">)</span> <span class=\"c1\"># not an error</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">g</span><span class=\"p\">(</span><span class=\"m\">42</span><span class=\"p\">)</span> <span class=\"c1\"># 0</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>R has slightly different lookup rules, if the variable is in function call position. Specifically, R will search the environment chain and skip non-function values.</p>\n\n<p>In this example, we call <code>g</code> with the argument <code>42</code>, which is not a function. Then, in the body of <code>g</code>, we call <code>f(0)</code> on line 3, which requires looking up <code>f</code>. Although there is an <code>f</code> in the environment of <code>g</code>, its value is <code>42</code>, which is not a function. R will then search the enclosing environment, where it finds the function defined on line 1. Therefore, the lookup on line 3 resolves to the function on line 1, so <code>f(0)</code> returns <code>0</code>.</p>\n\n<p>This behaviour exists because <code>c</code> is the built-in function that constructs vectors (in other words, one of the most commonly used functions in R), but it is also a commonly used argument name.</p>\n\n<h4 id=\"super-assignment\">Super assignment</h4>\n\n<div class=\"brush: r\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">0</span>\n<span class=\"n\">f</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">1</span>\n  <span class=\"n\">x</span> <span class=\"o\">&lt;&lt;-</span> <span class=\"m\">2</span>\n  <span class=\"n\">x</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">f</span><span class=\"p\">()</span> <span class=\"c1\"># 1</span>\n<span class=\"n\">x</span>   <span class=\"c1\"># 2</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><code>&lt;&lt;-</code> is the &ldquo;super assignment&rdquo; operator. It skips the current environment and then searches the chain of enclosing environments until it finds a variable to update. If no variable is found, then a new mapping is created at the top environment.</p>\n\n<p>In the above program, we define <code>x</code> to be <code>0</code> at the top level, and then define the function <code>f</code>. When we call <code>f</code> on line 7, it assigns <code>1</code> to <code>x</code> on line 3, which creates a mapping in the local environment. On line 4, the super assignment skips the mapping in the local environment and instead updates the mapping created on line 1. Next, <code>f</code> returns <code>x</code>, which is looked up from the local environment and has value <code>1</code>. Finally, line 8 looks up <code>x</code> from the top level environment, which has value <code>2</code>.</p>\n\n<h4 id=\"evaluating-arbitrary-code\">Evaluating arbitrary code</h4>\n\n<div class=\"brush: r\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">1</span>\n<span class=\"n\">f</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nf\">eval</span><span class=\"p\">(</span><span class=\"nf\">parse</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">))</span>\n  <span class=\"n\">x</span>\n<span class=\"p\">}</span>\n<span class=\"n\">g</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">2</span>\n  <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"s\">\"x &lt;- 0\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">g</span><span class=\"p\">()</span> <span class=\"c1\"># 0</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>R has a mechanism for converting an arbitrary string to code and then executing it. On line 3, we parse and evaluate the argument <code>t</code>, which happens to be the string <code>\"x &lt;- 0\"</code>. Then, when line 4 executes, the lookup of <code>x</code> returns <code>0</code>.</p>\n\n<h4 id=\"simulating-dynamic-scope\">Simulating dynamic scope</h4>\n\n<div class=\"brush: r\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span>\n<span class=\"normal\">9</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">1</span>\n<span class=\"n\">f</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"s\">\"x\"</span><span class=\"p\">,</span> <span class=\"n\">envir</span> <span class=\"o\">=</span> <span class=\"nf\">parent.frame</span><span class=\"p\">())</span>\n<span class=\"p\">}</span>\n<span class=\"n\">g</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">2</span>\n  <span class=\"nf\">f</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">g</span><span class=\"p\">()</span> <span class=\"c1\"># 2</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>On line 3, we perform an explicit variable lookup for <code>x</code>, but we do so in the environment <code>parent.frame()</code>, which refers to the calling function&rsquo;s environment, in this case, <code>g</code>&rsquo;s environment.. Therefore, the lookup returns <code>2</code>.</p>\n\n<p>Note that R has a similarly named function, <code>parent.env(e)</code> which returns the <em>enclosing environment</em> of the given environment <code>e</code>.</p>\n\n<h4 id=\"constructing-an-arbitrary-environment\">Constructing an arbitrary environment</h4>\n\n<div class=\"brush: r\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">1</span>\n<span class=\"n\">f</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">e</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">new.env</span><span class=\"p\">()</span>\n  <span class=\"n\">e</span><span class=\"o\">$</span><span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">3</span>\n  <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"s\">\"x\"</span><span class=\"p\">,</span> <span class=\"n\">envir</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"n\">g</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">2</span>\n  <span class=\"nf\">f</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">g</span><span class=\"p\">()</span> <span class=\"c1\"># 3</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>When <code>f</code> is called, it constructs a new environment, <code>e</code>, which is initially empty. (By default, its enclosing environment is the current environment, which is <code>f</code>&rsquo;s.) Next, on line 4, it directly adds a mapping to that environment, assigning <code>3</code> to <code>x</code>. Then, on line 5, the lookup is explicitly done in environment <code>e</code>, so <code>f</code> returns <code>3</code>.</p>\n\n<h4 id=\"deleting-mappings\">Deleting mappings</h4>\n\n<div class=\"brush: r\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">1</span>\n<span class=\"n\">f</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nf\">rm</span><span class=\"p\">(</span><span class=\"s\">\"x\"</span><span class=\"p\">,</span> <span class=\"n\">envir</span> <span class=\"o\">=</span> <span class=\"nf\">parent.env</span><span class=\"p\">(</span><span class=\"nf\">environment</span><span class=\"p\">()))</span>\n  <span class=\"n\">x</span>\n<span class=\"p\">}</span>\n<span class=\"n\">g</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">2</span>\n  <span class=\"nf\">f</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">g</span><span class=\"p\">()</span> <span class=\"c1\"># Error in f() : object &#39;x&#39; not found</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Not only is it possible to dynamically add and modify mappings in R, but it is also possible to <em>delete</em> mappings. This is what line 3 does: it explicitly removes the mapping for <code>x</code> from the enclosing environment of the current environment. In other words, the definition on line 1 is deleted. Therefore, when <code>f</code> is called, the lookup of <code>x</code> fails and an error is raised.</p>\n\n<h4 id=\"infinite-loop-during-variable-lookup\">Infinite loop during variable lookup</h4>\n\n<div class=\"brush: r\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">enva</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">new.env</span><span class=\"p\">()</span>\n<span class=\"n\">envb</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">new.env</span><span class=\"p\">()</span>\n<span class=\"nf\">parent.env</span><span class=\"p\">(</span><span class=\"n\">enva</span><span class=\"p\">)</span> <span class=\"o\">&lt;-</span> <span class=\"n\">envb</span>\n<span class=\"nf\">parent.env</span><span class=\"p\">(</span><span class=\"n\">envb</span><span class=\"p\">)</span> <span class=\"o\">&lt;-</span> <span class=\"n\">enva</span>\n<span class=\"n\">f</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"n\">x</span>\n<span class=\"nf\">environment</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"o\">&lt;-</span> <span class=\"n\">enva</span>\n<span class=\"nf\">f</span><span class=\"p\">()</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>In this final example, manipulation of environments allows us to create a function where variable lookup results in an infinite loop.</p>\n\n<p>On lines 1 and 2, we create new, empty environments. Both have the same enclosing environment, which is the top-level environment. However, on lines 3 and 4, we modify their enclosing environments to create a cycle: <code>enva</code>&rsquo;s enclosing environment is <code>envb</code>, and <code>envb</code>&rsquo;s enclosing environment is <code>enva</code>.</p>\n\n<p>On line 5, we define a function with a free variable, <code>x</code>, but on line 6, we set <code>f</code>&rsquo;s environment to be <code>enva</code>. Finally, we call <code>f</code>.</p>\n\n<p>When the body of <code>f</code> is evaluated, it needs to look up <code>x</code>. Lookup starts in <code>f</code>&rsquo;s environment, which we set to be <code>enva</code>. Since no mapping for <code>x</code> is found, lookup continues in <code>enva</code>&rsquo;s enclosing environment, which is <code>envb</code>. However, <code>envb</code> is also empty, so lookup continues in its enclosing environment, which is <code>enva</code>, and now lookup results in an infinite loop.</p>\n\n<h3 id=\"an-intuition-for-scoping-in-r\">An intuition for scoping in R</h3>\n\n<p>Some of the above examples appear to demonstrate dynamic scoping. Recall two of our examples:</p>\n\n<div class=\"brush: r\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"c1\"># example 1</span>\n<span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">1</span>\n<span class=\"n\">f</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">g</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"n\">x</span>\n  <span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">2</span>\n  <span class=\"nf\">g</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">f</span><span class=\"p\">()</span> <span class=\"c1\"># 2</span>\n\n<span class=\"c1\"># example 2</span>\n<span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">1</span>\n<span class=\"n\">f</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nf\">if </span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">2</span>\n  <span class=\"n\">x</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"kc\">TRUE</span><span class=\"p\">)</span>  <span class=\"c1\"># 2</span>\n<span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"kc\">FALSE</span><span class=\"p\">)</span> <span class=\"c1\"># 1</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>It seems that <code>x</code> takes on the value of the last assignment, but we know this is not the case, from the first example. This is also not how R is implemented. What&rsquo;s missing from our intuition?</p>\n\n<p>The key insight is that R is <em>function scoped</em>. In R, each function has an associated environment, and that environment implements a scope. In general, only a function definition can create a scope. Therefore, the assignment operator <code>&lt;-</code> <em>does not create a new scope</em>, and it is more useful to think of it as a mutation <em>on the current environment</em>. (In contrast, in most languages, a variable binding or definition creates a new scope, and an assignment mutates that variable.)</p>\n\n<p>In a sense, it might be more accurate to say that R <em>environments</em> are lexically scoped, variables are scoped to functions (but a reference can occur syntactically before a definition), and variable assignment is an update to the environment.</p>\n\n<h2 id=\"discussion\">Discussion</h2>\n\n<p>All of this might make you a little uncomfortable, and uncertain about R&rsquo;s scoping rules.</p>\n\n<p>On one hand, R passes the first example program as a lexically scoped language, the implementation of closures and variable lookup imply &ldquo;lexical-like&rdquo; behaviour, and the creators have confirmed that lexical scoping was the intent.</p>\n\n<p>On the other hand, variable lookup depends on the run-time state of the program, and variable bindings cannot be resolved statically. Some of the examples even resemble dynamic scoping, where a free variable takes the value of the most recent assignment&mdash;but this is not consistent with R&rsquo;s behaviour in other examples. Furthermore, the dynamic nature of R and its reflection and metaprogramming capabilities allow programmers to completely circumvent lexical scoping.</p>\n\n<p>This ambiguity shows up in a paper,<sup><a href=\"#2019-09-10-scoping-in-r-footnote-3-definition\" name=\"2019-09-10-scoping-in-r-footnote-3-return\">3</a></sup> where the authors write:</p>\n\n<blockquote>\n <p>Furthermore, because variable scoping in R is dynamic and can be modified at the language level [&hellip;] it cannot be trivially guaranteed that <code>x</code> is going to point to the same data structure throughout the entire execution of the loop.</p></blockquote>\n\n<p>It is true that a variable <code>x</code> may not point to the same data structure during the execution of a loop. It is true that scoping in R can be modified at the language level.</p>\n\n<p>It is true that variable <em>lookup</em> is dynamic, as it is performed at run time and depends on the run-time program state. If that is your definition of <em>dynamic scope</em>, then it would be fair to say that R is dynamically scoped.</p>\n\n<p>But if your definition of <em>dynamic scope</em> is &ldquo;a variable is bound to the most recent assignment during the program&rsquo;s execution,&rdquo; then it is not correct to say R is dynamically scoped.</p>\n\n<p>I think we have this ambiguity because <em>scope</em> (the places in a program where a variable can be referenced) and <em>variable lookup</em> or <em>name resolution</em> (determining which binding or definition a name refers to) are often considered together. For most lexically scoped languages, name resolution can be done at compile time. For most dynamically scoped languages, name resolution must be done at run time. R is lexically scoped, but must perform name resolution at run time.</p>\n\n<p>Personally, I prefer the definition of <em>scope</em> that treats name resolution as an orthogonal issue. I think it is more useful to keep the two issues separate. In addition, I think it is confusing and unhelpful to say that R is <em>both</em> lexically and dynamically scoped, or that R is <em>neither</em> lexically and dynamically scoped.</p>\n\n<p>I think it is more helpful to treat R as a lexically scoped language (with certain exceptions and surprises) than as a dynamically scoped language&mdash;when I read and write R code, I find it more convenient to think about nested function definitions and free variables in terms of lexical scoping rules. And I think that it is more accurate, based on the design and implementation, to classify R as a lexically scoped language.</p>\n\n<p>Regardless, it is very easy to miscommunicate, so I think it&rsquo;s important to be very clear and make sure you and your audience know what definitions of scoping you&rsquo;re using!</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>This entire adventure started when we were working on a paper,<sup><a href=\"#2019-09-10-scoping-in-r-footnote-4-definition\" name=\"2019-09-10-scoping-in-r-footnote-4-return\">4</a></sup> and asked each other, is R lexically or dynamically scoped? Eventually, it became apparent that we had different definitions of lexical and dynamic scope, so of course we were unable to agree on an answer!</p>\n\n<p>This got me interested in exploring definitions of scope, the history of lexical scope, and how R fits with traditional definitions of lexical scope. The result was this mini blog series.</p>\n\n<p>To summarize, I would say that <em>scope</em> refers to the places in a program where a variable is visible and can be referenced. Under <em>lexical scoping</em>, the scope of a variable is determined by the lexical (<em>i.e.</em>, textual) structure of a program. Under <em>dynamic scoping</em>, a variable is bound to the most recent value assigned to that variable, <em>i.e.</em>, the most recent assignment during the program&rsquo;s execution.</p>\n\n<p>I would say that R <em>aims</em> to be lexically scoped&mdash;it was part of the design and implementation, but certain features make the situation more complicated. In particular, variables are function scoped, definitions do not introduce new scopes, and variable lookup is performed at run time. Furthermore, the dynamic nature of R and its metaprogramming capabilities allow programmers to completely circumvent lexical scoping.</p>\n\n<p>Finally, there are some definitions of lexical and dynamic scope that also consider variable lookup. Under these definitions, R might be considered a dynamically scoped language, since variable lookup happens at run time. Therefore, it is important to be precise about your definitions!</p>\n\n<p>If you want more content about R and scoping, the <a href=\"/blog/2019/09/10/four-kinds-of-scoping-in-r/\">third and final part</a> of this blog series is already published. In it, I walk through four different examples of using metaprogramming to simulate different scoping disciplines in R.</p>\n\n<p><strong>Edited 2020/02/21:</strong> For another discussion on R environments and lookups, (and also packages and namespaces, which I did not cover in my post), <a href=\"http://blog.obeautifulcode.com/R/How-R-Searches-And-Finds-Stuff/\">this blog post</a> has some nice examples and diagrams.</p>\n\n<p><em>I would like to thank Sam Caldwell, Guido Chari, Oli Flückiger, Aviral Goel, Ben Greenman, Jakob Hain, Jan Ječmen, Hugo Musso Gualandi, Artem Pelenitsyn, and Jan Vitek for their comments, feedback, and discussions that have greatly improved and shaped this blog post.</em></p>\n\n<p><em>If you liked this post, you may also be interested in the following Twitter threads about R: <a href=\"https://twitter.com/mhyee/status/1063983175163158531\">one</a>, <a href=\"https://twitter.com/mhyee/status/1067818720532316166\">two</a> and <a href=\"https://twitter.com/mhyee/status/1074744049951739905\">three</a>.</em></p>\n\n<hr />\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n <ol>\n  <li id=\"2019-09-10-scoping-in-r-footnote-1-definition\" class=\"footnote-definition\">\n   <p>F. Morandat, B. Hill, L. Osvald, J. Vitek. &ldquo;Evaluating the Design of the R Language,&rdquo; in <em>Proceedings of the European Conference on Object-Oriented Programming (ECOOP)</em>, 2012. [<a href=\"https://doi.org/10.1007/978-3-642-31057-7_6\">DOI</a>][<a href=\"http://janvitek.org/pubs/ecoop12.pdf\">Available online</a>]&nbsp;<a href=\"#2019-09-10-scoping-in-r-footnote-1-return\">↩</a></p></li>\n  <li id=\"2019-09-10-scoping-in-r-footnote-2-definition\" class=\"footnote-definition\">\n   <p>R. Gentleman and R. Ihaka. &ldquo;Lexical Scope and Statistical Computing&rdquo;, <em>Journal of Computational and Graphical Statistics</em>, vol. 9, no. 3, 2000. [<a href=\"https://doi.org/10.1080/10618600.2000.10474895\">DOI</a>][<a href=\"https://www.stat.auckland.ac.nz/~ihaka/downloads/lexical.pdf\">Available online</a>]&nbsp;<a href=\"#2019-09-10-scoping-in-r-footnote-2-return\">↩</a></p></li>\n  <li id=\"2019-09-10-scoping-in-r-footnote-3-definition\" class=\"footnote-definition\">\n   <p>L. Stadler, A. Welc, C. Humer, and M. Jordan. &ldquo;Optimizing R Language Execution via Aggressive Speculation,&rdquo; in <em>Proceedings of the Symposium on Dynamic Languages (DLS)</em>, 2016. [<a href=\"https://doi.org/10.1145/2989225.2989236\">DOI</a>]&nbsp;<a href=\"#2019-09-10-scoping-in-r-footnote-3-return\">↩</a></p></li>\n  <li id=\"2019-09-10-scoping-in-r-footnote-4-definition\" class=\"footnote-definition\">\n   <p>O. Flückiger, G. Chari, J. Ječmen, M.-H. Yee, J. Hain, and J. Vitek. &ldquo;R Melts Brains: An IR for First-Class Environments and Lazy Effectful Arguments,&rdquo; in <em>Proceedings of the Symposium on Dynamic Languages (DLS)</em>, 2019. To appear. [<a href=\"http://janvitek.org/pubs/dls19.pdf\">Available online</a>]&nbsp;<a href=\"#2019-09-10-scoping-in-r-footnote-4-return\">↩</a></p></li></ol></div>")) ((? . 39) f post (u . "PLISS: Learn About PL Implementation in a Castle") (? . 39) 1731904015 (p+ #"/home/runner/work/website/website/blog/2019/03/09/pliss-learn-about-pl-implementation-in-a-castle/index.html" . unix) (u . "/blog/2019/03/09/pliss-learn-about-pl-implementation-in-a-castle/") (u . "2019-03-09T14:40:16") (? . 54) (? . 31) (c (u . "event") c (u . "lectures") c (u . "castle") c (u . "language implementation") c (u . "Author: Alexi Turcotte")) (u . "\n<p>We love programming languages (PLs), and we should all be in on the ins and outs of implementing them. If you&rsquo;re interested in learning the tricks of the trade of PL design and implementation, what better opportunity than the second Programming Languages Implementation Summer School (<a href=\"https://pliss2019.github.io/\">PLISS</a> for short).</p>\n\n<p>PLISS will be held from May 19th to 24th 2019, and the deadline to express your interest is <em>March 29th, 2019</em> at <em>17:00 GMT</em>. More details can be found <a href=\"https://pliss2019.github.io/registration.html\">here</a>.</p>") #t (u . "\n<p>We love programming languages (PLs), and we should all be in on the ins and outs of implementing them. If you&rsquo;re interested in learning the tricks of the trade of PL design and implementation, what better opportunity than the second Programming Languages Implementation Summer School (<a href=\"https://pliss2019.github.io/\">PLISS</a> for short).</p>\n\n<p>PLISS will be held from May 19th to 24th 2019, and the deadline to express your interest is <em>March 29th, 2019</em> at <em>17:00 GMT</em>. More details can be found <a href=\"https://pliss2019.github.io/registration.html\">here</a>.</p>\n<!-- more-->\n\n<p><img src=\"/img/pliss_summer_school_2017_logo.png\" alt=\"PLISS logo\" /></p>\n\n<p>The school will feature <a href=\"https://pliss2019.github.io/speakers.html\">ten speakers</a> from both academia and industry, each well-versed in the practical side of programming languages. The lectures cover current research as well as future trends in programming language design and implementation, including:</p>\n\n<ul>\n <li>Developing Security-Aware Languages with Cristina Cifuentes;</li>\n <li>Semantics-First Language Design with Sylvan Clebsch;</li>\n <li>Compiler Design Patterns for Machine Learning by Albert Cohen;</li>\n <li>Design and Analysis of Configuration Languages by Arjun Guha;</li>\n <li>A Survey of V8 and WebAssembly by Ben L. Titzer;</li>\n <li>Crafting User-Friendly Compilers by Nicholas Matsakis;</li>\n <li>Static Program Analysis by Anders Møller;</li>\n <li>How Industry Approaches Language and Compiler Design by Joe Pamer;</li>\n <li>What an End to Non-Volatile RAM Means for Researchers by Mario Wolczko.</li></ul>\n\n<p>Besides attending lectures, students will also be able to get to know the speakers and attendees and think of new research problems. A week-long stay in beautiful Bertinoro, Italy is an ideal setting for socializing with other PL enthusiasts and building lasting relationships.</p>\n\n<p>If I may, I attended the first PLISS in 2017 and can&rsquo;t recommend it enough. The atmosphere at summer schools is truly unparalleled, and I made friends there that have stood the test of time. For what it&rsquo;s worth to any prospective graduate students, PLISS is also where I met my PhD advisor. Students will be surprised at how many faces they recognize at future conferences, and in a sense summer schools are nice introduction to the research community. You can read another attendee&rsquo;s testimonial <a href=\"http://prl.ccs.neu.edu/blog/2017/06/05/report-pliss-2017/\">here</a>.</p>\n\n<p>More information can be found at:</p>\n\n<p><a href=\"https://pliss2019.github.io\">https://pliss2019.github.io</a></p>\n\n<p>(No, really, it&rsquo;s in a castle. Look at the pictures.)</p>")) ((? . 40) f post (u . "NEPLS on May 31st at UMass, Amherst") (? . 40) 1731904015 (p+ #"/home/runner/work/website/website/blog/2016/05/03/nepls-on-may-31st-at-umass-amherst/index.html" . unix) (u . "/blog/2016/05/03/nepls-on-may-31st-at-umass-amherst/") (u . "2016-05-03T08:21:07") (? . 67) (? . 69) (c (u . "NEPLS") c (u . "conference") c (u . "Author: Gabriel Scherer")) (u . "\n<p>It is my pleasure to relay the following announcement for the next edition of the New England Programming Language Seminer (NEPLS), to be held on Tuesday May 31st at UMass, Amherst, organized by Arjun Guha. Venez nombreux!</p>") #t (u . "\n<p>It is my pleasure to relay the following announcement for the next edition of the New England Programming Language Seminer (NEPLS), to be held on Tuesday May 31st at UMass, Amherst, organized by Arjun Guha. Venez nombreux!</p>\n<!-- more-->\n\n<blockquote>\n <p>The next New England Programming Languages and Systems Symposium will take place on Tuesday, May 31st 2016 at University of Massachusetts, Amherst. Please mark it in your calendars!</p>\n <p>The speaker selection committee solicits talks for this meeting. To propose yourself or someone else, send a title, list of authors, and a brief description. You may provide UP TO ONE PAGE of description, but you can keep it as short as a paragraph. We particularly invite talks by researchers from outside the area who are visiting on the date of the NEPLS meeting.</p>\n <p>Talks can vary in length. Though 30-minute conference-style slots are traditional, speakers may request slots of as little as 5 minutes; we encourage the shorter formats. This variety permits the presentation of smaller results, preliminary work, progress reports on ongoing projects (such as language standards and compiler toolkits), and updates to past presentations. In general, NEPLS talks need not sound like conference presentations.</p>\n <p>The submission deadline is Tuesday, May 17th. Send your proposal to talks@nepls.org.</p>\n <p>More details about NEPLS are available on the NEPLS webpage:</p>\n <p> http://www.nepls.org/</p></blockquote>\n\n<p>I&rsquo;m personally fond of such regional events, which is a great time to learn about the research around us in a less formal and exhausting setting than a 200-attendees conference.</p>\n\n<p>If you are in the area, please consider applying to talk about your work. If one of your colleague is working on something you find exciting, please invite them to apply!</p>")) ((? . 41) f post (u . "Understanding Constructive Galois Connections") (? . 41) 1731904015 (p+ #"/home/runner/work/website/website/blog/2016/11/16/understanding-constructive-galois-connections/index.html" . unix) (u . "/blog/2016/11/16/understanding-constructive-galois-connections/") (u . "2016-11-16T00:00:00") (? . 13) (? . 42) (c (u . "icfp") c (u . "galois connection") c (u . "adjunction") c (u . "category theory") c (u . "math") c (u . "Author: Max New")) (u . "\n<p>One of my favorite papers at ICFP 2016 (in lovely <a href=\"http://conf.researchr.org/home/icfp-2016\">Nara, Japan</a>) was <a href=\"https://arxiv.org/abs/1511.06965\">Constructive Galois Connections: Taming the Galois Connection Framework for Mechanized Metatheory</a> by <a href=\"http://david.darais.com/\">David Darais</a> and <a href=\"https://www.cs.umd.edu/~dvanhorn/\">David Van Horn</a>. The central technical result is quite interesting, but a little intimidating, so I&rsquo;d like to share a &ldquo;de-generalization&rdquo; of the result that I found helpful to understand.</p>") #t (u . "\n<p>One of my favorite papers at ICFP 2016 (in lovely <a href=\"http://conf.researchr.org/home/icfp-2016\">Nara, Japan</a>) was <a href=\"https://arxiv.org/abs/1511.06965\">Constructive Galois Connections: Taming the Galois Connection Framework for Mechanized Metatheory</a> by <a href=\"http://david.darais.com/\">David Darais</a> and <a href=\"https://www.cs.umd.edu/~dvanhorn/\">David Van Horn</a>. The central technical result is quite interesting, but a little intimidating, so I&rsquo;d like to share a &ldquo;de-generalization&rdquo; of the result that I found helpful to understand.</p>\n<!-- more-->\n\n<h1 id=\"history\">History</h1>\n\n<p>I won&rsquo;t go into much of the details of the paper, because I think it is quite well written, but here&rsquo;s a short overview. The paper is about how to do verified static analysis while taking advantage of the calculational approach of <a href=\"http://www.di.ens.fr/~cousot/COUSOTpapers/Marktoberdorf98.shtml\">Abstract Interpretation</a>. The problem is that the Galois connections people use for abstract domains are not always computable. Darais and Van Horn show however that there is a very useful class of Galois connections that is computable, and they show how they can exploit this to write verified static analyses that more closely follow the &ldquo;on-paper&rdquo; proofs, and offload much of the details to the proof assistant as mere calculation.</p>\n\n<p>David Darais told me about these results when we were at POPL 2016 (in less lovely but much more convenient <a href=\"http://conf.researchr.org/home/POPL-2016\">St. Petersburg, Florida</a>) and in particular about the central theorem of the paper, which shows that two different classes of Galois connections they define, &ldquo;Kleisli&rdquo; and &ldquo;Constructive&rdquo; Galois connections, are actually constructively equivalent. I was really surprised by the result when he explained it to me, and so I hoped to find if there was a known generalization of the result for adjunctions of categories, rather than Galois connections of posets.</p>\n\n<p>Eventually, my usual trawling of <a href=\"http://mathoverflow.net/\">Mathoverflow</a> and <a href=\"https://ncatlab.org/nlab/show/HomePage\">nlab</a> led me to a <a href=\"https://ncatlab.org/nlab/show/Cauchy+complete+category#InOrdinaryCatTheoryByProfunctors\">not-quite generalization to categories</a> and interestingly a <a href=\"http://mathoverflow.net/questions/222516/duality-between-compactness-and-hausdorffness/222524#222524\"><em>de</em>-generalization to sets</a> that helped me immensely to understand the theorem.</p>\n\n<p>Since I know that the original theorem is a bit technical, I&rsquo;ll explain the de-generalization to sets here, which I hope will help to understand their theorem.</p>\n\n<h1 id=\"functions-and-relations\">Functions and Relations</h1>\n\n<p>Let&rsquo;s start with the &ldquo;Kleisli Arrows&rdquo;, which are monotone functions \\(f : A \\to P(B) \\) where \\(A,B \\) are posets and \\(P(B)\\) represents the poset of downward-closed subsets of \\(B \\).</p>\n\n<p>Now to &ldquo;de-posetize&rdquo; this, we&rsquo;ll take sets \\(X,Y \\) and let \\(P(Y) \\) mean the powerset of \\(Y\\), that is the set of all subsets of \\(Y \\). Then a function \\(f : X \\to P(Y) \\) is actually exactly the same thing as a relation \\(R \\subset X \\times Y \\). From \\(f :\nX \\to P(Y) \\) we can take \\(R = \\{(x,y) \\in X\\times Y | y\\in f(x)\\} \\) and from \\(R\\) we can construct \\(f(x) = \\{y \\in Y | (x,y) \\in R \\}\\).</p>\n\n<p>Furthermore, the &ldquo;Kleisli composition&rdquo; is the same as composition of relations. If \\(R \\subset X \\times Y \\) and \\(Q \\subset Y \\times Z\n\\), then the composition is defined as \\[ (R;Q) = \\{(x,z) \\in X \\times Z | \\exists y\\in Y. (x,y) \\in R \\land (y,z) \\in Q\\}\\]</p>\n\n<p>Then the next thing we need to understand is what is the de-generalization of &ldquo;Kleisli Galois connection&rdquo;? Well, Galois connections are an instance of what&rsquo;s called an adjunction in category theory, which is usually formulated in terms of categories, functors and natural transformations. However, you can interpret the definition of adjunction in any &ldquo;universe&rdquo; that acts like the universe of categories, functors and natural transformations and it turns out we have such a universe. The universe I&rsquo;m talking about is called \\(\\texttt{Rel}\\), and it consists of sets, relations between sets and <em>inclusion of relations</em>, i.e. that one relation is a subset of another.</p>\n\n<p>Then what does it mean to have an adjunction between two relations \\(R \\subset X \\times Y, Q \\subset Y \\times X\\)? Taking apart the definition it just means</p>\n\n<p>\\begin{align}\\tag{1}  \\Delta(X) \\subset R;Q \\end{align} \\begin{align}\\tag{2}  Q;R \\subset \\Delta(Y) \\end{align}</p>\n\n<p>where \\(\\Delta \\) means the <em>diagonal</em>, or equality relation on the set:</p>\n\n<p>\\[\\Delta(X) = \\{(x_1,x_2) \\in X | x_1 = x_2 \\} \\]</p>\n\n<p>So we just need to unravel what (1) and (2) mean above. Unwinding (1), we get that for any \\(x \\in X\\), there exists a \\(y \\in Y \\) such that \\((x,y) \\in R \\) and \\((y,x) \\in Q\\). This tells us for one that \\(R \\) is a &ldquo;right-total&rdquo; relation and \\(Q \\) is a &ldquo;left-total&rdquo; relation. Every \\(x \\) is related to some \\( y\\) by \\( R \\) and \\( Q\\).</p>\n\n<p>If we unwind (2), we get that for any \\(y,y' \\in Y\\) if there&rsquo;s some \\(x \\in X \\) such that \\((x,y) \\in R \\) and \\((y',x) \\in Q \\) then actually \\(y = y')\\). This one is a bit more mysterious, but first, let&rsquo;s see what this tells us about the relationship between \\(R\\) and \\(Q \\).</p>\n\n<p>If \\((x,y) \\in R \\), then by (1) there&rsquo;s some \\(y' \\in Y\\) so that \\((x,y') \\in R \\) and \\((y',x) \\in Q\\). Then, by (2) we know that \\(y = y'\\), so we&rsquo;ve shown that if \\((x,y) \\in R \\) then \\((y,x)\n\\in Q\\). Then a completely symmetric argument shows that if \\((y,x)\n\\in Q \\) then \\((x,y)\\in R\\)! So we&rsquo;ve discovered that actually \\(Q \\) is just the opposite relation of \\(R \\).</p>\n\n<p>Then if we look at (2) again but replace the \\(Q\\)&rsquo;s by flipped \\(R\\)&rsquo;s we get that for any \\(y,y' \\in Y\\), if there&rsquo;s some \\(x\n\\in X\\) such that \\((x,y) \\in R \\) and \\((x,y')\\in R\\) then \\(y\n= y'\\), which tells us that \\(R \\) is a partial function, i.e., that every \\(x \\) is related to at most one \\(y \\) by \\(R \\).</p>\n\n<p>You may recognize it now, our \\(R \\subset X \\times Y \\) is just a function, and saying \\(R, Q\\) are adjoint is exactly the same as saying that \\(Q = R^{\\text{op}}\\) and \\(R \\) is a function. Adjunctions are so pervasive you saw them back in pre-algebra!</p>\n\n<h1 id=\"constructive-galois-connections\">Constructive Galois Connections</h1>\n\n<p>Back to constructive Galois connections, I hope if you read the paper you can see that their theorem is a generalization of the above argument, where instead of relations we have &ldquo;monotone relations&rdquo;, i.e., downward-closed \\(R \\subset A^{\\text{op}} \\times B \\). Then you can interpret the definition of adjunction in that universe and get that it&rsquo;s the same as a Kleisli Galois connection and that a similar argument to the above shows that the &ldquo;left adjoint&rdquo; is represented by a monotone function \\(f : A \\to B \\):</p>\n\n<p>\\[R = \\{(x,y) | y \\le f(x) \\} \\]</p>\n\n<p>Which shows that every Kleisli Galois connection is actually a constructive Galois connection! The details are in their paper, and I hope they are easier to follow now.</p>\n\n<p>In fact, we get a little extra from what&rsquo;s mentioned in their paper, which is that the &ldquo;right adjoint&rdquo; is represented by \\(f \\) as well but in the opposite way:</p>\n\n<p>\\[Q = \\{(y,x) | f(x) \\le y \\}\\]</p>\n\n<h1 id=\"category-theory-post-scriptum\">Category Theory Post Scriptum</h1>\n\n<p>If you&rsquo;re interested in Category theory, here&rsquo;s a more technical addendum.</p>\n\n<p>Remembering from Category Theory class, sets are just posets where objects are only less than themselves and posets are (basically) categories where there is at most 1 arrow between objects, so we might naturally ask, does this theorem extend to categories?</p>\n\n<p>Well, first we need a generalization from relations to downward-closed relations to what are called <a href=\"https://ncatlab.org/nlab/show/profunctor\">distributors or profunctors</a>. Then we can also generalize inclusion of relations to morphisms of distributors and ask, is every left adjoint distributor represented by a functor?</p>\n\n<p>The answer is, at least in full generality, no! For it to be true we need a special property on the codomain of the left adjoint \\(R : C\n\\not\\to D \\), which is called (for mind-boggling reasons) <a href=\"https://ncatlab.org/nlab/show/Cauchy+complete+category#InOrdinaryCatTheoryByProfunctors\">Cauchy completeness</a>. Viewing sets and posets as special categories, it turns out that they always have this property, and that&rsquo;s why the theorem worked out for those adjunctions.</p>")) ((? . 30) f post (u . "Datalog for Static Analysis") (? . 30) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/02/21/datalog-for-static-analysis/index.html" . unix) (u . "/blog/2017/02/21/datalog-for-static-analysis/") (u . "2017-02-21T12:58:27") (? . 29) (? . 25) (c (u . "HOPL") c (u . "Author: Ben Greenman")) (? . 5) #t (u . "<!-- more-->\n\n<p>Datalog is an old DSL that frequently appears in work on static analysis. This edition of <a href=\"/blog/2017/02/15/introducing-hopl-2017/\">HOPL 2017</a> explores the origins of Datalog in general, its early use in program analysis, and why Datalog remains a useful tool.</p>\n\n<p>Full notes:</p>\n\n<ul>\n <li><a href=\"/blog/static/datalog-for-static-analysis.pdf\">Local Copy</a></li>\n <li><a href=\"https://github.com/nuprl/hopl-s2017/tree/master/datalog-for-static-analysis\">Source of Truth</a></li></ul>\n\n<hr />\n\n<p>Datalog as a language was introduced by 1978 (its semantic foundations date back to 1976). It is <em>predicate logic</em> as a database query language. The traditional view of a Datalog program is a <em>time invariant</em> transformation over the <em>time varying</em> data stored in an external database.</p>\n\n<p>In the early 1990&rsquo;s, Uwe Aβmann designed a graph rewriting systems (EARS) that could:</p>\n\n<ol>\n <li>Uniformly express various problems in static analysis</li>\n <li>Systematically derive efficient solutions to such problems.</li></ol>\n\n<p>(Prior work had derived the same solutions with ad-hoc methods.) Aβmann&rsquo;s system is equivalent to Datalog.</p>\n\n<p>In 1993, Reps used the \n <tt>CORAL</tt> deductive database (an implementation of Datalog) to derive an on-demand (read: lazy) implementation of program slicing from a <em>specification</em> of the slicing problem.</p>\n\n<p>Both Aβmann&rsquo;s and Reps work appeared in 1994. This was the first time Datalog had been used to implement a static analysis.</p>\n\n<p>Researchers continue to use Datalog because:</p>\n\n<ul>\n <li>predicate logic (specifically: Horn clauses without function symbols or negation)  is useful for expressing recursive relations &hellip; and static analyses are all about recursive relations</li>\n <li>the language separates <em>specifications</em> from their <em>implementation</em></li>\n <li>there are many techniques for efficiently serving a Datalog query</li>\n <li>these techniques have been implemented in <a href=\"https://developer.logicblox.com/wp-content/uploads/2016/01/logicblox-sigmod15.pdf\">at least one</a>  commercial Datalog engine</li></ul>\n\n<p>For an excellent description of how Datalog can benefit static analysis, see the introduction to <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.648.1834&amp;rep=rep1&amp;type=pdf\">Rep&rsquo;s paper</a>.</p>")) ((? . 43) f post (u . "Measuring the submission/review balance") (? . 43) 1731904015 (p+ #"/home/runner/work/website/website/blog/2016/12/17/measuring-the-submission-review-balance/index.html" . unix) (u . "/blog/2016/12/17/measuring-the-submission-review-balance/") (u . "2016-12-17T16:33:10") (? . 36) (? . 61) (c (u . "Author: Gabriel Scherer")) (u . "\n<p>How do researchers know whether they are doing &ldquo;enough&rdquo; or &ldquo;too many&rdquo; reviews? A measurable goal is to be review-neutral: to have demanded, through our submissions, as many reviews as we have produced as reviewers.</p>") #t (u . "\n<p>How do researchers know whether they are doing &ldquo;enough&rdquo; or &ldquo;too many&rdquo; reviews? A measurable goal is to be review-neutral: to have demanded, through our submissions, as many reviews as we have produced as reviewers.</p>\n<!-- more-->\n\n<h3 id=\"reviewing-is-good\">Reviewing is good</h3>\n\n<p>I like to review academic papers. It is a very rewarding activity in many different ways. One gets to serve the academic community, helping it function smoothly. One gets a chance at acquiring a much better understanding of someone else&rsquo;s work than idle paper-skimming allows. One gets to send feedback to our colleagues and help them improve their work and its presentation &mdash; it is also an essential way in which we can participate to the formation of student researchers all over the world. Finally, doing reviews helped me develop the skill the judge someone else&rsquo;s work and of forcing oneself to come up with a decisive opinion &mdash; it is surprisingly difficult and only comes with training.</p>\n\n<p>Doing reviews is also fairly time-consuming. I noticed that the time I spend on each review is generally stable (excursions into previous or related work excluded): around one day and a half for conference reviews, and at least twice more for journal reviews &mdash; I&rsquo;m sure other people have wildly different figures, but I would expect it to be a noticeable time commitment in any case. (Workshop reviews are much easier, at least for the formats I have seen of 2-page extended abstracts, I&rsquo;d say one hour per review.)</p>\n\n<h3 id=\"how-many-reviews\">How many reviews?</h3>\n\n<p>Because it is so time-consuming, deciding whether to say &ldquo;yes&rdquo; or &ldquo;no&rdquo; to invitations to review a new paper is not easy: in general I want to say &ldquo;yes&rdquo; (unless I can tell that I will not enjoy reading the paper at all), but it is not reasonable to say &ldquo;yes&rdquo; all the time, because I also need to spend time on other things. When should I say &ldquo;no&rdquo; because I have done &ldquo;too many&rdquo; reviews already?</p>\n\n<p>We can count the number of reviews that we have done, and we can also estimate the number of reviews that we have demanded of others through our submissions. A natural goal for researchers is to produce at least as many reviews as they demand; if everyone reached this goal, the peer-review system would be at equilibrium without imposing too much of a workload on anyone.</p>\n\n<p>To estimate the number of reviews a researcher demanded from their peers, you can sum, for each of their submissions to a peer-reviewed venue, the number of reviews that they received, divided by the total number of authors of the submissions.</p>\n\n<p>\\[ \\sum_{p \\in \\mathtt{Submissions}} \\frac{\\mathtt{reviews}(p)}{\\mathtt{authors}(p)} \\]</p>\n\n<p>Out of curiosity, I just measured this balance for myself: over my years doing research I have &ldquo;demanded&rdquo; 10 workshop reviews and 28.5 conference reviews, and &ldquo;produced&rdquo; 6 workshop reviews and 17 conference reviews. If you think that an article would interest me, you shouldn&rsquo;t feel bad about asking me to review it, for now. (On the other hand, my balance <em>this year</em> is positive, so I wouldn&rsquo;t feel to bad about refusing if I had to.)</p>\n\n<p>Of course, a researcher&rsquo;s balance is highly dependent on where they are in their academic career &mdash; maybe more so that on their personal choices. Students are supposed to submit articles, but are offered few opportunities for doing reviews. When they are invited to do reviews, it is often as sub-reviewer, one review at a time. More established researchers participate in program committees, where they have to do a fair amount of reviews at once &mdash; ten to twenty can be typical in Programming Languages conferences. This means that one naturally starts with a deficit of reviews, and that the opportunity to become balanced or positive only comes over the years.</p>\n\n<p>(There is much more that could be said about the dynamics of the submission/review balance. I think the idea that a single person should be neutral should not be taken too seriously, because the dynamics are so complex. For example, some people stop doing reviews with a negative balance (students going to the industry for example), so long-time researchers necessarily have a <em>very positive</em> balance that may make short-time researchers balance considerations mostly irrelevant. Another thing is that there is no point doing more reviews than required by the submission flow, and that doing more reviews would build up more reviewing debt under this neutrality criterion &mdash; you can never have everyone positive.)</p>\n\n<h3 id=\"quality\">Quality</h3>\n\n<p>This is only a comment on the quantitative aspects of reviewing. Much more important is the qualitative part: are the reviews you receive and produce good reviews? (There is no objective definition of what a good review is; I like reviews that are constructive, help improve the work and its presentation, and catch mistakes.) For a given paper, one or a few very good reviews is more helpful than many bad reviews, so one should not compromise on the quality of one&rsquo;s reviews in order to reach a quantitative goal.</p>\n\n<h3 id=\"advice-for-students\">Advice for students?</h3>\n\n<p>While proof-reading this post (thanks!), Ben asked some questions that may be of interest to others &mdash; mostly students, I suppose.</p>\n\n<blockquote>\n <p>If I want to be review-neutral, but I have to accumulate a &ldquo;review debt&rdquo; before I can start reviewing, does this mean I should accept my first opportunity to review and every one that follows (until I&rsquo;m neutral)?</p></blockquote>\n\n<p>The answer is of course &ldquo;no&rdquo;: one should never feel forced to accept reviews. On the other hand, I do think that it is worthwhile for PhD students to take advantage of the reviews they are offered, so &ldquo;saying yes most of the time&rdquo; sounds like a reasonable strategy to me &mdash; this is just a personal opinion. Some reasons:</p>\n\n<ul>\n <li>\n  <p>Reviewing is hard and takes training, I think it is good to start  practicing early. Students are in a good situation to exercise their  reviewing skills at a fairly calm peace (you won&rsquo;t get many  reviews anyway), and with more time than more senior people.</p></li>\n <li>\n  <p>Student reviews are often done as sub-reviewer: someone does  a review, but also asks for your opinion and includes your  sub-review in their review. It is a low-pressure way to do your  first reviews, and the ability to exchange opinions with the other  reviewer and discuss both reviews is really helpful. Students can  also ask for feedback on their reviews to their advisor, which is  also very helpful.</p></li>\n <li>\n  <p>Reviewing teaches a few useful things about writing papers as  well &mdash; it&rsquo;s always easier to recognize the flaws in others&rsquo; work.</p></li></ul>\n\n<p>On the other hand, I think you should not accept reviews at times when you cannot invest enough work in the review, or when doing so would be detrimental to you &mdash; whether you are on a deadline, or under too much pressure, or have conflicting commitments, etc. This is more important than anything about a submission/review balance.</p>\n\n<blockquote>\n <p>Do you have any ideas for how young researchers / new researchers can reduce their &ldquo;review footprint&rdquo;? For example, is it possible to volunteer for reviews?</p></blockquote>\n\n<p>Yes, you can volunteer for reviews by telling the colleagues in your lab that you would be interested in doing reviews and that they should consider giving you some.</p>\n\n<p>(With the increased use of double-blind submission processes, it is becoming more difficult to pass conference reviews to external researchers. This means that students are relatively unlikely to receive review offers from outside their close colleagues.)</p>\n\n<p>Besides doing more reviews, the two other factors one could in theory play with are: submitting less papers, and having more co-authors. I think there is something to be said for the first one: one reason to not submit unfinished, buggy or topically-inappropriate articles is that it has a review cost. The second factor should not be considered, I think: &ldquo;did this person contribute to the work?&rdquo; should weight infinitely more for co-authorship decisions.</p>\n\n<p>Note: Another thing you can ask for is <em>reading reviews other people received</em>. I think that reading reviews is also very helpful for research beginners &mdash; whether reviews of one&rsquo;s own work or someone else&rsquo;s. In particular, I wouldn&rsquo;t know how to write reviews if I hadn&rsquo;t had the opportunity to read reviews before that. If someone you are close to receives reviews, you should consider asking them whether you could have a look.</p>\n\n<blockquote>\n <p>Is being a student volunteer at a conference equal to &ldquo;one review&rdquo;?</p></blockquote>\n\n<p>I think it is a distinct form of academic service. I don&rsquo;t know how to measure the &ldquo;conference organization cost&rdquo; we impose to our academic colleagues. (If there are around 500 attendants to a typical Programming Languages conference, it means that for every 500 conferences you attend you should organize one all by yourself.)</p>")) ((? . 44) f post (u . "Transient for Optional and Keyword Functions") (? . 44) 1731904015 (p+ #"/home/runner/work/website/website/blog/2020/11/12/transient-for-optional-and-keyword-functions/index.html" . unix) (u . "/blog/2020/11/12/transient-for-optional-and-keyword-functions/") (u . "2020-11-12T10:15:16") (? . 72) (? . 45) (c (u . "typed racket") c (u . "transient") c (u . "Author: Ben Greenman")) (u . "\n<p>A short adventure into the depths of optional and/or keyword  functions in Racket.</p>") #t (u . "\n<p>A short adventure into the depths of optional and/or keyword  functions in Racket.</p>\n<!-- more-->\n\n<hr />\n\n<p>Transient, or rather <em>the Transient semantics for a mixed-typed language</em>,  is one way to let statically-typed code safely interact with untyped code. You can read all about it in  <a href=\"http://hdl.handle.net/2022/23172\">Michael Vitousek&rsquo;s 2019 dissertation</a>  or <a href=\"https://ccs.neu.edu/home/types/publications/publications.html#g-dissertation-2020\">my 2020 dissertation</a>,  and you can see how it compares to other mixed-typed semantics  <a href=\"http://prl.ccs.neu.edu/blog/2018/10/06/a-spectrum-of-type-soundness-and-performance/\">here</a>. The idea is to give up on <a href=\"http://prl.ccs.neu.edu/blog/2019/10/31/complete-monitors-for-gradual-types/\">behavioral type guarantees</a>  and focus on a (weak) form of type soundness. To enforce soundness, Transient rewrites every expression in typed code  with assertions called <em>shape checks</em>; for example:</p>\n\n<ul>\n <li>if a typed module imports an untyped library, then every value that crosses  the module boundary gets a shape check;</li>\n <li>if typed code reads from an array, then every element that comes out of the  array must satisfy a shape check; and</li>\n <li>if a typed function escapes to untyped code, then the function must use  a shape check to validate every input that it receives.</li></ul>\n\n<p>Our goal today is to understand the shape checks for functions. Suppose we know how to turn a type <strong>T</strong> into a shape check, and we have a  function with type <strong>T</strong> that needs to check its inputs. The question is how to actually do the check in Racket v7.9.</p>\n\n<p>In your standard theory, rewriting is no problem. A (simplified, model) function takes exactly one argument and needs exactly one  shape check in the body; if <strong>T = (-&gt; Symbol Boolean)</strong> then we need  to check the shape <strong>symbol?</strong> of the domain type <strong>Symbol</strong>:</p>\n\n<pre><code>;; source code\n(: f (-&gt; Symbol Boolean))\n(define (f sym)\n  (eq? sym 'hola))\n\n;; ===&gt;\n\n;; imaginary (but realistic) rewritten code\n(define (f sym)\n  (assert sym symbol?)\n  (eq? sym 'hola))</code></pre>\n\n<p>A Typed Racket function can accept optional arguments, keyword arguments,  and optional keyword arguments. These are still fairly easy to handle in theory. Below, the function type <strong>T</strong> accepts 1 to 3 inputs:</p>\n\n<pre><code>;; source code\n(: g (-&gt;* [#:a Boolean] [Symbol #:c Void] Symbol))\n(define (g #:a a [b 'b] #:c [c #f])\n  (if a b (if c 'left 'right)))\n\n;; ===&gt;\n\n;; imaginary, unrealistic rewritten code\n(define (g #:a a [b 'b] #:c [c #f])\n  (assert a boolean?)\n  (assert b symbol?)\n  (assert c void?)\n  (if a b (if c 'left 'right)))</code></pre>\n\n<p>Good &mdash; we basically know what we want. If the Racket core language had optional and keyword functions, then we&rsquo;d be  done.</p>\n\n<p>But no, Racket expands these optional/keyword  functions into primitive <a href=\"https://docs.racket-lang.org/raco/decompile.html#(def._((lib._compiler%2Fzo-structs..rkt)._lam))\"><strong>lambda</strong></a>  and <a href=\"https://docs.racket-lang.org/raco/decompile.html#(def._((lib._compiler%2Fzo-structs..rkt)._case-lam))\"><strong>case-lambda</strong></a>  forms. Typed Racket type-checks this expanded code, thus Shallow Typed Racket  (the Transient version) must rewrite the expanded code.</p>\n\n<p>Let&rsquo;s keep digging.</p>\n\n<p>From now on, &ldquo;Shallow&rdquo; or &ldquo;Shallow TR&rdquo; refers to my implementation  of Transient for Typed Racket (TR). We&rsquo;ll talk about Shallow instead of &ldquo;Transient&rdquo; in case future work reveals a  better way to implement the Transient idea.</p>\n\n<h2 id=\"false-start-follow-the-type\">False Start: Follow the Type</h2>\n\n<p>Beware &mdash; Shallow TR cannot rely on type annotations to decide which shape  checks to insert. The example function <strong>g</strong> above demonstrates that annotations are not  good enough. With our imagined rewrite, calls that leave out the optional  <strong>#:c</strong> keyword lead to a shape-check failure because the variable <strong>c</strong> gets  the default value <strong>#f</strong> instead of a void value. Concretely, the third assert from above fails:</p>\n\n<pre><code>(define (g #:a a [b 'b] #:c [c #f])\n  ....\n  (assert c void?) ;; fails if c is the #f default value\n  ....)</code></pre>\n\n<p>The problem arises from subtyping. According to the annotations, the function <strong>g</strong> has an external type that is  less precise than the internal type that validates the function body:</p>\n\n<pre><code>;; external type T\n(: g (-&gt;* [#:a Boolean] [Symbol #:c Void] Symbol))\n\n;; internal type T2, subtype of external (T2 &lt;: T), validates body\n(: g (-&gt;* [#:a Boolean] [Symbol #:c (U #f Void)] Symbol))</code></pre>\n\n<p>Thanks to this external / internal distinction, the following easy  rewrite idea, <em>Solution 0</em>, fails. Despite the failure, this first solution is a useful starting point for  a success.</p>\n\n<h4 id=\"solution-0-step-1-mimic-the-typechecker\">Solution 0, Step 1: Mimic the Typechecker</h4>\n\n<p>Shallow TR uses the same type checker as classic <em>Deep</em> TR. If type checking succeeds, then Shallow must insert shape checks. Otherwise, compilation stops with a type error.</p>\n\n<p>Thanks to its wholesale reuse of the type checker, Shallow TR can use  syntax patterns from the type checker to navigate expanded Racket code. For optional and keyword functions in particular, Shallow can get started  by looking at how the type checker recognizes these forms in expanded code.</p>\n\n<p>Here are two syntax patterns for keyword functions and optional functions  in the Deep TR type checker (<a href=\"https://github.com/racket/typed-racket/blob/325f621716966b95a68af700624bafa21ac66e14/typed-racket-lib/typed-racket/typecheck/tc-expr-unit.rkt#L274-L295\">typecheck/tc-expr-unit.rkt</a>). The omitted code (<strong>&hellip;.</strong>) does actual type checking:</p>\n\n<pre><code>(define (tc-expr/check/internal form expected-type)\n  ....\n  (syntax-parse form\n    #:literal-sets (kernel-literals tc-expr-literals)\n    ....\n    [(~and (let-values ([(f) fun]) . body) kw:kw-lambda^)\n    ....]\n    [(~and (let-values ([(f) fun]) . body) opt:opt-lambda^)\n    ....]</code></pre>\n\n<p>Ok! Those two patterns say a lot about the expansion of optional and keyword  functions:</p>\n\n<ol>\n <li>Both forms expand to a <strong>let-values</strong> that binds one function <strong>fun</strong>.</li>\n <li>TR uses the syntax classes <strong>kw-lambda^</strong> and <strong>opt-lambda^</strong> to  tell these particular <strong>let-values</strong> apart from others.</li></ol>\n\n<p>Shallow TR can use exactly these patterns to   recognize optional/keyword functions.</p>\n\n<h4 id=\"solution-0-step-2-parse-the-domain-type\">Solution 0, Step 2: Parse the Domain Type</h4>\n\n<p>Once the Shallow TR rewriter has found an optional/keyword function,  the next step is to find the function&rsquo;s type and figure out the right  shape check. For an optional function, the rewriter has an expression that  matches the following pattern:</p>\n\n<pre><code>    [(~and (let-values ([(f) fun]) . body) opt:opt-lambda^)\n    ....]</code></pre>\n\n<p>First, we need a type. The type checker decorates (almost) every expression with a type as a syntax  property. (Unreachable code may not have a type.) The <a href=\"https://github.com/racket/typed-racket/blob/325f621716966b95a68af700624bafa21ac66e14/typed-racket-lib/typed-racket/types/type-table.rkt#L80\"><strong>type-of</strong></a>  function gets the type decoration from an expression. A little experimentation shows that the function  part of our expression, <strong>fun</strong>, has a type. Great.</p>\n\n<p>Second, we need to parse the domain from the function type. This is easier said than done. Fortunately, our final solution does not need the parsing step so I will  list the challenges and move on:</p>\n\n<ul>\n <li>The type of <strong>fun</strong> could be a straightforward <a href=\"https://github.com/racket/typed-racket/blob/325f621716966b95a68af700624bafa21ac66e14/typed-racket-lib/typed-racket/rep/type-rep.rkt#L693\"><strong>Fun type</strong></a>,  but it could also be a: <a href=\"https://github.com/racket/typed-racket/blob/325f621716966b95a68af700624bafa21ac66e14/typed-racket-lib/typed-racket/rep/type-rep.rkt#L701\"><strong>DepFun type</strong></a>,  or <a href=\"https://github.com/racket/typed-racket/blob/325f621716966b95a68af700624bafa21ac66e14/typed-racket-lib/typed-racket/rep/type-rep.rkt#L521\"><strong>Poly type</strong></a>,  or <a href=\"https://github.com/racket/typed-racket/blob/325f621716966b95a68af700624bafa21ac66e14/typed-racket-lib/typed-racket/rep/type-rep.rkt#L531\"><strong>PolyDots type</strong></a>,  or even a <a href=\"https://github.com/racket/typed-racket/blob/325f621716966b95a68af700624bafa21ac66e14/typed-racket-lib/typed-racket/rep/type-rep.rkt#L900\"><strong>Union type</strong></a>.</li>\n <li>Each part of the domain type corresponds to one parameter of the <strong>fun</strong> expression.  Matching the parameter names to types is not straightforward; for example,  do the mandatory parameters come first in <strong>fun</strong>, or the mandatory keywords?</li></ul>\n\n<h4 id=\"solution-0-step-3-insert-a-shape-check\">Solution 0, Step 3: Insert a Shape Check</h4>\n\n<p>Once we have the target <strong>fun</strong> expression and a map from parameter names  to types, the final step of our tentative solution is easy. First, convert the types to shape predicates. Second, parse <strong>fun</strong> to separate the parameters from the body. Third, insert a block of shape checks to the top of the body. All together, rewriting <strong>fun</strong> goes something like this:</p>\n\n<pre><code>(syntax-parse fun\n  [(#%plain-lambda formals . body)\n   #:with (shape-check ...)\n          (make-shape-checks #'formals (type-of fun))\n   #'(#%plain-lambda formals (#%plain-app void shape-check ...) . body)])</code></pre>\n\n<p>The rewritten function executes shape checks immediately, and then proceeds  with the <strong>body</strong> after validating each actual parameter.</p>\n\n<h2 id=\"on-the-trail-optkey-expansion\">On the Trail: optkey Expansion</h2>\n\n<p>Our <em>Solution 0</em> fails because the type of the <strong>fun</strong> expression  that it gets from the type-checked code is an external type. In terms of the <strong>g</strong> function from above, <em>Solution 0</em> uses the type  <strong>Void</strong> instead of the internal type <strong>(U Void #f)</strong> to check the <strong>c</strong> parameter. To get internal types, we need to look closer at <strong>fun</strong> and the rest of  the optional/keyword expansion.</p>\n\n<p>Let&rsquo;s study three example functions and their expanded forms. The expansions reveal a common pattern that motivates a new Shallow TR strategy.</p>\n\n<p>If you want to expand these examples yourself, hide them from the Racket  toplevel as follows. For each example function <strong>X</strong> create a module <strong>test.rkt</strong> like this:</p>\n\n<pre><code>#lang racket/base\n\n(define _ignore\n  (let ()\n    X\n    (void)))</code></pre>\n\n<p>Invoke the expander with <code>raco expand test.rkt &gt; test.rkt.txt</code> and explore  the generated <strong>.txt</strong> file.</p>\n\n<h3 id=\"example-1-mandatory-keyword\">Example 1: mandatory keyword</h3>\n\n<p>The source is a function with one mandatory positional argument and one optional positional argument.</p>\n\n<pre><code>(lambda (x [y 0])\n  (+ x y))</code></pre>\n\n<p>Expansion generates a <strong>case-lambda</strong> that accepts one or two arguments. The one-argument case supplies a default value for the missing parameter. Both cases call a generated function <strong>F</strong> that expects two arguments,  resolves defaults in a different way,  and executes the function body.</p>\n\n<pre><code>(let-values (((F)\n              (lambda (x2 y1)\n                (let-values (((x) x2))\n                  (let-values (((y) (if '#f '0 y1)))\n                    (let-values () (#%app + x y)))))))\n  (case-lambda\n   ((x) (#%app F x '0))\n   ((x y1) (#%app F x y1))))</code></pre>\n\n<p>Note: the expression <strong>(if &rsquo;#f &rsquo;0 y1)</strong> in the generated <strong>F</strong> function  is equal to <strong>y1</strong> alone. In general, the <strong>if</strong> is for default expressions. (<a href=\"https://pythonconquerstheuniverse.wordpress.com/2012/02/15/mutable-default-arguments/\">Unlike Python</a>,  Racket evaluates a mutable default once for each function call.) When the default is an immediate value, as this example illustrates,  the expander generates a <strong>#f</strong> test. A general-purpose optimizer can remove this test before the code runs.</p>\n\n<h3 id=\"example-2\">Example 2:</h3>\n\n<p>The source is a function with one mandatory positional argument and one mandatory keyword argument:</p>\n\n<pre><code>(lambda (x #:y y)\n  (+ x y))</code></pre>\n\n<p>Expansion generates several functions:</p>\n\n<ul>\n <li><strong>F0</strong> expects a plain list of arguments and executes the source function&rsquo;s body</li>\n <li><strong>F1</strong> expects a list of keywords, a list of arguments, and a final argument.  The purpose of <strong>F1</strong> is to organize a call to <strong>F0</strong>.</li>\n <li><strong>lifted/2</strong> is the constructor for a generated struct type.  Other functions help the struct call <strong>F1</strong>.  Nevermind the details; I don&rsquo;t fully understand them either.</li></ul>\n\n<p>The important piece for Shallow TR is the <strong>F0</strong> function  because the goal of rewriting is to protect the original  function body against untyped inputs.</p>\n\n<pre><code>(let-values (((F0)\n              (lambda (y1 x3)\n                (let-values (((x) x3))\n                  (let-values (((y) y1))\n                    (let-values () (#%app + x y)))))))\n  (let-values (((F1)\n                (lambda (given-kws given-args x3)\n                  (let-values (((y1) (#%app car given-args)))\n                    (#%app F0 y1 x3)))))\n    (#%app\n     lifted/2\n     (lambda (given-kws given-argc)\n       (if (#%app = given-argc '3)\n         (let-values (((l2571) given-kws))\n           (if (#%app pair? l2571)\n             (if (#%app eq? (#%app car l2571) '#:y)\n               (#%app null? (#%app cdr l2571))\n               '#f)\n             '#f))\n         '#f))\n     (case-lambda\n      ((given-kws given-args x)\n       (#%app F1 given-kws given-args x)))\n     '(#:y)\n     '(#:y))))</code></pre>\n\n<h3 id=\"example-3\">Example 3:</h3>\n\n<p>The source is a function with one mandatory positional argument and one optional keyword argument:</p>\n\n<pre><code>(lambda (x #:y [y 0])\n  (+ x y))</code></pre>\n\n<p>Expansion again generates several functions:</p>\n\n<ul>\n <li><strong>F0</strong> expects a plain list of arguments, resolves the optional default,  and executes the source function&rsquo;s body</li>\n <li><strong>F1</strong> calls <strong>F0</strong></li>\n <li>At the bottom, there are two <strong>case-lambda</strong> functions that call  <strong>F1</strong></li></ul>\n\n<p>Again, the <strong>F0</strong> function is the focal point for Shallow TR rewriting.</p>\n\n<pre><code>(let-values (((F0)\n              (lambda (y1 x3)\n                (let-values (((x) x3))\n                  (let-values (((y) (if '#f '0 y1)))\n                    (let-values () (#%app + x y)))))))\n  (let-values (((F1)\n                (lambda (given-kws given-args x3)\n                  (let-values (((y2) (#%app pair? given-kws)))\n                    (let-values (((y1)\n                                  (if y2 (#%app car given-args) '0)))\n                      (#%app F0 y1 x3))))))\n    (#%app\n     make-optional-keyword-procedure\n     (lambda (given-kws given-argc)\n       (if (#%app = given-argc '3)\n         (let-values (((l1571) given-kws))\n           (let-values (((l1571)\n                         (if (#%app null? l1571)\n                           l1571\n                           (if (#%app eq? (#%app car l1571) '#:y)\n                             (#%app cdr l1571)\n                             l1571))))\n             (#%app null? l1571)))\n         '#f))\n     (case-lambda\n      ((given-kws given-args x)\n       (#%app F1 given-kws given-args x)))\n     null\n     '(#:y)\n     (case-lambda\n      ((x) (#%app F1 null null x))))))</code></pre>\n\n<h2 id=\"solution-the-shallow-tr-rewrite-strategy\">Solution: The Shallow TR Rewrite Strategy</h2>\n\n<p>All three examples show a common pattern among the expansions of optional  and keyword functions. Each function expands to a <strong>let-values</strong> form:</p>\n\n<pre><code>(let-values (((f) fun)) . body)</code></pre>\n\n<p>Furthermore, the generated <strong>fun</strong> is a lambda that first resolves optional  arguments and then executes the body of the original function. Here is the <strong>fun</strong> from <em>Example 3</em> again;  it has formal parameters for the keyword arg. and the mandatory arg.,  and one <strong>let-values</strong> to resolve each parameter:</p>\n\n<pre><code>  (lambda (y1 x3)\n    (let-values (((x) x3))\n      (let-values (((y) (if '#f '0 y1)))\n        (let-values () (#%app + x y)))))</code></pre>\n\n<p>Another experiment with <strong>type-of</strong> shows that the right-hand side of  each <strong>let-values</strong> has an internal type annotation. Excellent! Both <strong>(type-of x3)</strong>  and <strong>(type-of (if &rsquo;#f &rsquo;0 y1))</strong> are the right types for shape checks. Shallow TR can:</p>\n\n<ul>\n <li>inspect the <strong>let-values</strong> one-by-one;</li>\n <li>convert the type of each right-hand expression to a shape predicate; and</li>\n <li>rewrite each right-hand <strong>expr</strong> into <strong>(assert expr shape?)</strong>.</li></ul>\n\n<p>This should work! In fact, we can do slightly better:</p>\n\n<ul>\n <li>when the right-hand expression is a conditional <strong>(if test default-expr supplied-arg)</strong></li>\n <li>then Shallow only needs to check the supplied arg: <strong>(if test default-expr (assert supplied-arg shape?))</strong></li></ul>\n\n<p>Note: Shallow needs to rewrite the default expression, but it can trust its  final shape because of (Transient) type soundness.</p>\n\n<h2 id=\"a-problem-with-methods-and-a-bugfix\">A Problem with Methods and a Bugfix</h2>\n\n<p>Currently, Shallow TR rewrites optional and keyword functions using  the <strong>let-values</strong> plan described above. Each formal parameter has one <strong>let-values</strong> binding,  and the type on each bound expression defines the shape check.</p>\n\n<p>Last May, though, this rewriting caused new failures in methods  with optional arguments. The failure was due to a mismatch between Typed Racket  and the Racket class expander. Since then, we <a href=\"https://github.com/racket/racket/pull/3182\">fixed the class expander</a>.</p>\n\n<p>First, here is a class with one method that runs correctly. The method <strong>f</strong> accepts an optional positional argument <strong>x</strong>; the default  value of <strong>x</strong> is the current value of the field <strong>my-num</strong> (fields are mutable):</p>\n\n<pre><code>(define c0%\n  (class object%\n    (super-new)\n    (field (my-num 2))\n    (define/public (f [x my-num])\n      (+ x x))))</code></pre>\n\n<p>Second, here is a similar method that fails. This time, the default is an immediate value <strong>2</strong>:</p>\n\n<pre><code>(define c1%\n  (class object%\n    (super-new)\n    (define/public (f [x 2])\n      (+ x x))))</code></pre>\n\n<p>Running a call <strong>(send o1 f)</strong> used to raise a shape-check failure about  a strange value:</p>\n\n<blockquote>\n <p>shape error: Expected a real number, got <code>#&lt;unsafe-undefined&gt;</code></p></blockquote>\n\n<p>What is going on?</p>\n\n<p>It turns out, the undefined value comes from the expander. Here is an optional function with a default expression:</p>\n\n<pre><code>(lambda (x [y z])\n  (+ x y))</code></pre>\n\n<p>Expansion generates a function <strong>F0</strong> that checks for the undefined value,  and an outer <strong>case-lambda</strong> that supplies undefined when the default  is needed:</p>\n\n<pre><code>(let-values (((F0)\n              (lambda (x2 y1)\n                (let-values (((x) x2))\n                  (let-values (((y)\n                                (if (#%app eq? y1 unsafe-undefined)\n                                  z\n                                  y1)))\n                    (let-values () (#%app + x y)))))))\n  (case-lambda\n   ((x) (#%app F0 x unsafe-undefined))\n   ((x y1) (#%app F0 x y1))))</code></pre>\n\n<p>That&rsquo;s the normal way that <strong>unsafe-undefined</strong> shows up:  the <a href=\"https://github.com/racket/racket/blob/c0ff11e27bd28e070c20b7a9b0f7365f8f2b665a/racket/collects/racket/private/kw.rkt\">expander for optional/keyword functions</a>  looks for default expressions  vs. default values and uses the undefined value for expressions.</p>\n\n<p>Three other facts conspired to make the problem with optional methods:</p>\n\n<ol>\n <li>Typed Racket also looks for default expressions vs. default values  (search for <strong>immediate-default</strong> <a href=\"https://github.com/racket/typed-racket/blob/325f621716966b95a68af700624bafa21ac66e14/typed-racket-lib/typed-racket/base-env/annotate-classes.rkt\">here</a>).  When an optional parameter has a default expression, Typed Racket  widens its internal type to accept the <strong>unsafe-undefined</strong> value  (search for <strong>-Unsafe-Undefined</strong>  <a href=\"https://github.com/racket/typed-racket/blob/325f621716966b95a68af700624bafa21ac66e14/typed-racket-lib/typed-racket/types/kw-types.rkt\">here (kw)</a>  and  <a href=\"https://github.com/racket/typed-racket/blob/325f621716966b95a68af700624bafa21ac66e14/typed-racket-lib/typed-racket/typecheck/tc-lambda-unit.rkt\">here (opt)</a>).</li>\n <li>The class expander does some pre-processing on optional methods and  inadvertantly turned every default value into a default expression.</li>\n <li>Shallow TR pushes default expression checks <strong>(if test default-expr supplied-arg)</strong>  to the <strong>supplied-arg</strong> instead of wrapping the whole <strong>if</strong> form.</li></ol>\n\n<p>In the end, Typed Racket saw a default value and inferred an overly-precise  type. The type would be correct but for the class expander. As-is, the type was unsound&mdash;but harmless because the false assumption  was guarded by an <strong>if</strong> test for <strong>unsafe-undefined</strong>. Running Shallow TR revealed the unsoundness with its eager shape check.</p>\n\n<p>Again, the resolution was to fix the class expander (<a href=\"https://github.com/racket/racket/pull/3182\">racket/racket #3182</a>). Both Typed Racket and Shallow TR stayed the same. The change removes an unnecessary run-time check from expanded optional methods.</p>\n\n<h2 id=\"lessons\">Lessons</h2>\n\n<ol>\n <li>Optional and keyword functions are not core forms in Racket.  They expand to a combination of simple functions.</li>\n <li>Digging into the expansion is sometimes necessary.  There are at least three places that do so&mdash;the class expander, TR, and Shallow TR&mdash;and unfortunately they all need to cooperate.</li>\n <li>The development of Shallow TR helped find several latent bugs in TR, Racket, and other libraries.  Figure 57 of <a href=\"https://ccs.neu.edu/home/types/publications/publications.html#g-dissertation-2020\">my dissertation</a>  lists them all.</li></ol>")) ((? . 46) f post (u . "A few cores too many") (? . 46) 1731904015 (p+ #"/home/runner/work/website/website/blog/2016/08/03/a-few-cores-too-many/index.html" . unix) (u . "/blog/2016/08/03/a-few-cores-too-many/") (u . "2016-08-03T14:09:02") (? . 52) (? . 47) (c (u . "performance") c (u . "benchmarking") c (u . "lost time") c (u . "Author: Ben Greenman")) (u . "\n<p>Performance matters for software systems, but performance is not always easy  to measure. At the PRL we recently had a scare with some unreliable measurements. Here is the story.</p>") #t (u . "\n<p>Performance matters for software systems, but performance is not always easy  to measure. At the PRL we recently had a scare with some unreliable measurements. Here is the story.</p>\n<!-- more-->\n\n<p>Last year, we proposed a method for evaluating the performance of gradual type  systems based on measuring <em>every possible configuration</em> of typed and untyped  code that a programmer might explore <a href=\"http://www.ccs.neu.edu/racket/pubs/popl16-tfgnvf.pdf\">(pdf)</a>. Given the freedom that gradual typing offers, this is the only realistic way to measure  the performance of a gradual type system.</p>\n\n<p>But it is a lot to measure! While developing the method, we spent over 3 months benchmarking a total of 75,844 configurations. Each configuration is a complete program and some gradual typings caused  some programs to slow by 50x or even 100x, so many of these configurations took  minutes to run.</p>\n\n<p>The next question we asked was naturally &ldquo;how can we scale this method to large software projects?&rdquo; In <a href=\"http://docs.racket-lang.org/ts-reference/Libraries_Provided_With_Typed_Racket.html#%28part._.Porting_.Untyped_.Modules_to_.Typed_.Racket%29\">our case</a>,  the number of gradually typed configurations scaled exponentially with the number of modules. Current gradual type system for <a href=\"https://github.com/mvitousek/reticulated\">Python</a>  and <a href=\"http://www.di.ens.fr/~zappa/readings/ecoop15.pdf\">JavaScript</a>  are exponential in the number of <em>variables</em> in the program.</p>\n\n<p>We explored two solutions:</p>\n\n<ol>\n <li>Max New began work on a prediction model (inspired by work  on <a href=\"http://subs.emis.de/LNI/Proceedings/Proceedings213/185.pdf\">software product lines</a>)  to estimate the performance of <code>2^N</code> configurations after polynomially-many measurements.</li>\n <li>Asumu Takikawa and I shopped for a multi-core computer.</li></ol>\n\n<p>By Thanksgiving, we had bought a Linux machine with 2 <a href=\"http://www.amd.com/en-us/products/server/opteron/6000/6300\">AMD Opteron 6376 2.3GHz</a>  processors (16 cores each) and put it to work running benchmarks on 29 cores simultaneously. Life was good.</p>\n\n<p>Later that winter, Max implemented a prediction algorithm. The basic idea was to focus on <em>boundaries</em> between modules and isolate their  effect on performance. If two modules are untyped, their boundary will have zero cost. If the same two modules are typed, their boundary might result in an overall  performance improvement due to type-driven optimizations. And if one module is typed and the other untyped, their boundary will  suffer some cost of type checking at runtime. In general a program with <code>N</code> modules has at most <code>N(N - 1) / 2</code> internal boundaries,  so it is far more time-efficient to measure only the boundaries than to benchmark  <code>2^N</code> gradually typed configurations.</p>\n\n<p>Fast-forward to March, we had a prototype prediction algorithm and it was time to test. Again using 29 cores (because, why not), we gathered cost/benefit numbers for  one 4-module benchmark and used them to predict performance for its 16 configurations. The results were not very good.</p>\n\n<div class=\"figure\"><img src=\"/img/a-few-cores-too-many-1.png\" alt=\"Figure 1: True running time vs. predicted running time for 16 configurations\" />\n <p class=\"caption\">Figure 1: True running time vs. predicted running time for 16 configurations</p></div>\n\n<p>Those green circles are the ground truth, the average running time after 5 iterations of each config. The blue triangles are what we predicted. Except for configurations 0 and 8, the triangles are FAR off from the truth. Many are even negative &hellip; obviously the algorithm needs work.</p>\n\n<p>But then, out of frustration, desperation, or just good luck, Max compared the  predictions to ground truth data gathered on a <em>single</em> core, leaving the other 31  cores idle.</p>\n\n<div class=\"figure\"><img src=\"/img/a-few-cores-too-many-2.png\" alt=\"Figure 2: Predictions made using measurements from a single core\" />\n <p class=\"caption\">Figure 2: Predictions made using measurements from a single core</p></div>\n\n<p>First off, the red &ldquo;sequential truth&rdquo; dots are slightly closer to the predicted triangles. Second &mdash; and this is the scary part &mdash; the red dots are very different from  the green dots. <em>Running on 1 core vs. 29 cores should not change the measurements!</em></p>\n\n<p>From here we tried increasing the running time of the benchmark,  removing I/O and system calls,  checking for hyperthreading (ARM cores don&rsquo;t support it),  and even changing the cores&rsquo; CPU governor. The hope was that results taken from 1 core could match results from <code>N</code> cores,  for some <code>N &gt; 1</code>. It turns out <code>N = 2</code> was stable, but even for <code>N = 3</code> we found graphs like the following:</p>\n\n<div class=\"figure\"><img src=\"/img/a-few-cores-too-many-3.png\" alt=\"Figure 3: exact running times. Same-colored dots in each column should be tightly clustered.\" />\n <p class=\"caption\">Figure 3: exact running times. Same-colored dots in each column should be tightly clustered.</p></div>\n\n<p>This data is for the same 16 configurations as the previous two graphs. Green dots are exact running times measured with 25 cores. Red dots are running times measured with 1 core. The red dots are much closer together, and always unimodal. The green dots are evidence that maybe the 32-core machine has, as Jan Vitek  put it, 30 cores too many.</p>\n\n<blockquote>\n <p>&ldquo;Oh my. You think it&rsquo;ll never happen to you. Well, now I&rsquo;ve learned my lesson.&rdquo;</p><!-- bg: If anyone knows this quote I will be AMAZED. If anyone can even Google this quote, I'll buy them 2 beers and a pizza.--></blockquote>\n\n<p>And so, we said goodbye to the last 4 months of data and started over running at most two cores. The new results are all stable, but still we keep pinching ourselves.</p>\n\n<p>P.S. the results from <a href=\"http://www.ccs.neu.edu/racket/pubs/#popl16-tfgnvf\">POPL 2016</a> are just fine,  as they were not taken on the new machine running more than 2 cores.  If you have time to confirm, that data is in our  <a href=\"http://www.ccs.neu.edu/home/asumu/artifacts/popl-2016/\">artifact</a>  and in the <a href=\"https://github.com/nuprl/gradual-typing-performance/tree/master/paper/popl-2016/data\">gradual-typing-performance</a> repo.</p>")) ((? . 45) f post (u . "Deep and Shallow Types") (? . 45) 1731904015 (p+ #"/home/runner/work/website/website/blog/2020/12/23/deep-and-shallow-types/index.html" . unix) (u . "/blog/2020/12/23/deep-and-shallow-types/") (u . "2020-12-23T18:21:55") (? . 44) (? . 0) (c (u . "dissertation") c (u . "migratory typing") c (u . "Author: Ben Greenman")) (u . "\n<p>I successfully defended my Ph.D. dissertation. You can find the document, a talk recording, and much more here:</p>\n\n<ul>\n <li><a href=\"http://ccs.neu.edu/home/types/publications/publications.html#g-dissertation-2020\">http://ccs.neu.edu/home/types/publications/publications.html#g-dissertation-2020</a></li></ul>\n\n<p>To the PRL: thanks for a wonderful 6.5 years.</p>") #t (u . "\n<p>I successfully defended my Ph.D. dissertation. You can find the document, a talk recording, and much more here:</p>\n\n<ul>\n <li><a href=\"http://ccs.neu.edu/home/types/publications/publications.html#g-dissertation-2020\">http://ccs.neu.edu/home/types/publications/publications.html#g-dissertation-2020</a></li></ul>\n\n<p>To the PRL: thanks for a wonderful 6.5 years.</p>\n<!-- more-->\n\n<h3 id=\"abstract\">Abstract</h3>\n\n<blockquote>\n <p>The design space of mixed-typed languages is lively but disorganized. On one hand, researchers across academia and industry have contributed language  designs that allow typed code to interoperate with untyped code. These design efforts explore a range of goals;  some improve the expressiveness of a typed language, and  others strengthen untyped code with a tailor-made type system. On the other hand, experience with type-sound designs has revealed major challenges. We do not know how to measure the performance costs of sound interaction. Nor do we have criteria that distinguish ``truly sound&rsquo;&rsquo; mixed-typed languages  from others that enforce type obligations locally rather than globally.</p>\n <p>In this dissertation, I introduce methods for assessing  mixed-typed languages and bring order to the design space. My first contribution is a performance-analysis method that allows language  implementors to systematically measure the cost of mixed-typed interaction.</p>\n <p>My second contribution is a design-analysis method that allows language designers  to understand implications of the type system. The method addresses two central questions: whether typed code can cope with  untyped values, and whether untyped code can trust static types. Further distinctions arise by asking whether error outputs can  direct a programmer to potentially-faulty interactions.</p>\n <p>I apply the methods to several designs and discover limitations that motivate  a synthesis of two ideas from the literature:  deep types and shallow types. Deep types offer strong guarantees but impose a high interaction cost. Shallow types offer weak guarantees and better worst-case costs. This dissertation proves that deep and shallow types can interoperate  and measures the benefits of a three-way mix.</p></blockquote>\n\n<p>Next year, I&rsquo;ll be a <a href=\"https://cifellows2020.org\">CI Fellow</a> at Brown.</p>")) ((? . 48) f post (u . "Report: PLISS 2017") (? . 48) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/06/05/report-pliss-2017/index.html" . unix) (u . "/blog/2017/06/05/report-pliss-2017/") (u . "2017-06-05T15:47:59") (? . 81) (? . 49) (c (u . "pliss") c (u . "event") c (u . "Author: Ming-Ho Yee")) (u . "\n<p>Two weeks ago, I attended the first <a href=\"https://pliss2017.github.io/\">Programming Language Implementation Summer School</a>, held in beautiful Bertinoro, Italy.</p>\n\n<p>The goal of PLISS was &ldquo;to prepare early graduate students and advanced undergraduates for research in the field,&rdquo; and I think it successfully accomplished that. There were many talks in a variety of areas, such as just-in-time compilers, garbage collection, static analysis, and distributed systems. But PLISS was more than just a series of talks: PLISS provided an environment for interacting with other students as well as senior researchers.</p>") #t (u . "\n<p>Two weeks ago, I attended the first <a href=\"https://pliss2017.github.io/\">Programming Language Implementation Summer School</a>, held in beautiful Bertinoro, Italy.</p>\n\n<p>The goal of PLISS was &ldquo;to prepare early graduate students and advanced undergraduates for research in the field,&rdquo; and I think it successfully accomplished that. There were many talks in a variety of areas, such as just-in-time compilers, garbage collection, static analysis, and distributed systems. But PLISS was more than just a series of talks: PLISS provided an environment for interacting with other students as well as senior researchers.</p>\n<!-- more-->\n\n<h2 id=\"the-talks\">The Talks</h2>\n\n<p>With the amount of technical content at PLISS, there was easily something for everyone. <a href=\"http://janvitek.org/\">Jan Vitek</a> and <a href=\"http://tratt.net/laurie/\">Laurence Tratt</a> gave lectures that included hands-on exercises where we worked on JITs. <a href=\"https://www.cs.purdue.edu/homes/suresh/\">Suresh Jagannathan</a> dived into the operational semantics of a distributed system, so we could reason about different weak consistency models. Francesco Logozzo gave us a whirlwind tour of abstract interpretation.</p>\n\n<p>Most of my favorite talks included some form of extra content, such as exercises, live-coding presentations, or demos. I found it really helpful to write actual code and apply what I had just learned, or to look at some concrete examples. The examples and exercises also helped with the pacing, as actively listening to four 90-minute talks every day is exhausting!</p>\n\n<p>Off the top of my head, these were some of my favorite talks:</p>\n\n<ul>\n <li>\n  <p><strong>Dynamic Programming Language Implementation with LLVM</strong>, by Petr Maj, Oli  Flückiger, and <a href=\"http://janvitek.org/\">Jan Vitek</a>. As the first talk of the summer school, this  was a gentle introduction for the rest of the week. We had <a href=\"https://github.com/PRL-PRG/pliss-rift/\">exercises</a>  (with intentional bugs to make us think!), and also brief overviews of  intermediate languages, static analysis, and garbage collection. These three  topics would later show up in more detail.</p></li>\n <li>\n  <p><strong>Micro Virtual Machines</strong>, by <a href=\"http://users.cecs.anu.edu.au/~steveb/\">Steve Blackburn</a>. This talk covered  background information on virtual machines, and also the <a href=\"http://microvm.github.io/\">Micro VM</a>  project that Steve&rsquo;s group has been working on. A lot of the material was  already familiar to me, but I still enjoyed the talk, and even got a few  ideas for the project I&rsquo;m working on!</p></li>\n <li>\n  <p><strong>Static Analysis</strong>, by <a href=\"http://matt.might.net/\">Matt Might</a>. Matt&rsquo;s talk was based on one of  his <a href=\"http://matt.might.net/articles/intro-static-analysis/\">articles</a> and an older talk he&rsquo;s given. Impressively, the entire  example was live-coded, with only a single mistake!</p></li>\n <li>\n  <p><strong>Testing Language Implementations</strong>, by <a href=\"http://multicore.doc.ic.ac.uk/\">Alastair Donaldson</a>. This was  an entertaining talk, since Ally showed multiple examples of crashing  compilers, and causing other kinds of mischief by triggering compiler bugs.</p></li></ul>\n\n<p>If you&rsquo;re disappointed that you couldn&rsquo;t see these talks, don&rsquo;t worry! The talks were recorded and will be posted very shortly.</p>\n\n<h2 id=\"the-people\">The People</h2>\n\n<p>But there&rsquo;s more to PLISS than the talks. I&rsquo;m referring to <em>networking</em>, or the opportunity to get out and talk to other people about research.</p>\n\n<p>As an early graduate student, I&rsquo;ve been given a lot of advice about talking to people at conferences and the importance of the &ldquo;hallway track.&rdquo; I still have difficulty doing this at an actual conference, like <a href=\"http://pldi17.sigplan.org/home\">PLDI</a> or <a href=\"http://2017.ecoop.org/\">ECOOP</a>. When there are hundreds of attendees, or when people already know each other and are in conversation groups, I find it difficult to approach them.</p>\n\n<p>This was not the case at PLISS. There were fewer attendees: about fifty students and a dozen speakers. There was a good mix of undergraduate, master&rsquo;s, first-year PhD, and more senior PhD students. All our breakfasts, lunches, and breaks were together, so we would see the same people again and again, and inevitably start to learn each other&rsquo;s names. The speakers would also be among us, and there was a good ratio of speakers to students for discussions and mealtime mentoring.</p>\n\n<p>I had many opportunities to practice my &ldquo;research pitch.&rdquo; I talked to senior students and got advice. I talked to junior students and gave advice. Two different people I talked to about my research pointed me to the same paper to read. I found another student who was working with <a href=\"http://research.cs.wisc.edu/wpis/papers/popl95.pdf\">IFDS</a>, an algorithm I have spent much time trying to understand. And, one day at lunch, my table discovered that we were all working on static analysis!</p>\n\n<p>As much as I enjoyed the talks, I think the best part of PLISS was meeting and talking to other people. You can replace talks with videos (but you lose the speaker-audience interaction), and you can replace conversations with other forms of communication. But there isn&rsquo;t really anything that can replace the serendipity of bumping into someone with a shared interest.</p>\n\n<h2 id=\"the-location\">The Location</h2>\n\n<p>Actually, the <em>other</em> best part of PLISS was the location. Italy is a beautiful country with delicious food. And Bertinoro is a small town on the top of a hill, with a breathtaking view of the surrounding area. The lectures were held in a <a href=\"https://pliss2017.github.io/images/pics/7.jpg\">castle at the top of the hill</a> (photo credit: Steve Blackburn). The speakers lived in the castle for the week, while the students lived in the former monastery (seems fitting), which has been renovated into a university residence.</p>\n\n<p>Here are my two favorite pictures I took (click for full size):</p>\n\n<p><a href=\"/img/pliss2017-1.jpg\"><img src=\"/img/pliss2017-1-thumb.jpg\" alt=\"View from the castle\" /></a></p>\n\n<p><a href=\"/img/pliss2017-2.jpg\"><img src=\"/img/pliss2017-2-thumb.jpg\" alt=\"Panorama\" /></a></p>\n\n<p>Steve Blackburn has more pictures posted on the <a href=\"https://pliss2017.github.io/\">PLISS website</a>.</p>\n\n<h2 id=\"final-thoughts\">Final Thoughts</h2>\n\n<p>PLISS was a wonderful event. Many thanks need to be given to the speakers, organizers, and sponsors, for making this possible!</p>\n\n<p>If and when there is a second PLISS, I highly encourage students to apply! You will learn a lot from the lectures, from talking to the speakers, and meeting other students. And if it&rsquo;s in Bertinoro again, you can enjoy the weather and nice view!</p>")) ((? . 50) f post (u . "Programming Language Conference in Russia") (? . 50) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/05/24/programming-language-conference-in-russia/index.html" . unix) (u . "/blog/2017/05/24/programming-language-conference-in-russia/") (u . "2017-05-24T12:25:17") (? . 51) (? . 80) (c (u . "Author: Artem Pelenitsyn")) (u . "\n<p>In April 3&mdash;5 I took part into a Russian conference exclusively devoted to programming languages: <a href=\"http://plc.sfedu.ru/\">Programming Languages and Compilers</a> (<a href=\"https://translate.google.com/translate?sl=auto&amp;tl=en&amp;js=y&amp;prev=_t&amp;hl=en&amp;ie=UTF-8&amp;u=http%3A%2F%2Fplc.sfedu.ru%2F&amp;edit-text=&amp;act=url\">Google.Translated version of the site</a>). I was a member of organizing committee and had a paper there.</p>\n\n<p>This is the first conference in Russia highly focused on our area of PL. At least for the last several decades (I believe, there were conferences of the kind back in USSR). The conference was devoted to the memory of prominent Soviet PL-researcher from Rostov-on-Don, Adolf Fuksman who worked on ideas quite similar to what we know as the aspect-oriented programming back in the 70-s.</p>") #t (u . "\n<p>In April 3&mdash;5 I took part into a Russian conference exclusively devoted to programming languages: <a href=\"http://plc.sfedu.ru/\">Programming Languages and Compilers</a> (<a href=\"https://translate.google.com/translate?sl=auto&amp;tl=en&amp;js=y&amp;prev=_t&amp;hl=en&amp;ie=UTF-8&amp;u=http%3A%2F%2Fplc.sfedu.ru%2F&amp;edit-text=&amp;act=url\">Google.Translated version of the site</a>). I was a member of organizing committee and had a paper there.</p>\n\n<p>This is the first conference in Russia highly focused on our area of PL. At least for the last several decades (I believe, there were conferences of the kind back in USSR). The conference was devoted to the memory of prominent Soviet PL-researcher from Rostov-on-Don, Adolf Fuksman who worked on ideas quite similar to what we know as the aspect-oriented programming back in the 70-s.</p>\n<!-- more-->\n\n<p>We designed and implemented the conference with my colleagues from I.I.Vorovich institute of Mathematics, Mechanics and Computer Science, Southern Federal University (<a href=\"https://www.google.com/maps/place/Rostov-on-Don,+Rostov+Oblast,+Russia/@49.8345629,18.9321123,4.5z/data=!4m5!3m4!1s0x40e3c777c3b4b6ef:0x8248b451e48b4d04!8m2!3d47.2357137!4d39.701505\">Rostov-on-Don</a>, Russia). We aimed at gathering as much PL-researchers and enthusiasts from academia in Russia as we could. One of the consequences of the aim was a decision to run the conference in Russian. Though we missed expertise from our non-Russian speaking colleagues, we got thorough participation from all over Russia:</p>\n\n<blockquote>\n <p>Saint-Petersburg, Moscow, Novosibirsk, Krasnoyarsk, Ekaterinburg, Kazan, etc.</p></blockquote>\n\n<p>I only mention here the cities with more than 1 mil. population in decreasing in number of conference participants order (and excluding Rostov itself, of course).</p>\n\n<p>I particularly liked talks by invited speakers. When searching for ones, we targeted Russians who work at prominent universities and/or have some visibility at the international level. We ended up with two researchers: <a href=\"http://ilyasergey.net/\">Ilya Sergey</a> (University College of London) and <a href=\"http://www.macs.hw.ac.uk/~ek19/\">Ekaterina Komendantskaya</a> (Heriot-Watt U., Edinburg, UK). Interestingly, their talks were quite close to each other:</p>\n\n<ul>\n <li>I. Sergey, Dependent Types for verification of real-world programs,</li>\n <li>E. Komendantskaya, Automated Theorem Proving for Type Inference, Constructively.</li></ul>\n\n<p>Both of them talked about types as a logic tool to ensure program correctness.</p>\n\n<p>Biggest opening in this conference for me was a team from Languages Tools Laboratory of <a href=\"https://en.wikipedia.org/wiki/JetBrains\">JetBrains</a>. Surely, you heard about JB: either about their famous IDE, IntelliJ IDEA, or the Kotlin programming language (which, by the way, <a href=\"https://blog.jetbrains.com/kotlin/2017/05/kotlin-on-android-now-official/\">is endorsed</a> for Android development these days). You may also have noticed that JB become sponsors of ECOOP and OPLSS this year. So we had a whole team of researchers from Saint-Petersburg office of JB. Among their topics: <code>OCaml</code> embedding of <code>miniKanren</code> (some results was presented on ML Workshop 2016), parser combinator libraries for <code>OCaml</code> and constrained graph querying (this is not specifically a PL problem, see <a href=\"https://arxiv.org/abs/1502.02242\">arXiv:1502.02242</a> for details).</p>\n\n<p>Otherwise the spectrum of topics presented on the conference was quite broad, here are some:</p>\n\n<ul>\n <li>Static analysis with PVS-studio (a sponsor talk),</li>\n <li>supercompilation (a talk by researchers from Pereslavl-Zalesskiy, where the topic is actively developed for decades),</li>\n <li>C++ and beyond (by a member of the ISO C++ committee),</li>\n <li>architecture-agnostic parallel programming languages and compilation techniques for parallel architectures,</li>\n <li>game semantics and ontologies for PL semantics,</li>\n <li>program analysis,</li>\n <li>compiler architectures.</li></ul>\n\n<p>Full program with links to slides in Russian is available <a href=\"https://docs.google.com/spreadsheets/d/11QiFUqJG_NiBHVUfji_6-FiqP3aQWmdDBN13abM32nY/edit?usp=sharing\">here</a>.</p>\n\n<p>Let me mention my submission: that was a joint work with a student of mine on exploring design space for parser combinator libraries using programming language with direct support of effect system, namely <a href=\"http://popl17.sigplan.org/event/popl-2017-papers-do-be-do-be-do\">Frank</a>. <a href=\"http://staff.mmcs.sfedu.ru/%7Ejuliet/index.en.html\">Julia Belyakova</a> also participated in the conference with her work on Coq-certified interpreter for an extension of lambda-calculus with concept-parameters (module-like kind of thing). The follow-up of that work is accepted for FTfJP workshop this year. You can also listen to her on the topic at the <a href=\"http://www.nepls.org/Events/30/\">NEPLS</a> next week.</p>\n\n<p>I hope that we will find sources, time, and, most important, high quality submissions for PLC&ndash;2018.</p>")) ((? . 52) f post (u . "Tutorial: Zero to Sixty in Racket") (? . 52) 1731904015 (p+ #"/home/runner/work/website/website/blog/2016/08/02/tutorial-zero-to-sixty-in-racket/index.html" . unix) (u . "/blog/2016/08/02/tutorial-zero-to-sixty-in-racket/") (u . "2016-08-02T01:29:11") (? . 53) (? . 46) (c (u . "Racket") c (u . "tutorial") c (u . "Author: Ben Greenman")) (u . "\n<p>Racket is excellent for incrementally growing scripts into full-fledged programs.\nThis post steps through the evolution of one small program and highlights the\n Racket tools that enable incremental advances.</p>") #t (u . "\n<p>Racket is excellent for incrementally growing scripts into full-fledged programs.\nThis post steps through the evolution of one small program and highlights the\n Racket tools that enable incremental advances.</p>\n<!--more-->\n\n<p></p>\n\n<div class=\"SIntrapara\">Why should anyone use <a href=\"http://racket-lang.org/\">Racket</a>?\nThere are two reasons:\n</div>\n\n<div class=\"SIntrapara\">\n <ol>\n  <li>\n   <p>You have a problem that can only be solved with Racket&rsquo;s language-building tools</p></li>\n  <li>\n   <p>Racket is a nice language to program in.\n(Has lexical scope, parentheses, <a href=\"http://con.racket-lang.org\">active users</a>...)</p></li></ol></div>\n\n<p>My favorite part of Racket is how it supports a certain development style of\n evolving scripts into programs.\nWhen I start coding (after design, before debugging), I can focus the problem at hand.\nNext come examples, unit tests, and types to be sure the solution is correct.\nFinally, I worry about aesthetics, efficiency, and how the solution can be used as a library in a larger context.</p>\n\n<p>Bottom line: with Racket, my coding is aligned with my priorities.\nAnd as I transition from \"no code\" to \"working code\" to \"robust code\" to \"re-usable code\",\n the program is almost always runnable.</p>\n\n<h1><a name=\"(part._.Problem__.A_.K.W.I.C_.Index_.Production_.System)\"></a>Problem: A KWIC Index Production System</h1>\n\n<p>A KWIC index system\nreads input from a file,\ndivides each line of the file into whitespace-separated words,\nand outputs (in alphabetical order) all circular shifts of all lines.</p>\n\n<p>The first circular shift of a line <span class=\"RktWrap\"><span class=\"RktVal\">\"A B C\"</span></span> is the line <span class=\"RktWrap\"><span class=\"RktVal\">\"B C A\"</span></span>.\nThe second circular shift is <span class=\"RktWrap\"><span class=\"RktVal\">\"C A B\"</span></span>.</p>\n\n<p>Building a KWIC index is a historical problem.\nAccording to <a href=\"https://www.cs.umd.edu/class/spring2003/cmsc838p/Design/criteria.pdf\">D.L. Parnas (1972)</a>:</p>\n\n<blockquote class=\"SubFlow\">\n <p>Except under extreme circumstances (huge data base, no supporting software)\nsuch a system could be implemented by a good programmer within a week or two.</p></blockquote>\n\n<p>See also: <a href=\"https://yanniss.github.io/law.html\">Yannis&rsquo;s Law</a>.</p>\n\n<p>Today, I bet only <a href=\"http://wiki.portal.chalmers.se/agda/pmwiki.php\">Agda</a> and <a href=\"https://scratch.mit.edu/\">Scratch</a>\n programmers would need the full two weeks.\nWe&rsquo;ll be done in 20 minutes.</p>\n\n<h1><a name=\"(part._.A_.Script)\"></a>A Script</h1>\n\n<p>To start, open a file and type:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><a class=\"RktModLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/guide/Module_Syntax.html#%28part._hash-lang%29\"><span class=\"RktMod\">#lang</span></a><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><a class=\"RktModLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/index.html\"><span class=\"RktSym\">racket</span></a><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>You can name the file anything, like <span class=\"stt\">kwic.rkt</span> or <span class=\"stt\">rkt.kwic</span> or <span class=\"stt\">foo</span>.\nRacket doesn&rsquo;t care,\n but it does need the <span class=\"stt\">#lang</span> line to read the contents of the file.</p>\n\n<p>Though, you should use the <span class=\"stt\">.rkt</span> extension.</p>\n\n<p>The first part of the solution is a function to read input from a file into a\n list of strings for further processing.\nThe built-in function <a href=\"http://docs.racket-lang.org/reference/Filesystem.html#%28def._%28%28lib._racket%2Ffile..rkt%29._file-~3elines%29%29\">file-&gt;lines</a>\n does exactly this, but we&rsquo;ll for-loop instead.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-read</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">filename</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/file-ports.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._with-input-from-file%29%29\">with-input-from-file</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">filename</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._~ce~bb%29%29\">&#955;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Flist%29%29\">for/list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">line</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-lines%29%29\">in-lines</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">line</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>When called with a filename like <span class=\"RktWrap\"><span class=\"RktVal\">\"heart-of-darkness.txt\"</span></span>, the function\n uses <a href=\"http://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Flist%29%29\">for/list</a> to build a list of lines by reading from a port\n with <a href=\"http://docs.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-lines%29%29\">in-lines</a>.\nThe port is the data from <span class=\"RktWrap\"><span class=\"RktSym\">filename</span></span>, thanks to <a href=\"http://docs.racket-lang.org/reference/file-ports.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._with-input-from-file%29%29\">with-input-from-file</a>.</p>\n\n<p>Next is a function to convert a list of strings into a list of lists of words.\nHere we&rsquo;ll just use library functions.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-split</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">lines</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Fmap..rkt%29._map%29%29\">map</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">string-split</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">lines</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>By default, <a href=\"http://docs.racket-lang.org/reference/strings.html#%28def._%28%28lib._racket%2Fstring..rkt%29._string-split%29%29\">string-split</a> divides a string into a list of whitespace-separated substrings.\nYou can always supply a different delimiter, or use <a href=\"http://docs.racket-lang.org/reference/regexp.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._regexp-split%29%29\">regexp-split</a>\n to divide by a regular expression.</p>\n\n<p>Two tasks left!\nFirst we generate all circular shifts for a list of strings <span class=\"RktWrap\"><span class=\"RktSym\">words</span></span>\n by folding up a list with one shift of <span class=\"RktWrap\"><span class=\"RktSym\">words</span></span> for each word.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">circular-shift</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">rest</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">first</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">all-circular-shifts</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Ffold%29%29\">for/fold</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">all-shifts</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">i</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-range%29%29\">in-range</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._length%29%29\">length</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">circular-shift</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">first</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">all-shifts</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">all-shifts</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>Second, we alphabetize and print the shifts.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">alphabetize</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">all-shifts</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Flist..rkt%29._sort%29%29\">sort</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">all-shifts</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">shift&lt;?</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">shift&lt;?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">shift1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">shift2</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">match*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">shift1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">shift2</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">destruct multiple values</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">first list empty, don</span><span class=\"RktCmt\">'</span><span class=\"RktCmt\">t care about second</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">#t</span><span class=\"RktPn\">]</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">first list non-empty, second empty</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">]</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">shift1-rest</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">shift2-rest</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/strings.html#%28def._%28%28quote._~23~25kernel%29._string~3c~3f%29%29\">string&lt;?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s2</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/strings.html#%28def._%28%28quote._~23~25kernel%29._string~3d~3f%29%29\">string=?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s1</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">s2</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">shift&lt;?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">shift1-rest</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">shift2-rest</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-display</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">all-sorted-shifts</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">display-words</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28quote._~23~25kernel%29._display%29%29\">display</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">first</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%29%29\">for</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">word</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-list%29%29\">in-list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cdr%29%29\">cdr</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28quote._~23~25kernel%29._display%29%29\">display</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\" \"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28quote._~23~25kernel%29._display%29%29\">display</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">word</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Byte_and_String_Output.html#%28def._%28%28quote._~23~25kernel%29._newline%29%29\">newline</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">for-each is like map, but returns (void)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Fmap..rkt%29._for-each%29%29\">for-each</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">display-words</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">all-sorted-shifts</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>Gluing it all together, here&rsquo;s the full script (with type annotations in comments).</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><a class=\"RktModLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/guide/Module_Syntax.html#%28part._hash-lang%29\"><span class=\"RktMod\">#lang</span></a><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><a class=\"RktModLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/index.html\"><span class=\"RktSym\">racket</span></a><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">type</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Words</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">=</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">(Listof</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">String)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">type</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Lines</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">=</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">(Listof</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Words)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Path-String</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">-&gt;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">(Listof</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">String)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-read</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">filename</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/file-ports.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._with-input-from-file%29%29\">with-input-from-file</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">filename</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._~ce~bb%29%29\">&#955;</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Flist%29%29\">for/list</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">line</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-lines%29%29\">in-lines</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">line</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">(Listof</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">String)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">-&gt;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Lines</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-split</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">lines</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Fmap..rkt%29._map%29%29\">map</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">string-split</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">lines</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Words</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">-&gt;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">(Listof</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Words)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">all-circular-shifts</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Ffold%29%29\">for/fold</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">all-shifts</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">i</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-range%29%29\">in-range</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._length%29%29\">length</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">circular-shift</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">first</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">all-shifts</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">all-shifts</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Move</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">first</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">element</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">last</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">position</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Words</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">-&gt;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Words</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">circular-shift</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">rest</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">first</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Lines</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">-&gt;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Lines</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">alphabetize</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">all-shifts</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Flist..rkt%29._sort%29%29\">sort</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">all-shifts</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">shift&lt;?</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Lexicographic</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">order</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">on</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">equal-length</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">lists</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">of</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">words</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Words</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Words</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">-&gt;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Boolean</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">shift&lt;?</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">shift1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">shift2</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">match*</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">shift1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">shift2</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">first</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">list</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">empty,</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">don't</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">care</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">about</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">second</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">#t</span><span class=\"RktPn\">]</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">first</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">list</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">non-empty,</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">second</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">empty</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">#f</span><span class=\"RktPn\">]</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">s1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">shift1-rest</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">s2</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">shift2-rest</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/strings.html#%28def._%28%28quote._~23~25kernel%29._string~3c~3f%29%29\">string&lt;?</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">s1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">s2</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/strings.html#%28def._%28%28quote._~23~25kernel%29._string~3d~3f%29%29\">string=?</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">s1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">s2</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/booleans.html#%28def._%28%28quote._~23~25kernel%29._not%29%29\">not</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._null~3f%29%29\">null?</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">shift1-rest</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">shift&lt;?</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">shift1-rest</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">shift2-rest</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Lines</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">-&gt;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Void</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-display</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">all-sorted-shifts</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">display-words</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28quote._~23~25kernel%29._display%29%29\">display</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">first</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%29%29\">for</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">word</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-list%29%29\">in-list</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cdr%29%29\">cdr</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28quote._~23~25kernel%29._display%29%29\">display</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28quote._~23~25kernel%29._display%29%29\">display</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">word</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Byte_and_String_Output.html#%28def._%28%28quote._~23~25kernel%29._newline%29%29\">newline</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Fmap..rkt%29._for-each%29%29\">for-each</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">display-words</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">all-sorted-shifts</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Lines</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">-&gt;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">(Listof</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Lines)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">all-circular-shifts*</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">lines</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Fmap..rkt%29._map%29%29\">map</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">all-circular-shifts</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">lines</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Path-String</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">-&gt;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Void</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-index</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">file-name</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">all-lines</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-split</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-read</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">file-name</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">all-shifts</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">append*</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">all-circular-shifts*</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">all-lines</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-display</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">alphabetize</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">all-shifts</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">End-to-end</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">test</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">-&gt;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Void</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">run-test</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">test-file</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"test.txt\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Make</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">file</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">and</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">test</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._unless%29%29\">unless</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Filesystem.html#%28def._%28%28quote._~23~25kernel%29._file-exists~3f%29%29\">file-exists?</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">test-file</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/file-ports.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._with-output-to-file%29%29\">with-output-to-file</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">test-file</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._~ce~bb%29%29\">&#955;</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"imagine</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">if</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">this\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"took</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">weeks</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">write\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-index</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">test-file</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">run-test</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>Running the file should print:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktVal\">2</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">weeks</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">to</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28quote._~23~25kernel%29._write%29%29\">write</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">took</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">this</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">imagine</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktSym\">imagine</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">this</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktSym\">this</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">imagine</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktSym\">to</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28quote._~23~25kernel%29._write%29%29\">write</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">took</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">2</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">weeks</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktSym\">took</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">2</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">weeks</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">to</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28quote._~23~25kernel%29._write%29%29\">write</a></span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktSym\">weeks</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">to</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28quote._~23~25kernel%29._write%29%29\">write</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">took</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">2</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28quote._~23~25kernel%29._write%29%29\">write</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">took</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">2</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">weeks</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">to</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<h1><a name=\"(part._.Testing_and_.Submodules)\"></a>Testing and Submodules</h1>\n\n<p>Any top-level expressions in a file can work as unit tests.\nThe <a href=\"http://docs.racket-lang.org/reference/booleans.html%3F#%28def._%28%28quote._~23~25kernel%29._equal~3f%29%29\">equal?</a> statement below checks whether the first circular shift\n of <span class=\"RktWrap\"><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"A\"</span><span class=\"stt\"> </span><span class=\"RktVal\">\"B\"</span><span class=\"stt\"> </span><span class=\"RktVal\">\"C\"</span><span class=\"RktVal\">)</span></span> is <span class=\"RktWrap\"><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"B\"</span><span class=\"stt\"> </span><span class=\"RktVal\">\"C\"</span><span class=\"stt\"> </span><span class=\"RktVal\">\"A\"</span><span class=\"RktVal\">)</span></span>.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">circular-shift</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">rest</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">first</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Equality.html#%28def._%28%28quote._~23~25kernel%29._equal~3f%29%29\">equal?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">circular-shift</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"A\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"B\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"C\"</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"B\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"C\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"A\"</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>Running the file now prints <span class=\"RktWrap\"><span class=\"RktVal\">#t</span></span> to the console, meaning the test passed.\nWe can use <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/exns.html#%28def._%28%28quote._~23~25kernel%29._error%29%29\">error</a></span></span> or <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/exns.html#%28def._%28%28quote._~23~25kernel%29._raise-user-error%29%29\">raise-user-error</a></span></span> to make failures easier\n to notice.\nOr we can use the <a href=\"http://docs.racket-lang.org/rackunit/api.html\">RackUnit</a> testing library.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">circular-shift</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">rest</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">first</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">rackunit</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">import the testing library</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">check-equal?</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">circular-shift</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"A\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"B\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"C\"</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"B\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"C\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"A\"</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>These tests run each time the module does.\nIf you prefer to run tests only in a specific context, and not when the\n module is run or imported as a library, you can move them to a separate\n file or into a <a href=\"http://docs.racket-lang.org/reference/eval-model.html#%28tech._submodule%29\">submodule</a>.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">circular-shift</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">rest</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">first</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._module%2B%29%29\">module+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">test</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Open a submodule named </span><span class=\"RktCmt\">'</span><span class=\"RktCmt\">test</span><span class=\"RktCmt\">'</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">rackunit</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">check-equal?</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">circular-shift</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"A\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"B\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"C\"</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"B\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"C\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"A\"</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>Running the module normally via <span class=\"stt\">racket kwic.rkt</span> will not run code\n in the submodule.\nInstead, use <span class=\"stt\">raco test</span> to run the tests.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3e%29%29\">&gt;</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">raco</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">test</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">kwic.rkt</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktSym\">raco</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">test:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._submod%29%29\">submod</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"kwic.rkt\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">test</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktVal\">1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">test</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">passed</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>The reason we used <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._module%2B%29%29\">module+</a></span></span>, instead of Racket&rsquo;s <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/module.html#%28form._%28%28quote._~23~25kernel%29._module%29%29\">module</a></span></span> and <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/module.html#%28form._%28%28quote._~23~25kernel%29._module%2A%29%29\">module*</a></span></span>\n forms is that <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._module%2B%29%29\">module+</a></span></span> inherits the language and namespace of its\n containing module and can be incrementally extended.\nThis way, we can keep tests near the relevant code.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._module%2B%29%29\">module+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">test</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">rackunit</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">circular-shift</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">rest</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">first</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._module%2B%29%29\">module+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">test</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">check-equal?</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">circular-shift</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"A\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"B\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"C\"</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"B\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"C\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"A\"</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">alphabetize</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">all-shifts</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Flist..rkt%29._sort%29%29\">sort</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">all-shifts</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">shift&lt;?</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._module%2B%29%29\">module+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">test</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">check-equal?</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">alphabetize</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"racket\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"is\"</span><span class=\"RktVal\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"as\"</span><span class=\"RktVal\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"racket\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"does\"</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"as\"</span><span class=\"RktVal\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"racket\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"does\"</span><span class=\"RktVal\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"racket\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"is\"</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p><a href=\"http://docs.racket-lang.org/rackunit/api.html\">RackUnit</a> in a\n separate file or <span class=\"RktWrap\"><span class=\"RktSym\">test</span></span> submodule is the unofficial standard for testing\n Racket programs.</p>\n\n<h1><a name=\"(part._.Recognizing_.Patterns__.Avoiding_.Repetition)\"></a>Recognizing Patterns, Avoiding Repetition</h1>\n\n<p>Every unit test we&rsquo;ve written uses <a href=\"http://docs.racket-lang.org/rackunit/api.html#%28def._%28%28lib._rackunit%2Fmain..rkt%29._check-equal~3f%29%29\">check-equal?</a>.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._module%2B%29%29\">module+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">test</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">check-equal?</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-split</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">check-equal?</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-split</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"hello</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">world\"</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"hello\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"world\"</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">check-equal?</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-split</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\" lost \"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\" in \"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"space\"</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"lost\"</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"in\"</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"space\"</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">check-equal?</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-split</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"something\"</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>These tests follow a simple pattern that we can express as a <span class=\"emph\">syntax rule</span>.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._module%2B%29%29\">module+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">test</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">check-equal?*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktSym\">i</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">o</span><span class=\"RktPn\">]</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/begin.html#%28form._%28%28quote._~23~25kernel%29._begin%29%29\">begin</a></span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">check-equal?</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">i</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">o</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">check-equal?*</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-split</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-split</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"hello</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">world\"</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"hello\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"world\"</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-split</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\" out \"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\" in \"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"the ozone\"</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"out\"</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"in\"</span><span class=\"RktVal\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"the\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"ozone\"</span><span class=\"RktVal\">)</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-split</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"something\"</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>The <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span></span> are not pseudocode!\nThey denote Kleene-star repetition, like a sextile (<span class=\"RktWrap\"><span class=\"RktVal\">\"*\"</span></span>) in a regular expression.\nIn this case, the input pattern is a sequence of lists with two S-expressions, <span class=\"RktWrap\"><span class=\"RktSym\">i</span></span> and\n <span class=\"RktWrap\"><span class=\"RktSym\">o</span></span>.\nUses of <span class=\"RktWrap\"><span class=\"RktSym\">i</span></span> and <span class=\"RktWrap\"><span class=\"RktSym\">o</span></span> in the rule must be followed by one <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span></span> to splice\n the captured S-expressions into the result.</p>\n\n<p>Many languages offer higher-order functions and polymorphism to abstract common\n behaviors.\nSyntax extensions are a different way to avoid repeating yourself.\nAfter 30 years, we are still discovering what syntax extensions are useful for.</p>\n\n<p>See this <a href=\"https://groups.google.com/forum/#!topic/racket-users/ss20lwfUhjs/discussion\">recent Racket mailing list post</a> for some applications.</p>\n\n<h1><a name=\"(part._.Adding_.Static_.Types)\"></a>Adding Static Types</h1>\n\n<p>Changing the <a href=\"http://docs.racket-lang.org/reference/reader.html#%28idx._%28gentag._79._%28lib._scribblings%2Freference%2Freference..scrbl%29%29%29\"><span class=\"stt\">#lang</span></a> line to <span class=\"RktWrap\"><span class=\"RktSym\">typed/racket</span></span> adds static type-checking to our program.\nIf we only change the language and run the code as-is, there will be type errors.\nBut we can use submodules again to incrementally check our design with types.</p>\n\n<p>Note: <a href=\"http://docs.racket-lang.org/ts-reference/Typed_Regions.html\">typed regions</a>\n are another way to embed typed code into untyped contexts.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><a class=\"RktModLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/guide/Module_Syntax.html#%28part._hash-lang%29\"><span class=\"RktMod\">#lang</span></a><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><a class=\"RktModLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/index.html\"><span class=\"RktSym\">racket</span></a><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/module.html#%28form._%28%28quote._~23~25kernel%29._module%29%29\">module</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">t</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">typed/racket</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Need</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">annotate:</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">-</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">function</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">parameters</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">-</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">for-loop</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">return</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">types</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">kwic-read</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Path-String</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-&gt;</span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">Listof</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">String</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-read</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">filename</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/file-ports.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._with-input-from-file%29%29\">with-input-from-file</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">filename</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._~ce~bb%29%29\">&#955;</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Flist%29%29\">for/list</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">line</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-lines%29%29\">in-lines</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">Listof</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">String</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">line</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Next</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">migration</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">step:</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">move</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">other</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">untyped</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">functions</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">here</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._provide%29%29\">provide</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._all-defined-out%29%29\">all-defined-out</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktSym\">t</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-split</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">lines</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Fmap..rkt%29._map%29%29\">map</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">string-split</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">lines</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">&lt;rest</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">of</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">file</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">omitted&gt;</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>After scooping all functions into the Typed Racket bubble, we can remove the\n submodule declaration and change <span class=\"stt\">#lang racket</span> to <span class=\"stt\">#lang typed/racket</span>.</p>\n\n<h1><a name=\"(part._.Finally__a_.Library)\"></a>Finally, a Library</h1>\n\n<p>Other modules can import our functions if we use a <a href=\"http://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._provide%29%29\">provide</a> statement.\nBy <a href=\"https://docs.racket-lang.org/style/Units_of_Code.html\">convention</a>, exports belong at the top of a file.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">#lang</span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\">typed/racket</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._provide%29%29\">provide</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">kwic-index</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">&lt;definitions</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">here&gt;</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>Then any typed or untyped module can use <span class=\"RktWrap\"><span class=\"RktSym\">kwic-index</span></span> by writing\n <span class=\"RktWrap\"><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"stt\"> </span><span class=\"RktVal\">\"kwic.rkt\"</span><span class=\"RktPn\">)</span></span>.</p>\n\n<p>As a finishing touch, we can use the <a href=\"http://docs.racket-lang.org/reference/Command-Line_Parsing.html\">racket/cmdline</a> library\n inside a <span class=\"stt\">main</span> submodule to give a basic front-end interface.\nSimilar to <span class=\"stt\">module+ test</span>, a <span class=\"stt\">module+ main</span> declares code that\n inherits the file&rsquo;s bindings and language but is only run when the program\n is executaed.</p>\n\n<p>Here is the complete typed and tested code listing.\nThe <span class=\"RktWrap\"><span class=\"RktSym\">main</span></span> submodule is at the bottom.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><a class=\"RktModLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/guide/Module_Syntax.html#%28part._hash-lang%29\"><span class=\"RktMod\">#lang</span></a><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><a class=\"RktModLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/ts-reference/index.html\"><span class=\"RktSym\">typed/racket</span></a><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._module%2B%29%29\">module+</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">test</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">typed/rackunit</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29\">define-syntax-rule</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">check-equal?*</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">[</span><span class=\"RktSym\">i</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">o</span><span class=\"RktPn\">]</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/begin.html#%28form._%28%28quote._~23~25kernel%29._begin%29%29\">begin</a></span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">check-equal?</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">i</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">o</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29\">...</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">define-type</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Words</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">Listof</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">String</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">define-type</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Lines</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">Listof</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Words</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">kwic-read</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Path-String</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-&gt;</span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">Listof</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">String</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-read</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">filename</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/file-ports.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._with-input-from-file%29%29\">with-input-from-file</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">filename</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._~ce~bb%29%29\">&#955;</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Flist%29%29\">for/list</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">line</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-lines%29%29\">in-lines</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">Listof</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">String</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">line</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._module%2B%29%29\">module+</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">test</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">tmpfile</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">make-temporary-file</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/file-ports.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._with-output-to-file%29%29\">with-output-to-file</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">tmpfile</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">#:exists</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktSym\">replace</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._~ce~bb%29%29\">&#955;</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"The</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">Nellie,\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">cruising</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">yawl,\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"swung</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">her</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">anchor</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">without</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">flutter</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">of</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">sails,\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"and</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">was</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">at</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">rest.\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">actual</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-read</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">tmpfile</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">expect</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">file-&gt;lines</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">tmpfile</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Filesystem.html#%28def._%28%28quote._~23~25kernel%29._delete-file%29%29\">delete-file</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">tmpfile</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">check-equal?</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">actual</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">expect</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">kwic-split</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">Listof</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">String</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-&gt;</span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Lines</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-split</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">lines</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Fmap..rkt%29._map%29%29\">map</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">#{</span><span class=\"RktSym\">string-split</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\">::</span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">String</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-&gt;</span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Words</span><span class=\"RktPn\">)</span><span class=\"RktPn\">}</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">lines</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._module%2B%29%29\">module+</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">test</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">check-equal?*</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-split</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-split</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"hello</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">world\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"hello\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"world\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Move</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">first</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">element</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">last</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">position</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">circular-shift</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Words</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-&gt;</span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Words</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">circular-shift</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._append%29%29\">append</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">rest</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">first</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._module%2B%29%29\">module+</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">test</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">check-equal?*</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">circular-shift</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"A\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"B\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"C\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"B\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"C\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"A\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">all-circular-shifts</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Words</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-&gt;</span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">Listof</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Words</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">all-circular-shifts</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Ffold%29%29\">for/fold</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">all-shifts</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">i</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-range%29%29\">in-range</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._length%29%29\">length</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">Listof</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Words</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">circular-shift</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">first</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">all-shifts</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">all-shifts</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._module%2B%29%29\">module+</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">test</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">check-equal?*</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">all-circular-shifts</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"A\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"B\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"C\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"C\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"A\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"B\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"B\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"C\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"A\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"A\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"B\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"C\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">alphabetize</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Lines</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-&gt;</span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Lines</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">alphabetize</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">all-shifts</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Flist..rkt%29._sort%29%29\">sort</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">all-shifts</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">shift&lt;?</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._module%2B%29%29\">module+</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">test</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">check-equal?*</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">alphabetize</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"A\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"B\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"C\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"B\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"C\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"A\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"A\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"A\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"B\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"C\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"B\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"C\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">Lexicographic</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">order</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">on</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">equal-length</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">lists</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">of</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">words</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">shift&lt;?</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Words</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Words</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-&gt;</span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Boolean</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">shift&lt;?</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">shift1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">shift2</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">match*</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">shift1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">shift2</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">first</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">list</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">empty,</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">don't</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">care</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">about</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">second</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">#t</span><span class=\"RktPn\">]</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">first</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">list</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">non-empty,</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">second</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">empty</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">#f</span><span class=\"RktPn\">]</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">s1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">shift1-rest</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">s2</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">shift2-rest</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._or%29%29\">or</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/strings.html#%28def._%28%28quote._~23~25kernel%29._string~3c~3f%29%29\">string&lt;?</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">s1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">s2</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29\">and</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/strings.html#%28def._%28%28quote._~23~25kernel%29._string~3d~3f%29%29\">string=?</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">s1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">s2</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">shift&lt;?</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">shift1-rest</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">shift2-rest</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._module%2B%29%29\">module+</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">test</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">check-equal?*</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">shift&lt;?</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">#t</span><span class=\"RktPn\">]</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktSym\">shift&lt;?</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"A\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"B\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"A\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"C\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">#t</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">kwic-display</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Lines</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-&gt;</span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Void</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-display</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">all-sorted-shifts</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">display-words</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Words</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-&gt;</span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Void</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">display-words</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28quote._~23~25kernel%29._display%29%29\">display</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">first</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%29%29\">for</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">word</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-list%29%29\">in-list</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cdr%29%29\">cdr</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">words</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28quote._~23~25kernel%29._display%29%29\">display</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28quote._~23~25kernel%29._display%29%29\">display</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">word</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Byte_and_String_Output.html#%28def._%28%28quote._~23~25kernel%29._newline%29%29\">newline</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Fmap..rkt%29._for-each%29%29\">for-each</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">display-words</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">all-sorted-shifts</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._module%2B%29%29\">module+</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">test</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/parameters.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._parameterize%29%29\">parameterize</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/port-ops.html#%28def._%28%28quote._~23~25kernel%29._current-output-port%29%29\">current-output-port</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stringport.html#%28def._%28%28quote._~23~25kernel%29._open-output-string%29%29\">open-output-string</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-display</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"A\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"B\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"C\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">check-equal?</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stringport.html#%28def._%28%28quote._~23~25kernel%29._get-output-string%29%29\">get-output-string</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/port-ops.html#%28def._%28%28quote._~23~25kernel%29._current-output-port%29%29\">current-output-port</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"A\\nB</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">C\\n\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">all-circular-shifts*</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Lines</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-&gt;</span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">Listof</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Lines</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">all-circular-shifts*</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">lines</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Fmap..rkt%29._map%29%29\">map</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">all-circular-shifts</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">lines</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._module%2B%29%29\">module+</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">test</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">check-equal?</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">all-circular-shifts*</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"A\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"B\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"C\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"D\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"C\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"A\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"B\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"B\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"C\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"A\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"A\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"B\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"C\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"D\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">kwic-index</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Path-String</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-&gt;</span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Void</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-index</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">file-name</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">all-lines</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-split</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-read</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">file-name</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">all-shifts</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">append*</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">all-circular-shifts*</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">all-lines</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-display</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">alphabetize</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">all-shifts</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._module%2B%29%29\">module+</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">test</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/parameters.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._parameterize%29%29\">parameterize</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/port-ops.html#%28def._%28%28quote._~23~25kernel%29._current-output-port%29%29\">current-output-port</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stringport.html#%28def._%28%28quote._~23~25kernel%29._open-output-string%29%29\">open-output-string</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">tmpfile</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">make-temporary-file</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/file-ports.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._with-output-to-file%29%29\">with-output-to-file</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">tmpfile</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">#:exists</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktSym\">replace</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._~ce~bb%29%29\">&#955;</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"imagine</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">if</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">this\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"took</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">weeks</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">write\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-index</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">tmpfile</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Filesystem.html#%28def._%28%28quote._~23~25kernel%29._delete-file%29%29\">delete-file</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">tmpfile</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">check-equal?</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stringport.html#%28def._%28%28quote._~23~25kernel%29._get-output-string%29%29\">get-output-string</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/port-ops.html#%28def._%28%28quote._~23~25kernel%29._current-output-port%29%29\">current-output-port</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">string-join</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktPn\">(</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">weeks</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">write</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">took\"</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"if</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">this</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">imagine\"</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"imagine</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">if</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">this\"</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"this</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">imagine</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">if\"</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">write</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">took</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">weeks\"</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"took</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">weeks</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">write\"</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"weeks</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">write</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">took</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2\"</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"write</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">took</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">weeks</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">to\\n\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"\\n\"</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\">&#160;</span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._module%2B%29%29\">module+</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">main</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">racket/cmdline</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">*output-to*</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">Parameterof</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Any</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">*output-to*</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/parameters.html#%28def._%28%28quote._~23~25kernel%29._make-parameter%29%29\">make-parameter</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">command-line</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">#:program</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"kwic</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">index\"</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">#:once-each</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">[</span><span class=\"RktPn\">(</span><span class=\"RktVal\">\"-o\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"--output\"</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">output-to</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">user-supplied</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">input</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"Write</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">output</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">file\"</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">*output-to*</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">output-to</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">update</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">the</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">parameter</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">*output-to*</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">#:args</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">file-name</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">output-to</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">*output-to*</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktCmt\">;</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">read</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">from</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">parameter</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">*output-to*</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">out-port</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/if.html#%28form._%28%28quote._~23~25kernel%29._if%29%29\">if</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/strings.html#%28def._%28%28quote._~23~25kernel%29._string~3f%29%29\">string?</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">output-to</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/file-ports.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._open-output-file%29%29\">open-output-file</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">output-to</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">#:exists</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quote.html#%28form._%28%28quote._~23~25kernel%29._quote%29%29\">'</a></span><span class=\"RktSym\">replace</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/port-ops.html#%28def._%28%28quote._~23~25kernel%29._current-output-port%29%29\">current-output-port</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/parameters.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._parameterize%29%29\">parameterize</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/port-ops.html#%28def._%28%28quote._~23~25kernel%29._current-output-port%29%29\">current-output-port</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">out-port</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">kwic-index</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\">cast</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">file-name</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">Path-String</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._when%29%29\">when</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/strings.html#%28def._%28%28quote._~23~25kernel%29._string~3f%29%29\">string?</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">output-to</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/port-ops.html#%28def._%28%28quote._~23~25kernel%29._close-output-port%29%29\">close-output-port</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">out-port</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p></p>\n\n<div class=\"SIntrapara\">Sample interactions:\n</div>\n\n<div class=\"SIntrapara\">\n <div class=\"SCodeFlow\">\n  <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n   <tbody>\n    <tr>\n     <td><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3e%29%29\">&gt;</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">racket</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">kwic.rkt</span><span class=\"RktMeta\"></span></td></tr>\n    <tr>\n     <td><span class=\"RktMeta\"></span><span class=\"RktSym\">kwic</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">index:</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">expects</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">1</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">&lt;file-name&gt;</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">on</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">the</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">command</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">line</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/quasiquote.html#%28form._%28%28quote._~23~25kernel%29._unquote%29%29\">,</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">given</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">0</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">arguments</span><span class=\"RktMeta\"></span></td></tr>\n    <tr>\n     <td><span class=\"RktMeta\">&#160;</span></td></tr>\n    <tr>\n     <td><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3e%29%29\">&gt;</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">echo</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">\"It</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">is</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">a</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">truth</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">universally</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">acknowledged\"</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3e%29%29\">&gt;</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">pride-and-prejudice.txt</span><span class=\"RktMeta\"></span></td></tr>\n    <tr>\n     <td><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3e%29%29\">&gt;</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">racket</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">kwic.rkt</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-o</span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">index.out</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">pride-and-prejudice.txt</span><span class=\"RktMeta\"></span></td></tr>\n    <tr>\n     <td><span class=\"RktMeta\"></span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3e%29%29\">&gt;</a></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">wc</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\"><span class=\"nobreak\">-l</span></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">index.out</span><span class=\"RktMeta\"></span></td></tr>\n    <tr>\n     <td><span class=\"RktMeta\"></span><span class=\"RktVal\">6</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktSym\">index.out</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div></div>\n\n<h1><a name=\"(part._.Closing)\"></a>Closing</h1>\n\n<p>We started with functions, wrote (and quarantined) unit tests,\n reinforced our design with types, and added a command-line interface.\nGoing forward we could add <a href=\"http://docs.racket-lang.org/scribble/index.html\">Scribble</a> documentation and share our work as a <a href=\"http://pkgn.racket-lang.org/\">package</a>.</p>\n\n<p></p>\n\n<div class=\"SIntrapara\">For more on building languages with Racket:\n</div>\n\n<div class=\"SIntrapara\">\n <ul>\n  <li>\n   <p><a href=\"http://www.hashcollision.org/brainfudge/\">Fudging up a Racket (html)</a></p></li>\n  <li>\n   <p><a href=\"http://dl.acm.org/authorize?6529547\">Creating Languages in Racket (pdf)</a></p></li>\n  <li>\n   <p><a href=\"http://www.ccs.neu.edu/home/matthias/manifesto/\">The Racket Manifesto (html)</a></p></li>\n  <li>\n   <p><a href=\"http://www.terohasu.net/hasu-flatt--els16--preprint.pdf\">Source-to-Source Compilation via Submodules (pdf)</a></p></li></ul></div>")) ((? . 54) f post (u . "Writing a paper with Scribble") (? . 54) 1731904015 (p+ #"/home/runner/work/website/website/blog/2019/02/17/writing-a-paper-with-scribble/index.html" . unix) (u . "/blog/2019/02/17/writing-a-paper-with-scribble/") (u . "2019-02-17T16:20:50") (? . 76) (? . 39) (c (u . "Scribble") c (u . "tutorial") c (u . "Author: Ben Greenman")) (u . "\n<p>This post explains how to get started using Scribble to write a research paper.</p>") #t (u . "\n<p>This post explains how to get started using Scribble to write a research paper.</p>\n<!-- more-->\n\n<hr />\n\n<blockquote>\n <p>This post was written using <a href=\"http://download.racket-lang.org/all-versions.html\">Racket 7.1</a> and <a href=\"https://github.com/racket/scribble/releases/tag/v7.1\">Scribble 1.29</a></p></blockquote>\n\n<p>Writing about research is always difficult,  but a compile-to-LaTeX tool can make the task easier. If your research code is written in the same language as the paper, then:</p>\n\n<ul>\n <li>the paper can import definitions from the research,  keeping a single point of control;</li>\n <li>the language&rsquo;s functional abstractions can help manage the writing;</li>\n <li>the language&rsquo;s drawing and/or plotting libraries can replace <a href=\"https://ctan.org/pkg/pgf?lang=en\">TikZ</a>;</li>\n <li>and you can write unit tests to validate the claims made in the paper.</li></ul>\n\n<p>Scribble, <a href=\"http://docs.racket-lang.org/scribble/index.html\">the Racket documentation tool</a>,  comes with a to-LaTeX compiler and a <a href=\"http://docs.racket-lang.org/scribble/ACM_Paper_Format.html\">scribble/acmart</a>  library tailored to the new <a href=\"https://ctan.org/pkg/acmart?lang=en\">ACM paper format</a>. I have been a pretty happy user of these tools. In the interest of attracting more happy users, this post  presents a short &ldquo;getting started&rdquo; guide  and links to some larger examples.</p>\n\n<blockquote>\n <p>For a Scribble tutorial, see the links in: <a href=\"/blog/2017/05/23/building-a-website-with-scribble/index.html\">Building a Website with Scribble</a></p></blockquote>\n\n<h2 id=\"getting-started-with-\">Getting started with <a href=\"http://docs.racket-lang.org/scribble/ACM_Paper_Format.html\">scribble/acmart</a></h2>\n\n<p>The first line of a <a href=\"http://docs.racket-lang.org/scribble/ACM_Paper_Format.html\">scribble/acmart</a> document sets the formatting options (similar to a LaTeX file using <code>acmart.cls</code>). For example, the <a href=\"https://conf.researchr.org/track/gpce-2018/gpce-2018#Call-for-Papers\">GPCE 2018 call for papers</a>  asks for anonymized <code>sigplan</code>-format submissions with line numbers and 10 point font. The proper Scribble incantation is:</p>\n\n<pre><code>#lang scribble/acmart @sigplan @anonymous @review @10pt</code></pre>\n\n<p>Next, you may want to import some definitions. If we have a file <code>references.rkt</code> (see below for a definition), we can import it as follows:</p>\n\n<pre><code>@require{references.rkt}</code></pre>\n\n<p>The third main ingredient is the title and author information:</p>\n\n<pre><code>@(define neu (affiliation #:institution \"Northeastern University\"))\n@(define anon (email \"anon@anon.net\"))\n\n@title{Writing a paper with Scribble}\n@author[#:affiliation neu #:email anon]{Ben Greenman}\n\n@; optional: set the author names in the page headers\n@elem[#:style \"Sshortauthors\"]{B. Greenman}</code></pre>\n\n<p>The paper is now ready to be written. You can forge ahead with a new <a href=\"http://docs.racket-lang.org/scribble/base.html#%28def._%28%28lib._scribble%2Fbase..rkt%29._section%29%29\">section</a>  and start adding content to the same file;  alternatively, you can organize the writing across different modules. In this post, we will use the main document as an outline and <a href=\"http://docs.racket-lang.org/scribble/base.html#%28form._%28%28lib._scribble%2Fbase..rkt%29._include-section%29%29\">import</a>  content from other modules:</p>\n\n<pre><code>@include-abstract{abstract.scrbl}\n@include-section{introduction.scrbl}</code></pre>\n\n<p>Finally, the main page is a good place to <a href=\"https://docs.racket-lang.org/scriblib/autobib.html\">generate the bibliography</a>. Assuming this document imports a file like the <code>references.rkt</code> below,  this expression inserts a bibliography titled &ldquo;References&rdquo;:</p>\n\n<pre><code>@generate-bibliography[#:sec-title \"References\"]</code></pre>\n\n<p>To build the document, invoke <code>scribble</code> on the command-line with the <code>--pdf</code> or <code>--latex</code>  options:</p>\n\n<pre><code>$ raco scribble --pdf FILE.scrbl</code></pre>\n\n<p>If all goes well, this command generates a <code>FILE.pdf</code> with properly-linked cross references.</p>\n\n<h3 id=\"auxiliary-files\">Auxiliary Files</h3>\n\n<p>If you save the code above to a file <code>example.scrbl</code> and save the files below  in the same directory, then you should be able to build an <code>example.pdf</code>.</p>\n\n<p>These files are available in a slightly different format at this link:</p>\n\n<ul>\n <li><a href=\"https://gitlab.com/bengreenman/scribble-acmart-example\">https://gitlab.com/bengreenman/scribble-acmart-example</a></li></ul>\n\n<h4 id=\"referencesrkt\"><code>references.rkt</code></h4>\n\n<pre><code>#lang racket/base\n\n(provide\n  ~cite citet generate-bibliography\n  fbf-icfp-2009)\n\n(require\n  scriblib/autobib)\n\n(define-cite ~cite citet generate-bibliography\n  #:style author+date-square-bracket-style)\n\n(define icfp \"ICFP\")\n\n(define fbf-icfp-2009\n  (make-bib\n    #:title \"Scribble: Closing the Book on Ad Hoc Documentation Tools\"\n    #:author (authors \"Matthew Flatt\" \"Eli Barzilay\" \"Robert Bruce Findler\")\n    #:location (proceedings-location icfp #:pages '(109 120))\n    #:date 2017))</code></pre>\n\n<h4 id=\"abstractscrbl\"><code>abstract.scrbl</code></h4>\n\n<pre><code>#lang scribble/acmart\n\nA simple Scribble document.</code></pre>\n\n<h4 id=\"introductionscrbl\"><code>introduction.scrbl</code></h4>\n\n<pre><code>#lang scribble/acmart\n@require{references.rkt}\n\n@; start with `title` instead of `section`, because importing via\n@;  `include-section` shifts all title/section/subsections down one level\n@title{Introduction}\n\nScribble creates a connection between a stand-alone document and the artifact\nit describes@~cite[fbf-icfp-2009].</code></pre>\n\n<h3 id=\"q-how-to-debug-scribble-error-messages\">Q. How to debug Scribble error messages?</h3>\n\n<p>If something goes wrong building a Scribble document, Racket is usually able to give a helpful error message.</p>\n\n<p>As a compile-time example, adding <code>@ foo</code> to a document produces the message  <code>unexpected whitespace after @</code> and you can either delete the whitespace  or change the <code>@</code> to <code>@\"@\"</code> for a literal <code>@</code>-sign.</p>\n\n<p>As a run-time example, adding <code>@(+ 2 2)</code> produces this message:</p>\n\n<pre><code>not valid in document body (need a pre-part for decode) in: 4</code></pre>\n\n<p>One fix is to convert <code>4</code> to a string, as in <code>@~a[(+ 2 2)]</code>.</p>\n\n<p>But if something goes wrong when Scribble renders a generated document to  PDF, the default error output is <strong>not</strong> likely to help. For example, adding <code>@elem[#:style \"oops\"]</code> to a document produces a giant  message:</p>\n\n<pre><code>$ raco scribble --pdf FILE.scrbl\n[[ ... 84K of output ... ]]\nOutput written on example.pdf (1 page, 277876 bytes).\nPDF statistics:\n 53 PDF objects out of 1000 (max. 8388607)\n 37 compressed objects within 1 object stream\n 7 named destinations out of 1000 (max. 500000)\n 36877 words of extra memory for PDF output out of 42996 (max. 10000000)\n\nrun-pdflatex: got error exit code\n  context...:\n  [[ ... 17 more lines ... ]]</code></pre>\n\n<p>The best way to debug these messages is to <strong>ignore them</strong> and use a LaTeX  compiler directly. For the &ldquo;oops&rdquo; mistake, LaTeX stops at the undefined control sequence &mdash; giving  a hint about how to find the problem:</p>\n\n<pre><code>$ raco scribble --latex FILE.scrbl\n$ pdflatex FILE.tex\n[[ ... 12KB of output ... ]]\n! Undefined control sequence.\nl.549 \\oops\n           {}\n? </code></pre>\n\n<h3 id=\"q-how-to-add-a-latex-style-file\">Q. How to add a LaTeX style file?</h3>\n\n<p>To add extra LaTeX code to the final document, create a new file and include  it with the <code>++style</code> command-line flag. This copies the contents of the style file into the generated document  (the copy appears near the top of the generated code).</p>\n\n<pre><code>$ raco scribble ++style style.tex --pdf FILE.scrbl</code></pre>\n\n<p>Here is an example style file.</p>\n\n<h4 id=\"styletex\"><code>style.tex</code></h4>\n\n<pre><code>\\settopmatter{printfolios=true,printccs=true,printacmref=true}\n% add page numbers etc.\n\n\\overfullrule=1mm\n% draw a black rectangle near lines that overflow the margin</code></pre>\n\n<p>Another way to add extra LaTeX code is to add a <a href=\"https://docs.racket-lang.org/scribble/core.html#%28def._%28%28lib._scribble%2Flatex-properties..rkt%29._tex-addition%29%29\"><code>tex-addition</code></a>  style property to the main title. This second approach makes it easy to include more than one file:</p>\n\n<pre><code>#lang scribble/acmart\n\n@require[\n  (only-in scribble/core make-style)\n  (only-in scribble/latex-properties make-tex-addition)]\n\n@(define extra-style-files\n   (list (make-tex-addition \"style.tex\")))\n\n@title[#:style (make-style #f extra-style-files)]{Writing a paper with Scribble}\n\n@; ....</code></pre>\n\n<h3 id=\"q-how-to-make-a-figure\">Q. How to make a figure?</h3>\n\n<p>Use the <a href=\"http://docs.racket-lang.org/scriblib/figure.html#%28def._%28%28lib._scriblib%2Ffigure..rkt%29._figure%29%29\">scriblib/figure</a>  library to add figures to a document.</p>\n\n<pre><code>@require[pict scriblib/figure]\n@figure[\n  \"fig:fish\"  @; figure tag, see `figure-ref`\n  @elem{A Standard Fish}  @; figure caption, appears below the content\n  @elem{fish = @(standard-fish 90 40)}]  @; content</code></pre>\n\n<p>The content of a figure can be almost anything that would work in the toplevel  of the document.</p>\n\n<h3 id=\"q-how-to-include-extra-files-pictures-latex\">Q. How to include extra files (pictures, LaTeX)?</h3>\n\n<p>The <code>++extra</code> command-line flag names an auxilliary file that Scribble should  include when rendering the document. This flag may be supplied more than once.</p>\n\n<p>For example, if a document includes the content of an external LaTeX file:</p>\n\n<pre><code>@elem[#:style \"input\"]{inline-this.tex}</code></pre>\n\n<p>then make sure to build the document with a command like this:</p>\n\n<pre><code>$ raco scribble ++style style.tex ++extra inline-this.tex FILE.scrbl</code></pre>\n\n<h4 id=\"inline-thistex\"><code>inline-this.tex</code></h4>\n\n<pre><code>% Raw LaTeX allowed here\n$\\lambda x.\\, x$</code></pre>\n\n<h3 id=\"q-what-about-in-line-latex\">Q. What about in-line LaTeX?</h3>\n\n<p>An <a href=\"https://docs.racket-lang.org/scribble/core.html#%28def._%28%28lib._scribble%2Fcore..rkt%29._element%29%29\">element</a>  with the <a href=\"https://docs.racket-lang.org/scribble/core.html#%28idx._%28gentag._60._%28lib._scribblings%2Fscribble%2Fscribble..scrbl%29%29%29\"><code>'exact-chars</code></a>  <a href=\"https://docs.racket-lang.org/scribble/core.html#%28tech._style._property%29\">style property</a>  renders directly to LaTeX.</p>\n\n<pre><code>@(define (exact . stuff)\n   @; the style name \"relax\" puts a `\\relax` no-op in front of the stuff\n   (make-element (make-style \"relax\" '(exact-chars)) stuff))\n\n@exact|{$\\lambda x.\\, x$}|\n@; ==&gt; \\relax{$\\lambda x.\\, x$}\n\n@(define ($ . math-stuff)\n   (apply exact (list \"$\" math-stuff \"$\")))\n\n@${\\lambda x.\\, x}\n@; ==&gt; \\relax{$\\lambda x.\\, x$}</code></pre>\n\n<h2 id=\"creating-a-httpdocsracket-langorgguidemodulesyntaxhtml28parthash-lang29lang-for-a-paper\">Creating a <a href=\"http://docs.racket-lang.org/guide/Module_Syntax.html#%28part._hash-lang%29\">#lang</a> for a paper</h2>\n\n<p>For a Scribble document that is split across multiple files, it can be helpful  to make a <code>#lang</code> that <a href=\"http://blog.racket-lang.org/2017/03/languages-as-dotfiles.html\">provides a common environment</a>. Instead of starting each file with a <code>require</code>, e.g.:</p>\n\n<h4 id=\"paperscrbl\"><code>paper.scrbl</code></h4>\n\n<pre><code>#lang scribble/acmart\n@require[\"references.rkt\" \"helper-functions.rkt\" scriblib/figure]\n\n....</code></pre>\n\n<p>files can start with a name that describes their common purpose:</p>\n\n<h4 id=\"paperscrbl\"><code>paper.scrbl</code></h4>\n\n<pre><code>#lang conference-2018-submission\n\n....</code></pre>\n\n<p>As a bonus, if the language is defined as a package then the Scribble document  can use Racket&rsquo;s dependency management tools:</p>\n\n<pre><code># to install the paper and interactively install dependencies:\n$ cd conference-2018-submission;\n$ raco pkg install\n\n# To check that the paper builds with no dependency issues:\n$ raco setup --check-pkg-deps conference-2018-submission\n\n# To run all unit tests\n$ raco test -c conference-2018-submission</code></pre>\n\n<p>To create a package and language:</p>\n\n<ol>\n <li>Move the Scribble document to a directory with the language name, i.e.,  <code>conference-2018-submission/</code></li>\n <li>Write a simple <code>info.rkt</code> to configure the package</li>\n <li>Create a normal Racket module that exports the common environment</li>\n <li>Create a <code>conference-2018-submission/lang/reader.rkt</code> module</li></ol>\n\n<p>Details below. For a full example, visit:</p>\n\n<ul>\n <li><a href=\"https://gitlab.com/bennn/scribble-acmart-example\">https://gitlab.com/bennn/scribble-acmart-example</a></li></ul>\n\n<hr />\n\n<h4 id=\"conference-2018-submissioninforkt\"><code>conference-2018-submission/info.rkt</code></h4>\n\n<p>This file defines the basic metadata for a package. For more about <code>info.rkt</code>, see: <a href=\"http://blog.racket-lang.org/2017/10/tutorial-creating-a-package.html\">Tutorial: Creating a Package</a>.</p>\n\n<pre><code>#lang info\n(define collection \"conference-2018-submission\")\n(define deps '(\"base\" \"scribble-lib\" \"at-exp-lib\"))\n(define build-deps '(\"racket-doc\" \"scribble-doc\"))\n(define pkg-desc \"Paper for Conference 2018\")\n(define version \"0.1\")</code></pre>\n\n<br />\n\n<h4 id=\"conference-2018-submissionmainrkt\"><code>conference-2018-submission/main.rkt</code></h4>\n\n<p>This file defines and exports the common environment for every file in our  Scribble document. In this example, the common environment is:  the <a href=\"http://docs.racket-lang.org/scribble/ACM_Paper_Format.html\">scribble/acmart</a> language,  the file &ldquo;references.rkt&rdquo;,  and the <a href=\"http://docs.racket-lang.org/scriblib/figure.html#%28def._%28%28lib._scriblib%2Ffigure..rkt%29._figure%29%29\">scriblib/figure</a> library.</p>\n\n<pre><code>#lang racket/base\n\n(provide\n  (all-from-out\n    scribble/acmart\n    scribble/acmart/lang\n    scriblib/figure\n    \"references.rkt\"))\n\n(require\n  scribble/acmart\n  scribble/acmart/lang\n  scriblib/figure\n  \"references.rkt\")</code></pre>\n\n<br />\n\n<h4 id=\"conference-2018-submissionlangreaderrkt\"><code>conference-2018-submission/lang/reader.rkt</code></h4>\n\n<p>This file:  (1) tells Racket to use the Scribble reader on <code>#lang conference-2018-submission</code>  modules, and (2) wraps the result of such modules in a shape that Scribble  expects.</p>\n\n<pre><code>#lang s-exp scribble/base/reader\nconference-2018-submission\n#:wrapper1 (lambda (t) (cons 'doc (t)))</code></pre>\n\n<h2 id=\"links-to-example-documents\">Links to Example Documents</h2>\n\n<p>These documents use the <code>#lang</code> approach to writing a paper with Scribble. Check their <code>main.rkt</code> for example formatting functions and unit tests,  and check the <code>.scrbl</code> files to see how the ideas above look in a larger document.</p>\n\n<ul>\n <li><a href=\"https://github.com/nuprl/retic_performance/tree/master/gm-pepm-2018\">https://github.com/nuprl/retic_performance/tree/master/gm-pepm-2018</a></li>\n <li><a href=\"https://github.com/nuprl/tag-sound/tree/master/gf-icfp-2018\">https://github.com/nuprl/tag-sound/tree/master/gf-icfp-2018</a></li></ul>\n\n<p>Finally, this repository provides a tool to start a new Scribble document:</p>\n\n<ul>\n <li><a href=\"https://pkgd.racket-lang.org/pkgn/package/gtp-paper\">https://pkgd.racket-lang.org/pkgn/package/gtp-paper</a></li></ul>\n\n<h2 id=\"further-reading\">Further Reading</h2>\n\n<ul>\n <li><a href=\"https://project.inria.fr/coqexchange/checking-machine-checked-proofs/\">Checking Machine-Checked Proofs</a></li></ul>")) ((? . 55) f post (u . "History of Actors") (? . 55) 1731904015 (p+ #"/home/runner/work/website/website/blog/2016/10/19/history-of-actors/index.html" . unix) (u . "/blog/2016/10/19/history-of-actors/") (u . "2016-10-19T17:26:16") (? . 56) (? . 57) (c (u . "history") c (u . "Author: Tony Garnock-Jones")) (u . "\n<p>Christos Dimoulas is currently teaching a <a href=\"http://www.seas.harvard.edu/courses/cs252/2016fa/\">&ldquo;History of Programming Languages&rdquo; class at Harvard</a>. The class is, as Christos writes, &ldquo;definitely not about <a href=\"https://www.levenez.com/lang/lang_letter.pdf\">this</a>&rdquo;; instead, each meeting is a deep examination of a single, mature research topic, in terms of three to five key papers from the literature.</p>\n\n<p>On Monday, I presented &ldquo;the History of Actors&rdquo; for the class. I&rsquo;ve made the written-out talk notes and an annotated bibliography available <a href=\"https://eighty-twenty.org/2016/10/18/actors-hopl\">here</a>.</p>") #f (u . "\n<p>Christos Dimoulas is currently teaching a <a href=\"http://www.seas.harvard.edu/courses/cs252/2016fa/\">&ldquo;History of Programming Languages&rdquo; class at Harvard</a>. The class is, as Christos writes, &ldquo;definitely not about <a href=\"https://www.levenez.com/lang/lang_letter.pdf\">this</a>&rdquo;; instead, each meeting is a deep examination of a single, mature research topic, in terms of three to five key papers from the literature.</p>\n\n<p>On Monday, I presented &ldquo;the History of Actors&rdquo; for the class. I&rsquo;ve made the written-out talk notes and an annotated bibliography available <a href=\"https://eighty-twenty.org/2016/10/18/actors-hopl\">here</a>.</p>")) ((? . 58) f post (u . "Gradual Typing Across the Spectrum, part II") (? . 58) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/08/22/gradual-typing-across-the-spectrum-part-ii/index.html" . unix) (u . "/blog/2017/08/22/gradual-typing-across-the-spectrum-part-ii/") (u . "2017-08-22T15:54:06") (? . 65) (? . 75) (c (u . "gradual typing") c (u . "PI meeting") c (u . "Author: Ben Greenman")) (u . "\n<p>Last week, Northeastern hosted a PI meeting for the <a href=\"http://prl.ccs.neu.edu/gtp/\">Gradual Typing Across the  Spectrum</a> NSF grant. The meeting was made of 20+ researchers from four institutions,  and 12 technical talks. Schedule:</p>\n\n<p><a href=\"http://prl.ccs.neu.edu/gtp/pi2017/pi2017.html\">http://prl.ccs.neu.edu/gtp/pi2017/pi2017.html</a></p>\n\n<p>A common thread among the talks was the question:  <em>how to convert a research idea into a tool for software developers?</em></p>") #t (u . "\n<p>Last week, Northeastern hosted a PI meeting for the <a href=\"http://prl.ccs.neu.edu/gtp/\">Gradual Typing Across the  Spectrum</a> NSF grant. The meeting was made of 20+ researchers from four institutions,  and 12 technical talks. Schedule:</p>\n\n<p><a href=\"http://prl.ccs.neu.edu/gtp/pi2017/pi2017.html\">http://prl.ccs.neu.edu/gtp/pi2017/pi2017.html</a></p>\n\n<p>A common thread among the talks was the question:  <em>how to convert a research idea into a tool for software developers?</em></p>\n<!-- more-->\n\n<p>In my mind, gradual typing <em>is</em> an answer to one instance of this question. The research idea is strong static type systems, and the software developers  are the millions using dynamically typed languages. I know that static typing can make programs easier to write and maintain. The developers know that dynamic typing has benefits; moreover they know better  than to migrate their code from one language to another on a whim. Gradual typing is a linguistic solution to the problem of <em>adding</em> the benefits  of static typing to a dynamically typed language.</p>\n\n<p>Enough opinions, let&rsquo;s talk about the talks.</p>\n\n<p>The morning session consisted of four talks:</p>\n\n<ul>\n <li>\n  <p><a href=\"https://www.cs.umd.edu/people/milod\">Milod Kazerounian</a> (<a href=\"https://www.cs.umd.edu/\">UMD</a>)  spoke about upgrading the <a href=\"https://github.com/plum-umd/rdl\">RDL</a> type checker  for Ruby with support for refinement types.  The idea is to compile Ruby code and types to <a href=\"https://emina.github.io/rosette/\">Rosette</a>,  and profit from <a href=\"http://yices.csl.sri.com/papers/cav2007.pdf\">SMT</a>-assisted type checking.</p></li>\n <li>\n  <p><a href=\"http://ambrosebs.com/\">Ambrose Bonnaire-Sergeant</a> (<a href=\"https://www.cs.indiana.edu/\">IU</a>, <a href=\"http://ambrosebs.com/talks/squash-work-boston-pi-2017.pdf\">slides</a>)  has been inferring <em>useful</em> <a href=\"http://typedclojure.org/\">Typed Clojure</a> types through dynamic analysis of  Clojure programs. His tool observes how values flow through a program at run-time,  then lifts these observations into possibly-recursive, possibly-incorrect type  annotations. The surprising result is that the tool quickly (1&ndash;2 seconds per  unit test, I think) infers types that can help a developer start annotating a program.</p></li>\n <li>\n  <p><a href=\"http://ccs.neu.edu/~types/\">Ben Greenman</a> (<a href=\"http://www.ccis.northeastern.edu/\">NEU</a>, <a href=\"http://homedirs.ccs.neu.edu/types/resources/talks/preservation-types.pdf\">slides</a>)  explained why he is implementing a semantics for <a href=\"https://github.com/racket/typed-racket\">Typed Racket</a>  inspired by Michael Vitousek&rsquo;s work on <a href=\"http://homes.soic.indiana.edu/mvitouse/papers/popl17.pdf\">Reticulated Python</a>.  The &ldquo;why&rdquo; is &ldquo;performance&rdquo;. The Reticulated semantics will enforce a  notion of tag soundness in kind of <a href=\"https://en.wikipedia.org/wiki/Deal_with_the_Devil\">devils contract</a>  to improve performance.</p></li>\n <li>\n  <p><a href=\"https://cs.brown.edu/~ptunnell/\">Preston Tunnell-Wilson</a> (<a href=\"http://cs.brown.edu/\">Brown</a>, <a href=\"http://cs.brown.edu/~sk/Publications/Papers/Published/tpk-crowdsource-lang-design/\">ONWARD 2017</a>)  recently sent questions about programming language design to  <a href=\"https://www.mturk.com/mturk/welcome\">Mechanical Turk</a> workers.  Survey says, developers have extremely diverse opinions about what they <em>expect</em>  and what they <em>want</em> regarding scope, inheritance, and infix operators.</p></li></ul>\n\n<p>In the early afternoon, we had two talks on similar themes as the morning session:</p>\n\n<ul>\n <li>\n  <p><a href=\"https://github.com/akuhlens\">Andre Kuhlenschmidt</a> (<a href=\"https://www.cs.indiana.edu/\">IU</a>)  is exploring the design space of efficient implementations for run-time type checks.  The main challenge is how to <em>monitor</em> higher-order data in a way that efficiently  performs type checks and can help the programmer debug any failed checks.  This talk presented data comparing two approaches to the program; I believe  the latter, improved approach is based on <a href=\"http://homepages.inf.ed.ac.uk/wadler/papers/coercions/coercions.pdf\">coercions</a>.</p></li>\n <li>\n  <p><a href=\"https://zeinamigeed.com/\">Zeina Migeed</a> (<a href=\"http://www.ccis.northeastern.edu/\">NEU</a>)  explained that there are many ways to adapt type soundness to a gradually  typed language, and presented some data comparing Typed Racket&rsquo;s <em>generalized soudness</em>  to Reticulated Python&rsquo;s <em>tag soundness</em>. The data suggests that tag soundness  never adds an order-of-magnitude slowdown.</p></li></ul>\n\n<p>Next on the schedule were two talks about implementing advanced type systems  in Racket&rsquo;s macro expander (think: meta-level linguistic re-use, capture-avoiding  substitution for free!)</p>\n\n<ul>\n <li>\n  <p><a href=\"https://github.com/iitalics\">Milo Turner</a> (<a href=\"http://www.ccis.northeastern.edu/\">NEU</a>)  first showed how to implement <a href=\"https://gankro.github.io/blah/linear-rust/#definitions-and-the-state-of-rust\">linear and affine</a>  type systems using <a href=\"http://docs.racket-lang.org/syntax/Parsing_Syntax.html\">syntax-parse</a>,  and second presented a simpler implementation using the <a href=\"http://docs.racket-lang.org/turnstile/index.html\">Turnstile</a> library.</p></li>\n <li>\n  <p><a href=\"http://www.davidchristiansen.dk/\">David Christiansen</a> (<a href=\"https://www.cs.indiana.edu/\">IU</a>)  is building <a href=\"https://github.com/david-christiansen/pudding\">a proof assistant</a>  in Racket. This talk focused on the design and implementation of proof  tactics.</p></li></ul>\n\n<p>After a short break, we heard about something completely different:</p>\n\n<ul>\n <li><a href=\"http://justinpombrio.net/\">Justin Pombrio</a> (<a href=\"http://cs.brown.edu/\">Brown</a>, <a href=\"http://cs.brown.edu/research/plt/dl/icfp2017/\">ICFP 2017</a>)  taught us to interpet the scoping rules of a &ldquo;core&rdquo; language as a preorder.  Using the preorder, he then showed how to <em>infer</em> the scoping rules of  any &ldquo;surface&rdquo; language based on its translation to the &ldquo;core&rdquo;.</li></ul>\n\n<p>Last summer and fall, Jeremy Siek hosted two REUs (<a href=\"https://www.nsf.gov/funding/pgm_summ.jsp?pims_id=5517&amp;from=fund\">research experience for undergraduates</a>) at Indiana University. The two students gave the next talks:</p>\n\n<ul>\n <li>\n  <p>Di Zhong (<a href=\"https://www.cs.indiana.edu/\">IU</a>)  talked about implementing interpreters in Racket, Python, and Haskell.  As I understand, this was a hands-on experience through <a href=\"https://www.cis.upenn.edu/~bcpierce/tapl/\">TAPL</a>  and <a href=\"https://redex.racket-lang.org/\">the Redex book</a>.</p></li>\n <li>\n  <p><a href=\"https://zeinamigeed.com/\">Zeina Migeed</a> (<a href=\"https://www.cs.indiana.edu/\">IU</a>)  demonstrated her implementation of <a href=\"http://theory.stanford.edu/~aiken/publications/papers/popl94.pdf\">conditional types</a>  for <a href=\"https://github.com/mvitousek/reticulated\">Reticulated</a>.</p></li></ul>\n\n<p>Finally,</p>\n\n<ul>\n <li><a href=\"https://nikivazou.github.io/\">Niki Vazou</a> (<a href=\"https://www.cs.umd.edu/\">UMD</a>)  presented a theory of gradual refinement types.  Any &ldquo;holes&rdquo; in the refinements introduce a search problem; type checking  attempts to solve the problem by finding a predicate that unifies a function  definition and its callers.</li></ul>\n\n<p>This meeting was a great opportunity to reflect on the recent past and  share opinions on what&rsquo;s worth pursuing in the future. Many thanks to the participants, and to the NSF for the support!</p>\n\n<blockquote>\n <p>If you want to know about the future, you need to ask the young people who will create it. Young people don&rsquo;t know what can&rsquo;t be done, and so they go ahead and do it. &mdash; <a href=\"https://www.youtube.com/watch?v=sM1bNR4DmhU\">Ivan Sutherland</a></p></blockquote>")) ((? . 59) f post (u . "The Racket School 2018: Create your own language") (? . 59) 1731904015 (p+ #"/home/runner/work/website/website/blog/2018/04/27/the-racket-school-2018-create-your-own-language/index.html" . unix) (u . "/blog/2018/04/27/the-racket-school-2018-create-your-own-language/") (u . "2018-04-27T21:35:22") (? . 37) (? . 79) (c (u . "event") c (u . "Racket") c (u . "Author: Ben Greenman")) (u . "\n<p>The Racket School 2018: Create your own language • 9–13 July • Salt Lake City</p>") #t (u . "\n<p>The Racket School 2018: Create your own language • 9–13 July • Salt Lake City</p>\n<!-- more-->\n\n<p>The Racket team has spent over thirty years developing and refining a coherent intellectual tradition for studying and building programming languages. This year’s school will introduce participants to Racket’s framework for language-oriented programming, which the summer school faculty recently spelled out in a a cover article in the <a href=\"https://tinyurl.com/RacketCACM\">Communications of the ACM</a></p>\n\n<p>Concretely, the 2018 Racket Summer School will cover the following topics:</p>\n\n<ul>\n <li>the spectrum of programming languages;</li>\n <li>modules and syntax, or languages as libraries;</li>\n <li>DrRacket’s support for language-oriented programming;</li>\n <li>a domain-specific language for adding types to languages;</li>\n <li>tools and techniques for implementing notational conveniences; and</li>\n <li>research challenges in language-oriented programming.</li></ul>\n\n<p>If these topics intrigue you, attend the Racket Summer School:</p>\n\n<ul>\n <li><a href=\"http://summer-school.racket-lang.org/2018/\">http://summer-school.racket-lang.org/2018/</a></li></ul>\n\n<p>This is not your run-of-the-mill summer school. We will do our best to make it exciting, entertaining, and useful to a broad spectrum of attendees, both academic and industrial.</p>\n\n<p>P.S. We will send you your first problem set in June, a month before the summer school to whet your appetite.</p>")) ((? . 28) f post (u . "Tutorial: Using Racket's FFI") (? . 28) 1731904015 (p+ #"/home/runner/work/website/website/blog/2016/06/27/tutorial-using-racket-s-ffi/index.html" . unix) (u . "/blog/2016/06/27/tutorial-using-racket-s-ffi/") (u . "2016-06-27T16:22:11") (? . 27) (? . 24) (c (u . "Racket") c (u . "FFI") c (u . "tutorial") c (u . "Author: Asumu Takikawa")) (u . "\n<p><span style=\"font-weight: bold\">Update:</span> this post is now part of a series. Part 2 is\n<a href=\"http://prl.ccs.neu.edu/blog/2016/06/29/tutorial-racket-ffi-part-2/\">here</a>\nand part 3 is\n<a href=\"http://prl.ccs.neu.edu/blog/2016/07/11/tutorial-racket-ffi-part-3/\">here</a>.</p>\n\n<p>I&rsquo;ve seen several people ask for a tutorial on Racket&rsquo;s foreign\nfunction interface (FFI), which allows you to dynamically load\nC libraries for use in Racket code. While I think the\n<a href=\"http://docs.racket-lang.org/foreign/index.html\">documentation</a>\nfor the FFI is quite good, it is a lot of information to process and\nthe overview examples may be tricky to run for a beginner.</p>\n\n<p>With that in mind, this blog post will provide a step-by-step tutorial\nfor Racket&rsquo;s FFI that requires minimal setup. All that you will need to\nfollow along is a copy of Racket and ideally a DrRacket window.</p>") #t (u . "\n<p><span style=\"font-weight: bold\">Update:</span> this post is now part of a series. Part 2 is\n<a href=\"http://prl.ccs.neu.edu/blog/2016/06/29/tutorial-racket-ffi-part-2/\">here</a>\nand part 3 is\n<a href=\"http://prl.ccs.neu.edu/blog/2016/07/11/tutorial-racket-ffi-part-3/\">here</a>.</p>\n\n<p>I&rsquo;ve seen several people ask for a tutorial on Racket&rsquo;s foreign\nfunction interface (FFI), which allows you to dynamically load\nC libraries for use in Racket code. While I think the\n<a href=\"http://docs.racket-lang.org/foreign/index.html\">documentation</a>\nfor the FFI is quite good, it is a lot of information to process and\nthe overview examples may be tricky to run for a beginner.</p>\n\n<p>With that in mind, this blog post will provide a step-by-step tutorial\nfor Racket&rsquo;s FFI that requires minimal setup. All that you will need to\nfollow along is a copy of Racket and ideally a DrRacket window.</p>\n<!--more-->\n\n<p>Before getting into the details, I wanted to note that the FFI library\nis based on the work of Eli Barzilay and Dmitry Orlovsky. They have\na Scheme Workshop <a href=\"http://www.ccs.neu.edu/racket/pubs/scheme04-bo.pdf\">paper</a>\nthat you can read if you&rsquo;re curious about the design.</p>\n\n<p>The tutorial will focus on using the <a href=\"https://www.cairographics.org/\">Cairo</a>\ngraphics library, mainly because it comes bundled with Racket.</p>\n\n<p>To start, let&rsquo;s aim to reproduce the output of the \"multi segment caps\"\nC sample code on Cairo&rsquo;s\n<a href=\"https://www.cairographics.org/samples/\">samples page</a>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_move_to</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">cr,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">50.0</span><span class=\"RktMeta\">,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">75.0</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_line_to</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">cr,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">200.0</span><span class=\"RktMeta\">,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">75.0</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">&#160;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_move_to</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">cr,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">50.0</span><span class=\"RktMeta\">,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">125.0</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_line_to</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">cr,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">200.0</span><span class=\"RktMeta\">,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">125.0</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">&#160;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_move_to</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">cr,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">50.0</span><span class=\"RktMeta\">,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">175.0</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_line_to</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">cr,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">200.0</span><span class=\"RktMeta\">,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">175.0</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">&#160;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_set_line_width</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">cr,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktVal\">30.0</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_set_line_cap</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">cr,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">CAIRO_LINE_CAP_ROUND</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_stroke</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">cr</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>In order to actually draw this example to the screen, we will need a Cairo\nsurface to draw on. So here is some boilerplate for you to execute before we\nactually play with the FFI:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">racket/draw</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">make-bitmap</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">256</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">256</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt-surface</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">send</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">get-handle</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>This uses the Racket drawing library <span class=\"RktWrap\"><a class=\"RktModLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/draw/index.html\"><span class=\"RktSym\">racket/draw</span></a></span> to construct\na bitmap object that we&rsquo;ll draw on. The <span class=\"RktWrap\"><span class=\"RktSym\">get-handle</span></span> method just extracts a\nlow-level Cairo surface value that we can use.</p>\n\n<p>NB: these code snippets don&rsquo;t come with a <span class=\"stt\">#lang</span> declaration because\nthey simulate interactions at the REPL/interaction area in DrRacket.\nWhen following along, just copy &amp; paste the snippets into your REPL.</p>\n\n<p>Our first real step is to import the FFI itself:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ffi/unsafe</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>As the module name suggests, the FFI is <span class=\"emph\">unsafe</span> and can cause your Racket process\nto segfault. If you&rsquo;re following along in DrRacket, you will want to save your file\nfrequently.</p>\n\n<p>Next, we can load the Cairo library to obtain a <a class=\"techoutside Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Loading_Foreign_Libraries.html#%28tech._foreign._library._value%29\"><span class=\"techinside\">foreign-library value</span></a>, which\nis a handle that we use to access C values and functions:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-lib</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Loading_Foreign_Libraries.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._ffi-lib%29%29\">ffi-lib</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>Since Cairo has already been loaded by the Racket process because of the\n<span class=\"RktWrap\"><a class=\"RktModLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/gui/index.html\"><span class=\"RktSym\">racket/gui</span></a></span> import earlier, we can supply <span class=\"RktWrap\"><span class=\"RktVal\">#f</span></span> here as an\nargument to <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Loading_Foreign_Libraries.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._ffi-lib%29%29\">ffi-lib</a></span></span>. Normally you supply the name of a shared\nlibrary file such as <span class=\"RktWrap\"><span class=\"RktVal\">\"libcairo\"</span></span>:</p>\n\n<div class=\"SCodeFlow\">\n <p><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-lib</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Loading_Foreign_Libraries.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._ffi-lib%29%29\">ffi-lib</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"libcairo\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">\"2\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></p></div>\n\n<p>The last list argument specifies the accepted versions (<span class=\"RktWrap\"><span class=\"RktVal\">#f</span></span> allows\na version-less library). For this post, those details aren&rsquo;t important but\nsee the docs on <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Loading_Foreign_Libraries.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._ffi-lib%29%29\">ffi-lib</a></span></span> if you&rsquo;re curious.</p>\n\n<h1><a name=\"(part._.Extracting_functions)\"></a>Extracting functions</h1>\n\n<p>Since the Racket FFI is a dynamic interface, we can pull out C functions\nat run-time using the <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Loading_Foreign_Libraries.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._get-ffi-obj%29%29\">get-ffi-obj</a></span></span> function. The <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Loading_Foreign_Libraries.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._get-ffi-obj%29%29\">get-ffi-obj</a></span></span>\nfunction takes three arguments:</p>\n\n<ul>\n <li>\n  <p>The name of the value as a string (or symbol or bytestring)</p></li>\n <li>\n  <p>a foreign library value, and</p></li>\n <li>\n  <p>a <a class=\"techoutside Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/types.html#%28tech._c._type%29\"><span class=\"techinside\">C type</span></a>, which is a type description that tells\nthe FFI how to marshall between Racket and C.</p></li></ul>\n\n<p>C types are a crucial concept for the FFI. They range from relatively\nsimple types like <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__int%29%29\">_int</a></span></span> and <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Pointer_Types.html#%28def._%28%28quote._~23~25foreign%29.__pointer%29%29\">_pointer</a></span></span> to more complicated\ntype constructors such as <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Enumerations_and_Masks.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__enum%29%29\">_enum</a></span></span> and <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span></span>. As you probably noticed,\nC types are prefixed with an underscore by convention. You can also define\nyour own types by calling <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/ctype.html#%28def._%28%28quote._~23~25foreign%29._make-ctype%29%29\">make-ctype</a></span></span> with two functions that\nhandle marshalling between C and Racket code.</p>\n\n<p>To make progress with our Cairo code, we need to create a drawing context from\nthe surface object <span class=\"RktWrap\"><span class=\"RktSym\">bt-surface</span></span> that we defined a while ago. The\nrelevant function in the Cairo docs is\n<a href=\"https://www.cairographics.org/manual/cairo-cairo-t.html#cairo-create\"><span class=\"stt\">cairo_create</span></a>,\nwhich has the following type signature:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktCmt\">/*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">NB:</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">this</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">is</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">C</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">code</span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">*/</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_t</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">*</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_create</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">cairo_surface_t</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">*target</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p></p>\n\n<div class=\"SIntrapara\">To use this function from Racket, we will need to create a C type that describes\nits behavior. As you can see, the function takes a pointer to a <span class=\"stt\">cairo_surface_t</span> and\nreturns a pointer to a <span class=\"stt\">cairo_t</span>. Let&rsquo;s start with a very simple C type\nthat matches up with this behavior: </div>\n\n<div class=\"SIntrapara\">\n <div class=\"SCodeFlow\">\n  <p><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Pointer_Types.html#%28def._%28%28quote._~23~25foreign%29.__pointer%29%29\">_pointer</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Pointer_Types.html#%28def._%28%28quote._~23~25foreign%29.__pointer%29%29\">_pointer</a></span><span class=\"RktPn\">)</span></p></div></div>\n\n<div class=\"SIntrapara\">This type provides very little safety (in particular, it lets you mix up different\nkinds of pointers), but it will work as a first step.\nNote that the FFI library uses infix arrow notation for its <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span></span> type.</div>\n\n<p>The following definition shows how to use this type to obtain a foreign\nfunction:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-create</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Loading_Foreign_Libraries.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._get-ffi-obj%29%29\">get-ffi-obj</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"cairo_create\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-lib</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Pointer_Types.html#%28def._%28%28quote._~23~25foreign%29.__pointer%29%29\">_pointer</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Pointer_Types.html#%28def._%28%28quote._~23~25foreign%29.__pointer%29%29\">_pointer</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>Then we can use <span class=\"RktWrap\"><span class=\"RktSym\">cairo-create</span></span> as an ordinary racket function:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-create</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt-surface</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">ctx</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#&lt;cpointer&gt;</span></p></td></tr></tbody></table></div>\n\n<h1><a name=\"(part._.Interlude__more_type_safety)\"></a>Interlude: more type safety</h1>\n\n<p>Before we move on to completing the Cairo sample, lets consider the safety of the\nC type we used again. Since we only specified <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Pointer_Types.html#%28def._%28%28quote._~23~25foreign%29.__pointer%29%29\">_pointer</a></span></span> types, it is easy\nto accidentally misuse the function:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">You may not want to actually run this</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">a cairo_t is not a cairo_surface_t</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-create</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-create</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt-surface</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>To prevent such bad uses, it is good practice to use <span class=\"emph\">tagged</span> pointer types\nusing <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_tagged-pointers.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._define-cpointer-type%29%29\">define-cpointer-type</a></span></span>. Here are two example definitions that\ncorrespond to the <span class=\"stt\">cairo_t</span> and <span class=\"stt\">cairo_surface_t</span> types from earlier:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">The leading underscores are mandatory</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_tagged-pointers.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._define-cpointer-type%29%29\">define-cpointer-type</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_tagged-pointers.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._define-cpointer-type%29%29\">define-cpointer-type</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_surface_t</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>We can then redefine <span class=\"RktWrap\"><span class=\"RktSym\">cairo-create</span></span> with a better type, which will\nprevent ill-typed calls:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-create</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Loading_Foreign_Libraries.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._get-ffi-obj%29%29\">get-ffi-obj</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"cairo_create\"</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-lib</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_surface_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-create</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-create</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt-surface</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktErr\">cairo_surface_t-&gt;C: argument is not non-null</span></p></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktErr\">`cairo_surface_t' pointer</span></p></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktErr\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktErr\">argument: #&lt;cpointer:cairo_t&gt;</span></p></td></tr></tbody></table></div>\n\n<p>Unfortunately our old definition of <span class=\"RktWrap\"><span class=\"RktSym\">ctx</span></span> doesn&rsquo;t have this tag:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_tagged-pointers.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._cpointer-has-tag~3f%29%29\">cpointer-has-tag?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">cairo_t</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#f</span></p></td></tr></tbody></table></div>\n\n<p>Which means we will see errors if we try to use it in future interactions with\nthe more precise C type. To get around this, it&rsquo;s also possible to update\nexisting pointers with a tag like this:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_tagged-pointers.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._cpointer-push-tag%21%29%29\">cpointer-push-tag!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">cairo_t</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_tagged-pointers.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._cpointer-has-tag~3f%29%29\">cpointer-has-tag?</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">cairo_t</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#t</span></p></td></tr></tbody></table></div>\n\n<p>Executing the tag push above is necessary to get some of the following snippets\nto work (if you are following along step-by-step).</p>\n\n<h1><a name=\"(part._.Macros_for_reducing_boilerplate)\"></a>Macros for reducing boilerplate</h1>\n\n<p>Now let&rsquo;s start building the FFI bindings for the functions in the Cairo sample.\nFirst, let&rsquo;s go ahead and look at all of the types for the sample functions\nfrom the C API docs:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">void</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_move_to</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">cairo_t</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">*cr,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">double</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">x,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">double</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">y</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">void</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_line_to</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">cairo_t</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">*cr,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">double</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">x,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">double</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">y</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">void</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_set_line_width</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">cairo_t</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">*cr,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">double</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">width</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">void</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_set_line_cap</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">cairo_t</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">*cr,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_line_cap_t</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">line_cap</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">void</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_stroke</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">(</span><span class=\"RktMeta\">cairo_t</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">*cr</span><span class=\"RktPn\">)</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>Starting with <span class=\"stt\">cairo_move_to</span>, we can set up a definition like we did\nwith <span class=\"stt\">cairo_create</span> before:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-move-to</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Loading_Foreign_Libraries.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._get-ffi-obj%29%29\">get-ffi-obj</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">\"cairo_move_to\"</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">cairo-lib</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Pointer_Types.html#%28def._%28%28quote._~23~25foreign%29.__pointer%29%29\">_pointer</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Other_Atomic_Types.html#%28def._%28%28quote._~23~25foreign%29.__void%29%29\">_void</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>This starts to look awfully verbose once you start writing more of these\ndefinitions. Luckily, the FFI library comes with some definition forms\nin the <span class=\"RktWrap\"><a class=\"RktModLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Defining_Bindings.html\"><span class=\"RktSym\">ffi/unsafe/define</span></a></span> library that help reduce the\nverbosity. Here&rsquo;s an alternative definition of <span class=\"RktWrap\"><span class=\"RktSym\">cairo-move-to</span></span>\nusing the <span class=\"RktWrap\"><span class=\"RktSym\">define-ffi-definer</span></span> form from\n<span class=\"RktWrap\"><a class=\"RktModLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Defining_Bindings.html\"><span class=\"RktSym\">ffi/unsafe/define</span></a></span>.</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ffi/unsafe/define</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">define-ffi-definer</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-lib</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-move-to</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Other_Atomic_Types.html#%28def._%28%28quote._~23~25foreign%29.__void%29%29\">_void</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">#:c-id</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo_move_to</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>As you can see, the <span class=\"RktWrap\"><span class=\"RktSym\">define-ffi-definer</span></span> form lets you define a\nnew macro that lets you avoid writing the library value over and over.\nIf you stick to using C-style identifiers with underscores (e.g.,\n<span class=\"RktWrap\"><span class=\"RktSym\">cairo_move_to</span></span>) you also don&rsquo;t need to supply the C name either.</p>\n\n<p>The definitions for <span class=\"stt\">cairo_line_to</span>, <span class=\"stt\">cairo_set_line_width</span>, and\n<span class=\"stt\">cairo_stroke</span> aren&rsquo;t very interesting, so I&rsquo;ll just include them\nbelow without comment:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-line-to</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Other_Atomic_Types.html#%28def._%28%28quote._~23~25foreign%29.__void%29%29\">_void</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">#:c-id</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo_line_to</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-set-line-width</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Other_Atomic_Types.html#%28def._%28%28quote._~23~25foreign%29.__void%29%29\">_void</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">#:c-id</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo_set_line_width</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-stroke</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Other_Atomic_Types.html#%28def._%28%28quote._~23~25foreign%29.__void%29%29\">_void</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">#:c-id</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo_stroke</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>The <span class=\"stt\">cairo_set_line_cap</span> case is more interesting because the type\n<span class=\"stt\">cairo_line_cap_t</span> is a C enumeration type. Racket&rsquo;s FFI comes with\nconvenience forms for defining enumeration types&#8212;\n <wbr />though it&rsquo;s possible\nto encode them yourself too. The general philosophy of the Racket FFI\nis to keep the C parts to a minimum and let you build abstractions\nin Racket libraries. Here&rsquo;s a quote from the Barzilay and Orlovsky\npaper on that:</p>\n\n<blockquote class=\"SubFlow\">\n <p>Our design follows a simple principle: keep C-level\nfunctionality to a minimum.</p></blockquote>\n\n<p>and specifically about enumerations:</p>\n\n<blockquote class=\"SubFlow\">\n <p>For example, the C level part of our interface does not commit to a\nspecific implementation for enumerations &#8212; it simply exposes C integers.</p></blockquote>\n\n<p>To define an enumeration, we can use the <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Enumerations_and_Masks.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__enum%29%29\">_enum</a></span></span> form. This procedure\nsets up a new C type which converts between Racket symbols and the underlying\ninteger representations. For the <span class=\"stt\">cairo_line_cap_t</span> type, it suffices to\njust supply the cases as a list of symbols:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_line_cap_t</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Enumerations_and_Masks.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__enum%29%29\">_enum</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">butt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">round</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">square</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>The exact symbols that we specify are not important, since they just map to\nintegers anyway. The choice depends on what is convenient for the Racket interface.\nIt&rsquo;s also possible to specify how the symbols map to integers more precisely\n(see the docs on <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Enumerations_and_Masks.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__enum%29%29\">_enum</a></span></span> for those details).</p>\n\n<p>Given this type, we can specify the type for the line cap function:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-set-line-cap</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_line_cap_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Other_Atomic_Types.html#%28def._%28%28quote._~23~25foreign%29.__void%29%29\">_void</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">#:c-id</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo_set_line_cap</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<h1><a name=\"(part._.Putting_it_all_together)\"></a>Putting it all together</h1>\n\n<p>Now that we have foreign function definitions for all of the relevant procedures,\nwe can just transcribe the example from the beginning into Racket syntax:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-move-to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">50.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">75.0</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-line-to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">200.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">75.0</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-move-to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">50.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">125.0</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-line-to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">200.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">125.0</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-move-to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">50.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">175.0</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-line-to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">200.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">175.0</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-set-line-width</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">30.0</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-set-line-cap</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">round</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-stroke</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>Executing these procedure calls will draw into the Cairo surface we set up earlier,\nwhich is connected to our original Racket bitmap object <span class=\"RktWrap\"><span class=\"RktSym\">bt</span></span>. To see the\nresults of what we drew, we can just evaluate <span class=\"RktWrap\"><span class=\"RktSym\">bt</span></span> at the REPL. But it&rsquo;s\na little nicer if we use the <span class=\"RktWrap\"><a class=\"RktModLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/pict/index.html\"><span class=\"RktSym\">pict</span></a></span> library to draw a frame around\nit to distinguish it from the background:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pict</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">linewidth</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">frame</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bitmap</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><img src=\"/blog/img/posts/2016-06-27-tutorial-using-racket-s-ffi/pict.png\" alt=\"image\" height=\"262\" style=\"vertical-align: 0px; margin: -3px -3px -3px -3px;\" width=\"262\" /></p></td></tr></tbody></table></div>\n\n<p>And we&rsquo;re done! Of course, there is a lot more to the FFI. For example, I haven&rsquo;t\ncovered how to handle C functions that return multiple results through pointer\narguments. Or how to interoperate between Racket and C structs. I&rsquo;m hoping to\ncover these in a future blog post, but in the meantime happy FFI hacking!</p>")) ((? . 60) f post (u . "[Toward Type-Preserving Compilation of Coq, at POPL17 SRC (cross-post)](https://williamjbowman.com/blog/2017/01/03/toward-type-preserving-compilation-of-coq-at-popl17-src/)") (? . 60) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/01/03/-toward-type-preserving-compilation-of-coq-at-popl17-src-cross-post-https-williamjbowman-com-blog-2017-01-03-toward-type-preserving-compilation-of-coq-at-popl17-src/index.html" . unix) (u . "/blog/2017/01/03/-toward-type-preserving-compilation-of-coq-at-popl17-src-cross-post-https-williamjbowman-com-blog-2017-01-03-toward-type-preserving-compilation-of-coq-at-popl17-src/") (u . "2017-01-03T15:15:57") (? . 61) (? . 62) (c (u . "Author: William J. Bowman")) (? . 5) #f (? . 5)) ((? . 63) f post (u . "Java and Migratory Typing") (? . 63) 1731904015 (p+ #"/home/runner/work/website/website/blog/2018/12/02/java-and-migratory-typing/index.html" . unix) (u . "/blog/2018/12/02/java-and-migratory-typing/") (u . "2018-12-02T14:41:53") (? . 33) (? . 77) (c (u . "migratory typing") c (u . "java") c (u . "transient") c (u . "Author: Ben Greenman")) (u . "\n<p>The <em>transient</em> approach to migratory typing (circa <a href=\"http://homes.sice.indiana.edu/mvitouse/papers/dls14.pdf\">2014</a>)  is similar to type erasure in Java (circa <a href=\"https://docs.oracle.com/javase/1.5.0/docs/relnotes/features.html\">2004</a>)  in a few interesting ways.</p>") #t (u . "\n<p>The <em>transient</em> approach to migratory typing (circa <a href=\"http://homes.sice.indiana.edu/mvitouse/papers/dls14.pdf\">2014</a>)  is similar to type erasure in Java (circa <a href=\"https://docs.oracle.com/javase/1.5.0/docs/relnotes/features.html\">2004</a>)  in a few interesting ways.</p>\n<!-- more-->\n\n<h2 id=\"migratory-typing\">Migratory typing</h2>\n\n<p>The goal of <em>migratory typing</em> is to enrich the type system of a language  without breaking backwards compatibility. Ideally, code that uses the enriched types:</p>\n\n<ul>\n <li>(G1) benefits from new ahead-of-time checks,</li>\n <li>(G2) benefits from stronger run-time guarantees, and</li>\n <li>(G3) may interact with all kinds of existing code.</li></ul>\n\n<p>There are tradeoffs involved in the implementation of a migratory typing  system, however, and (as we will see) different implementations may focus on  different goals than the three above.</p>\n\n<p>A typical migratory typing system adds a static type checker to a dynamically  typed language (<a href=\"/blog/2018/10/06/a-spectrum-of-type-soundness-and-performance/index.html\">examples</a>),  but one could also extend the type system of a statically-typed language;  for example, by <a href=\"https://hal.inria.fr/hal-01629909v2\">adding dependent types</a>. In this sense, Java 1.5.0 is a migratory typing system for pre-generics Java. The addition of generic types enabled new ahead-of-time checks and maintained backwards  compatibility with existing Java code.</p>\n\n<p>Java&rsquo;s implementation of migratory typing has some interesting things in common  with the <em>transient</em> implementation strategy recently proposed by  Michael Vitousek and collaborators (<a href=\"http://homes.sice.indiana.edu/mvitouse/papers/dls14.pdf\">DLS&rsquo;14</a>, <a href=\"https://mail.google.com/mail/u/0/h/1atrn21qlyrrh/?&amp;\">POPL&rsquo;17</a>). The goal of this post is to demonstrate the connections.</p>\n\n<h2 id=\"erasure-migratory-typing\">Erasure migratory typing</h2>\n\n<p>Before we compare Java 1.5.0 to transient, let&rsquo;s review a simpler strategy:  the <em>erasure</em> approach to migratory typing.</p>\n\n<p><a href=\"https://www.typescriptlang.org/\">TypeScript</a> is a great (modern) example of the erasure approach. TypeScript is a migratory typing system for JavaScript. A TypeScript module gets validated by an ahead-of-time type checker and  compiles to JavaScript. After compilation, any JavaScript program may import bindings  from the generated code. Conversely, a TypeScript module may import bindings from a JavaScript module  by declaring a static type for each binding.</p>\n\n<blockquote>\n <p>The <a href=\"http://definitelytyped.org/\">DefinitelyTyped</a> repository provides TypeScript type definitions for many JavaScript libraries.</p></blockquote>\n\n<p>The TypeScript compiler erases types;  every type <code>T</code> in the source code translates to the universal &ldquo;JavaScript type&rdquo;. For instance, a TypeScript function declaration compiles to an untyped  JavaScript function:</p>\n\n<pre><code>(function (n0 : number, n1 : number) { return n0 + n1; })\n\n// ==(compiles to)==&gt;\n\n(function (n0, n1) { return n0 + n1; })</code></pre>\n\n<p>TypeScript satisfies goals <strong>G1</strong> and <strong>G3</strong> for a migratory typing system  because its type checker adds ahead-of-time checks and its  compiler outputs JavaScript. TypeScript does not satisfy goal <strong>G2</strong> because the compiler erases types. In terms of the example above, the compiled function may be invoked with any  pair of JavaScript values; the variable <code>n0</code> is not guaranteed to point  to a <code>number</code> at run-time. On one hand, this means the type annotations have no effect on the behavior  of a program &mdash; and in particular, cannot be trusted for debugging. On the other hand, it means that an experienced JavaScript programmer can  re-use their knowledge to predict the behavior of a TypeScript program.</p>\n\n<p>In an ordinary program, the run-time guarantees of TypeScript are simply  the run-time guarantees of JavaScript:</p>\n\n<ul>\n <li>if a TypeScript expression <code>e</code> has the static type <code>T</code> and evaluates to  a value <code>v</code>,  then the only guarantee is that <code>v</code> is a valid JavaScript value  (e.g., <code>T</code> could be <code>number</code> and <code>v</code> could be an incompatible object).</li></ul>\n\n<h2 id=\"transient-migratory-typing\">Transient migratory typing</h2>\n\n<p><a href=\"https://github.com/mvitousek/reticulated\">Reticulated</a> is a migratory typing  system for Python that follows a <em>transient</em> implementation strategy. A Reticulated module gets type-checked and compiles to a Python module that  defends itself from certain type-invalid inputs through the use of  assertions that run in near-constant time. The type-checking addresses goal <strong>G1</strong>,  the compilation to Python provides interoperability (goal <strong>G3</strong>),  and the assertions partially meet goal <strong>G2</strong>.</p>\n\n<blockquote>\n <p>These <em>certain</em> inputs are the ones that would cause a standard typed operational semantics to reach an undefined state. For a discussion of <em>near-constant</em>, see <a href=\"http://www.ccs.neu.edu/home/types/publications/publications.html#gm-pepm-2018\"><em>On the Cost of Type-Tag Soundness</em>, section 2</a>.</p></blockquote>\n\n<p>For example, here is a Reticulated function  that computes the average of a list of numbers:</p>\n\n<pre><code># Reticulated (commit e478343)\ndef average(nums : List(Float)) -&gt; Float:\n  if ns:\n    return sum(ns) / len(ns)\n  else:\n    raise ValueError(\"average: expected non-empty list\")</code></pre>\n\n<p>and here is the Python code it compiles to:</p>\n\n<pre><code>from retic.runtime import *\nfrom retic.transient import *\nfrom retic.typing import *\n\ndef average(nums):\n    check_type_list(nums)\n    if ns:\n        return check_type_float((check_type_function(sum)(ns) / check_type_function(len)(ns)))\n    else:\n        raise check_type_function(ValueError)('average: expected non-empty list')</code></pre>\n\n<blockquote>\n <p>Note: the Reticulated syntax for type annotations is similar to the one proposed in <a href=\"https://www.python.org/dev/peps/pep-0484/\">PEP 484</a>, but not identical. For example, Reticulated does not require forward references to be embedded in strings.</p></blockquote>\n\n<p>The Reticulated compiler removes all type annotations and inserts <code>check_type</code>  assertions throughout the code. In <code>average</code>, these assertions check that: (1) the input is a list,  (2) the output is a <code>float</code>, (3) and the names <code>sum</code> <code>len</code> and  <code>ValueError</code> point to callable values. That&rsquo;s all. The assertions <strong>do not check</strong> that <code>nums</code> contains only floating-point  numbers.</p>\n\n<blockquote>\n <p>The assertions also do not check that the function bound to <code>sum</code> is defined for a single argument, which is arguably a bug. Scaling a model to an implementation is always challenging.</p></blockquote>\n\n<p>If <code>nums</code> contains something other than floating point numbers, then the  call to <code>average</code> may cause <code>sum</code> to raise an exception or it may silently  compute a nonsense result. The behavior depends on the implementation of <code>sum</code> in the same way that  the behavior of a TypeScript function depends on any JavaScript functions  that it invokes.</p>\n\n<p>Reticulated does not erase types, nor does it fully enforce types. Every type in a Reticulated module translates to its  top-level type constructor <code>C(T)</code>, e.g.:</p>\n\n<pre><code>  C(Float)                = Float\n  C(List(Float))          = List\n  C(List(Float) -&gt; Float) = -&gt;</code></pre>\n\n<p>Consequently, Reticulated has a slightly stronger run-time guarantee than Python:</p>\n\n<ul>\n <li>if <code>e</code> is an expression with static type <code>T</code> that evaluates to a value <code>v</code>,  then <code>v</code> is guaranteed to have a top-level shape that matches the <code>C(T)</code>  constructor.</li></ul>\n\n<h2 id=\"java-migratory-typing\">Java migratory typing</h2>\n\n<p>Java 1.5.0 added <a href=\"https://www.jcp.org/en/jsr/detail?id=14\">generic types</a>  to the Java 1.4.0 type system. The benefit of generics is that a programmer can:  write one class definition,  use the definition in a few different contexts,  and receive specific feedback from the type checker in each context.</p>\n\n<h3 id=\"review-generic-types\">Review: generic types</h3>\n\n<p>Suppose we want to write a <code>Box</code> class that holds some kind of value;  the value could be an <code>Integer</code> or a <code>String</code> or anything else. Here is a pre-generics definition:</p>\n\n<pre><code>class Box {\n  private Object val;\n\n  public Box(Object val) { this.set(val); }\n\n  public void set(Object val) { this.val = val; }\n\n  public Object get() { return this.val; }\n}</code></pre>\n\n<p>With this definition is it possible to make boxes that hold different types  of values:</p>\n\n<pre><code>// good!\nBox iBox = new Box(new Integer(4));\nBox sBox = new Box(new String(\"X\"));</code></pre>\n\n<p>but it is also possible to &ldquo;change the type&rdquo; of the contents of a <code>Box</code>:</p>\n\n<pre><code>// maybe bad!\niBox.set(new String(\"not a number\"));</code></pre>\n\n<p>and some calls to <code>get</code> must be followed by a type cast:</p>\n\n<pre><code>// annoying!\n((String) sBox.get()).charAt(0);</code></pre>\n\n<hr />\n\n<p>With generics, we can give a name (e.g. <code>ValType</code>) to &ldquo;the type of the value inside a box&rdquo;:</p>\n\n<pre><code>class GBox&lt;ValType&gt; {\n  private ValType val;\n\n  public GBox(ValType val) { this.set(val); }\n\n  public void set(ValType val) { this.val = val; }\n\n  public ValType get() { return this.val; }\n}</code></pre>\n\n<p>and now we can tell the type checker to check different boxes differently (satisfying goal <strong>G1</strong>):</p>\n\n<pre><code>GBox&lt;Integer&gt; iBox = new GBox&lt;Integer&gt;(new Integer(0));\nGBox&lt;String&gt; sBox = new GBox&lt;String&gt;(new String(\"A\"));\n\n// iBox.set(new String(\"not a number\")); // Type Error, good!\n\nsBox.get().charAt(0); // no cast, good!</code></pre>\n\n<h3 id=\"backwards-compatibility--danger\">Backwards compatibility &amp; danger</h3>\n\n<p>Java generics are backwards-compatible with older code (goal <strong>G3</strong>). This means that pre-generics code can interact with instances of a generic  class. Vice-versa, generic code can interact with pre-generics classes. Since pre-generics code is not aware of type parameters, these interactions  are potentially unsafe. For example, a pre-generics method can change the type of a <code>GBox</code>:</p>\n\n<pre><code>// Java 1.4.0 method\npublic static void evil(GBox b) { b.set(666); }\n\n// Java 1.5.0 method\npublic static void test() {\n  GBox&lt;String&gt; sBox = new GBox&lt;String&gt;(new String(\"A\"));\n  evil(sBox); // OK, but generates unchecked warning\n  sBox.get().charAt(0);\n}</code></pre>\n\n<p>The code above passes the type checker (with a warning about the <code>evil</code> method),  and so it <em>seems</em> as though running the code will run the nonsense  method call <code>666.charAt(0)</code> and lead to evil behavior. The actual result, however, is a cast error immediately after the call  <code>sBox.get()</code> returns.</p>\n\n<p>Based on the cast error, we can tell that  the compiler does not trust the type <code>GBox&lt;String&gt;</code> and  inserts a run-time check that the result of the <code>.get()</code> is a string object.</p>\n\n<blockquote>\n <p>&ldquo;Calling legacy code from generic code is inherently dangerous; once you mix generic code with non-generic legacy code, all the safety guarantees that the generic type system usually provides are void.&rdquo; <a href=\"https://www.oracle.com/technetwork/java/javase/generics-tutorial-159168.pdf\">Generics in the Java Programming Language, Section 6.1</a></p></blockquote>\n\n<h3 id=\"java-type-erasure\">Java Type Erasure</h3>\n\n<p>In order to support pre-generics and post-generics code on the same  <a href=\"https://docs.oracle.com/javase/specs/jvms/se11/html/index.html\">virtual machine</a>,  the Java compiler <a href=\"https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-4.6\">erases</a>  generic type parameters after type-checking. Everywhere that the compiled code depends on an erased type, such as the  <code>String</code> in <code>GBox&lt;String&gt;</code> above, Java adds a cast to prove to the Java Virtual Machine (JVM)  that the erased bytecode is type-safe. (A smarter JVM type system might be able to prove that some casts are  unnecessary via <a href=\"https://www2.ccs.neu.edu/racket/pubs/icfp10-thf.pdf\">occurrence typing</a>.)</p>\n\n<p>After erasure, the <code>GBox&lt;ValType&gt;</code> class declaration loses its parameter:</p>\n\n<pre><code>// Erase `ValType`, replace with `Object`\nclass GBox {\n  private Object val;\n\n  public GBox(Object val) { this.set(val); }\n\n  public void set(Object val) { this.val = val; }\n\n  public Object get() { return this.val; }\n}</code></pre>\n\n<p>and the client code gains a cast:</p>\n\n<pre><code>GBox sBox = new GBox(new String(\"A\"));\n\n((String) sBox.get()).charAt(0);</code></pre>\n\n<p>So far, so good. But it&rsquo;s worth noting that erasure can cause problems with Java arrays. An array needs to know the run-time type of its elements, so the following &ldquo;natural&rdquo; definition of an <code>ArrayList</code> is not permitted:</p>\n\n<pre><code>class ArrayList&lt;T&gt; {\n  private T[] data;\n  private int size;\n\n  public ArrayList(int capacity) {\n    data = new T[capacity];\n    size = 0;\n  }\n\n  public T get(int ix) {\n    // TODO bounds check\n    return data[ix]\n  }\n\n  // ....\n}</code></pre>\n\n<p>The trouble is that <code>T</code> does not say anything about the data that a new array needs to handle:</p>\n\n<pre><code>ArrayList.java:6: error: generic array creation\n    data = new T[capacity];</code></pre>\n\n<p>The only work-arounds require an array of objects and unchecked casts. One solution is to unsafely cast the array to the generic type:</p>\n\n<pre><code>  // possibly dangerous, if `data` is aliased to an `Object[]`\n  public ArrayList(int capacity) {\n    data = (T[]) new Object[capacity];\n    size = 0;\n  }</code></pre>\n\n<p>The other is to unsafely cast array elements in the <code>get</code> method, and elsewhere:</p>\n\n<pre><code>class ArrayList&lt;T&gt; {\n  private Object[] data;\n  private int size;\n\n  public ArrayList(int capacity) {\n    data = new Object[capacity];\n    size = 0;\n  }\n\n  public T get(int ix) {\n    boundsCheck(ix);\n    return (T) data[ix];\n  }\n\n  // ....\n}</code></pre>\n\n<p>Both may potentially lead to <a href=\"http://www.angelikalanger.com/GenericsFAQ/FAQSections/TechnicalDetails.html#FAQ050\">heap pollution</a>.</p>\n\n<blockquote>\n <p>\"The decision not to make all generic types [not erased] is one of the most crucial, and controversial design decisions involving the type system of the Java programming language.</p>\n <p>\"Ultimately, the most important motivation for this decision is compatibility with existing code.\" <a href=\"https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-4.7\">Java Language Specification, section 4.7</a></p></blockquote>\n\n<h3 id=\"run-time-guarantees\">Run-time guarantees</h3>\n\n<p>By contrast to Reticulated&rsquo;s <code>C(T)</code> transformation, the following <code>G(T)</code>  transformation describes generic-type erasure,  where <code>T&lt;T1&gt;</code> describes a type <code>T</code> with parameter <code>T1</code>  and <code>A[T1, T2]</code> describes a type variable <code>A</code> with lower bound <code>T1</code> and upper bound <code>T2</code>:</p>\n\n<pre><code>  G(T&lt;T1&gt;)     = G(T)\n  G(A[T1, T2]) = G(T1)\n  G(T)         = T      otherwise</code></pre>\n\n<p>If generic-type erasure results in a type mismatch (e.g., in <code>sBox.get().charAt(0)</code> above),  the compiler inserts a cast. The inserted casts led to the run-time error in the previous example, and  provide the following run-time guarantee:</p>\n\n<ul>\n <li>if <code>e</code> is an expression with static type <code>T</code> that evaluates to a value <code>v</code>,  then <code>v</code> is guaranteed to match the (bytecode) type <code>G(T)</code></li></ul>\n\n<h2 id=\"discussion\">Discussion</h2>\n\n<p>TypeScript, Reticulated Python, and Java 1.5.0 each improved the type system  of an existing language, but maintained backwards compatibility with existing  code. The name <a href=\"http://drops.dagstuhl.de/opus/volltexte/2017/7120/\">migratory typing</a>  describes this kind of language extension.</p>\n\n<blockquote>\n <p><a href=\"http://drops.dagstuhl.de/opus/volltexte/2015/5031/\">Gradual typing</a> is a similar; a gradual type system starts with a statically-typed language and adds dynamic typing in a principled way (<a href=\"https://pleiad.cl/papers/2016/garciaAl-popl2016.pdf\">example</a>).</p></blockquote>\n\n<p>The TypeScript team had a choice between erasing types and enforcing types. They chose to erase types and run all code (typed or untyped) at the level  of JavaScript. (Some TypeScript <a href=\"https://lorefnon.tech/2018/03/25/typescript-and-validations-at-runtime-boundaries/\">libraries</a>, however, can enforce some types.)</p>\n\n<blockquote>\n <p>TypeScript is not the only erasure language, nor is it the first. The oldest (I think) is <a href=\"http://www.softwarepreservation.org/projects/LISP/maclisp_family/\">MACLISP</a>. For an erasure manifesto, see <a href=\"http://bracha.org/pluggableTypesPosition.pdf\">Pluggable Type Systems</a>.</p></blockquote>\n\n<p>The Reticulated team faced an analogous choice, and chose to enforce the top-level  shape of values in typed code (<a href=\"http://homes.sice.indiana.edu/mvitouse/papers/popl17.pdf\">POPL 2017</a>). It will be interesting to see if this guarantee helps developers maintain programs,  or if it is too shallow to be much use. The <a href=\"https://www.pyret.org/index.html\">Pyret</a> language has been successful with  comparable shallow checks.</p>\n\n<blockquote>\n <p>Note: the POPL 2017 paper advertises an &ldquo;open-world soundness&rdquo;, but I do not see how this idea is different from the older idea of soundness in a multi-language system (<a href=\"https://www.eecs.northwestern.edu/~robby/pubs/papers/toplas09-mf.pdf\">TOPLAS 2009</a>, <a href=\"https://www2.ccs.neu.edu/racket/pubs/dls06-tf.pdf\">DLS 2006</a>).</p></blockquote>\n\n<p>Similarly, the Java team chose to erase generic types in Java 1.5.0 and use shallow casts in the JVM. The casts around type-erased generics provide a minimal level of safety &mdash;  enough to prevent the use of a generic object from corrupting the state of a  VM instance.</p>\n\n<p>Alternatively, Java could enforce full generic types at run-time. Over the years there have been a few proposals to do so (<a href=\"http://gafter.blogspot.com/2006/11/reified-generics-for-java.html\">example 1</a>,  <a href=\"https://wiki.openjdk.java.net/display/valhalla/Main\">example 2</a>). The C# language has a similar type system and enforces  generics at run-time (sources:  <a href=\"https://mattwarren.org/2018/03/02/How-generics-were-added-to-.NET/\">blog post</a>,  <a href=\"https://www.microsoft.com/en-us/research/publication/design-and-implementation-of-generics-for-the-net-common-language-runtime/\">PLDI 2001 paper</a>,  <a href=\"https://dl.acm.org/citation.cfm?doid=378795.378797\">backup link to paper</a>)</p>\n\n<h2 id=\"acknowledgments\">Acknowledgments</h2>\n\n<p>Thank you to <a href=\"https://github.com/rmculpepper\">Ryan Culpepper</a> and <a href=\"http://users.eecs.northwestern.edu/~jesse/\">Jesse Tov</a> for noticing the similarity between  Java&rsquo;s generic-type erasure and transient migratory typing. Jesse commented on an early version of this post, supplied new Java example code, and explained the trouble with generics and arrays.</p>")) ((? . 64) f post (u . "PRL Offsite 2019 Retrospective") (? . 64) 1731904015 (p+ #"/home/runner/work/website/website/blog/2019/12/12/prl-offsite-2019-retrospective/index.html" . unix) (u . "/blog/2019/12/12/prl-offsite-2019-retrospective/") (u . "2019-12-12T12:51:53") (? . 70) (? . 73) (c (u . "offsite") c (u . "Author: Ben Greenman") c (u . "Author: Olek Gierczak")) (u . "\n<p>On November 11th 2019, the PRL had a private offsite meeting at the  <a href=\"https://mtwyouth.org\">More Than Words bookstore</a> in downtown Boston. For future offsite organizers, this post records what happened and how.</p>") #t (u . "\n<p>On November 11th 2019, the PRL had a private offsite meeting at the  <a href=\"https://mtwyouth.org\">More Than Words bookstore</a> in downtown Boston. For future offsite organizers, this post records what happened and how.</p>\n<!-- more-->\n\n<h2 id=\"early-planning-goals\">Early Planning, Goals</h2>\n\n<p>Every Fall, the PRL holds a kickoff meeting to assign  <a href=\"http://prl.ccs.neu.edu/contact\">roles</a> for the coming academic year. This year, Prof. Amal Ahmed led the meeting and expressed interest in having  a retreat at some point. Seconds later, Amal enlisted Olek Gierczak and Ben Greenman  to help plan a retreat.</p>\n\n<blockquote>\n <p>Ben G. was on the (unsuccessful) 2018 retreat planning committee. The three lessons from that year were: (1) Veterans Day is a possible date in the Fall, (2) there are approximately zero possible dates in the Spring and Summer, (3) the <a href=\"http://www.warrencenter.com\">Warren Conference Center</a> is <a href=\"https://www.northeastern.edu/events/northeastern-owned-off-campus-venues\">Northeastern University&rsquo;s only franchised</a> off-campus venue.</p></blockquote>\n\n<p>The <strong>motivation</strong> for the retreat was to bring our growing department together  for one day in the hope that everyone has (at least) a small interaction with  everyone else. These little interactions are crucial for new Ph.D. students &mdash; both to get  to know the group, and to become known. They&rsquo;re also useful for everyone else to build a stronger community and  to open doors for collaboration. And yet, despite the fact that these interactions are an admittedly key benefit  of having a lab, the last time the PRL got all together in a big way (more  than a few hours for PL seminar or Ph.D. open house) was for the  <a href=\"http://www.ccs.neu.edu/home/matthias/7480-s17/index.html\">Spring 2017 edition</a>  of HOPL.</p>\n\n<p>Our primary <strong>goal</strong> this year was for every Ph.D student to present research. Time permitting, we wanted a keynote speaker, a panel discussion, and activities. Weather permitting, we wanted to go outside during lunch.</p>\n\n<p>In light of the main goal, we prefer to call the event an &ldquo;offsite&rdquo;  (or &ldquo;offsite meeting&rdquo;) rather than a &ldquo;retreat&rdquo; because the target was an  informative day rather than a relaxing one.</p>\n\n<h2 id=\"booking-and-logistics\">Booking and Logistics</h2>\n\n<p>Our planning went like this: (1) pick a date, (2) find a venue, (3) invite a keynote  speaker, (4) order food, and (5) arrange the technical program. The process took 2 months because that&rsquo;s all we had.</p>\n\n<h3 id=\"date--nov-11\">Date = Nov 11</h3>\n\n<p>In the beginning, we chose Veterans&rsquo; Day (2019&ndash;11&ndash;11) and Northeastern <a href=\"https://registrar.northeastern.edu/app/uploads/2019-2020-University-Wide-Calendar-List.pdf\">reading  day</a>  (2019&ndash;12&ndash;05) as possible dates. We ended up with Veterans&rsquo; Day.</p>\n\n<p>A small number of lab members were opposed to Veterans&rsquo; Day. They gave two reasons: the Fall semester is especially busy, and Veterans&rsquo; Day  is a federal holiday.</p>\n\n<h3 id=\"venue--mtw\">Venue = MTW</h3>\n\n<p>The first venue we tried was the <a href=\"http://www.warrencenter.com\">Warren Conference Center</a> in  Framingham. The venue was difficult to contact. We submitted an online form; no response. We searched the website for contact email addresses; no luck. We called the office, got forwarded to the event manager, and left a message; no response. Lastly we asked the <a href=\"https://www.khoury.northeastern.edu/people/chelsea-smith/\">Khoury Events Team</a>  to reach out on our behalf. They returned with an email address and  <a href=\"/blog/static/warren-center-meetings-and-retreats.pdf\">event menu</a>  (Thank you Chelsea and Donald!)  and we decided the Warren Center was not a good fit for our small and short-notice offsite.</p>\n<!-- Donald Pepple (Northeastern) made contact with Christine Barisano (Framingham)-->\n\n<p>Second, we contacted the <a href=\"https://alumni.northeastern.edu/about/alumni-center/\">Northeastern University Alumni Center</a>. They were not open on Veterans&rsquo; Day 2019.</p>\n\n<p>Third, we turned to Google and Yelp for venue options in New England. Most were at a corporate-level price range, but this search led to our  winner: <a href=\"https://mtwyouth.org\">More Than Words</a>.</p>\n\n<p>More Than Words (MTW) is a bookstore and event space. We got in touch via email, visited the store, and then booked. Easy!</p>\n\n<blockquote>\n <p>More Than Words is also a nonprofit social enterprise that offers job training for ~350 young adults each year. If you visit, you&rsquo;ll see a mix of &ldquo;employees&rdquo; and &ldquo;volunteers&rdquo; helping out.</p></blockquote>\n\n<p>Booking was complicated, though, by the fact that Northeastern requires  <a href=\"http://catalog.northeastern.edu/graduate/health-sciences/academic-policies-procedures/liability-insurance/\">liability insurance</a>  for all off-campus events. If <strong>you</strong> are booking an event, get a contract from the venue well ahead  of time and allow 2 to 4 weeks for Northeastern to process and sign it. We received our contract with 1 week until the payment was due and were very  fortunate that the Northeastern administrative staff met the deadline.</p>\n\n<p>Here are more facts about MTW:</p>\n\n<ul>\n <li>the theater space seats 30 with lots of extra space</li>\n <li>the two long tables in the reading room can seat about 20</li>\n <li>the projector is 16:9 native and accepts HDMI input; bring your own HDMI adaptor</li>\n <li>there&rsquo;s no whiteboard, but MTW can supply an easel stand</li>\n <li>much of the furniture in store is antique and for sale, so be careful using  it &mdash; both to avoid damaging it, and because antiques can be oddly-shaped</li>\n <li>the bookstore was closed on Veterans&rsquo; Day, but we were able to have our  event and buy books</li>\n <li>MTW may have fridge space to temporarily hold leftovers</li>\n <li>closest T station: <a href=\"https://www.mbta.com/stops/place-tumnl\">Tufts Medical Center</a></li></ul>\n\n<h3 id=\"keynote--none\">Keynote = None</h3>\n\n<p>The original, ambitious plan was to invite two keynote speakers &mdash; one working  in industry and one from academia &mdash; to enrich the offsite  with new knowledge. And because this was the PRL&rsquo;s first offsite, it was decided that these speakers  must have roughly-equal research overlap with every Ph.D. student. (Later meetings could specialize.)</p>\n\n<p>We failed to come up with many candidates that met our goal, and so we  fell back to a simpler plan: pick one. To this end, we sent out a Google Form to assess preferences and research overlap. The form responses indicated a clear favorite, who we invited.</p>\n\n<p>Our chosen speaker, however, was unable to attend. Rather than invite a different guest, we replaced the keynote time with a  morning activity (more on that later).</p>\n<!-- to future planners: we invited Kathi Fisler; she had grant-writing plans for that day and would be interested in coming to a future offsite-->\n\n<h3 id=\"food-coffee-tea\">Food, Coffee, Tea</h3>\n\n<p><a href=\"https://flourbakery.com/\">Flour Bakery + Cafe</a> provided lunch. For most days, you can order from Flour using an <a href=\"https://flourbakery.com/menu/catering/catering-information/\">online form</a>. For holidays, you may need to send an email &mdash; that&rsquo;s what we did, and  the catering staff quickly helped us place an order. We ordered 16 assorted meat sandwiches, 16 assorted veggie sandwiches, 4 vegan hummus  sandwiches, and 2 vegan &amp; gluten-free <em>everything spiced</em> salads.</p>\n\n<p><a href=\"https://www.trycuppacoffee.com/location/\">Cuppacoffee</a> provided coffee, tea,  and breakfast items. In the morning, that was: 3 gallons coffee, 1 gallon brewed black tea,  16 bagels, 12 muffins, and 10 croissants. In the afternoon, that was: 2 gallons coffee and 1 gallon brewed green tea. We were able to pick up everything &mdash; the order + napkins, milk, cream cheese,  butter, and knives &mdash; ourselves because Cuppacoffee is very close to MTW.</p>\n\n<p><a href=\"http://www.cmartboston.com/\">CMart</a> sold us water and juices. (There is also a Whole Foods near MTW.)</p>\n\n<p>At the end of the day, the leftovers included ~2 gallons of coffee and ~8  sweet potato sandwiches. People asked for more meat sandwiches, more blueberry muffins,  and Flour&rsquo;s <a href=\"https://youtu.be/kIbhckqanHI\">sticky buns</a>.</p>\n\n<h3 id=\"event-program\">Event Program</h3>\n\n<p>The following assumptions/goals constrained the schedule for the day:</p>\n\n<ul>\n <li>give all 17 on-campus Ph.D. students a talk slot;  talks must <strong>either</strong> communicate one technical idea from recent  work <strong>or</strong> say what led the speaker to apply to a PL Ph.D. program</li>\n <li>allow at least 10 minutes per talk  (because the audience may have trouble following a day of 5-minute talks,  and the speakers may have trouble preparing informative 8-minute talks)</li>\n <li>do not make the audience sit for more than 1 hour at a time</li>\n <li>maximize the number and length of breaks (to encourage discussions)</li>\n <li>include a relevant and fun welcome activity</li>\n <li>save time for a panel discussion at the end, with everyone sitting around  a room able to freely ask questions</li></ul>\n\n<p>We decided to start with an hour-long activity, split the day into  hour-long blocks of three 15-minute talks (10 min. talk, 5 min. Q/A)  and one 15-minute break, and end with a 1.5-hour panel discussion. In total, we started the activity at 9:25am and ended the panel at 6:40pm.</p>\n\n<p>The activity was <em>codewalks</em>. Before the offsite, we (the organizers) picked a few short and interesting programs  (for example, the <a href=\"https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition/blob/master/src/main/java/com/seriouscompany/business/java/fizzbuzz/packagenamingpackage/impl/math/arithmetics/IntegerDivider.java\">IntegerDivider</a>  class from a silly FizzBuzz implementation and a solution to the  <a href=\"https://en.wikipedia.org/wiki/Dutch_national_flag_problem\">Dutch national flag problem</a>). During breakfast, we made 2-person teams and gave each team a  printed copy of one program. Then, for the activity, we selected one team to present the code and three  panelists from the audience to lead a discussion. Discussions ran for about 10 minutes, and then we picked another team;  half the teams did not present. This activity ended up being fun (thanks to the great participants) and  definitely met its serious goals; namely, to practice reading, speaking, critical thinking, and  <a href=\"https://blog.codinghorror.com/the-ten-commandments-of-egoless-programming/\">egoless programming</a>.</p>\n\n<p>The talks ran conference-style. One organizer played &ldquo;session chair&rdquo; to help each speaker set up and  to announce each talk. Questions mid-talk were allowed, but most questions arrived after the speaker  finished.</p>\n\n<p>For the panel discussion, we put chairs around the room and asked people to  sit more-or-less comfortably. The panel moderator started by asking one question to the faculty, and  we took things from there as answers arrived and inspired new questions.</p>\n\n<h2 id=\"looking-back-at-the-details\">Looking Back at the Details</h2>\n\n<p>Reading Day in the Spring may be a good, free date for future retreats.</p>\n\n<p>We planned a 15-minute breakfast/welcome slot, but wound up needing 25 minutes  to give people time to prepare for the activity.</p>\n\n<p>The planned 15-minute breaks often had to be cut short because talks  ran longer. Next time, we&rsquo;d keep the morning breaks short &mdash; just enough to use the  restroom and grab a coffee &mdash; and aim for 30-min breaks in the afternoon.</p>\n\n<p>Groups of three 15-minute talks worked well, but groups of four talks might  be equally good.</p>\n\n<p>Perhaps each speaker should get the chance to pick a talk length. <a href=\"https://nepls.org/\">NEPLS</a>, for example, allows a choice between 5-min.  and 30-min. talks.</p>\n\n<p>The panel ended up too chaotic. People often had lots to say and it was difficult to queue questions during a  speech. One idea for next time is to seat the professors together and give each a time  limit to answer; this would organize the discussion, but may not improve the  quality. Another idea is to pick &ldquo;topics&rdquo; beforehand and have the moderator enforce a  time limit on each topic. Or maybe we should drop the panel unless we have a clear goal for what to discuss.</p>\n<!-- to future organizers: the panel began asking faculty for a mistake in their career and wound up with a defensive flavor-->\n\n<h2 id=\"looking-back-overall\">Looking Back, Overall</h2>\n\n<p>This was a good offsite. Organizing was mostly easy and straightforward. We very much enjoyed hearing what everyone had been working on.</p>\n\n<p>There were two rough parts to the organizing. First, we faced some difficult initial choices about the date, venue, and program. Second, we feel that we put undue pressure on students to prepare talks  with short notice. Both challenges could easily be avoided next time &mdash;  keep the same date &amp; program, and announce the plan early! Maybe though, a different program could lead to a more effective use of time.</p>\n\n<p>With all that in mind, we recommend having a similar meeting next year or next  semester. It was extremely useful to sync up with the whole lab,  good practice to make a 10-minute talk,  and overall a rewarding (though stressful) day.</p>")) ((? . 53) f post (u . "Tutorial: Racket FFI, part 3") (? . 53) 1731904015 (p+ #"/home/runner/work/website/website/blog/2016/07/11/tutorial-racket-ffi-part-3/index.html" . unix) (u . "/blog/2016/07/11/tutorial-racket-ffi-part-3/") (u . "2016-07-11T17:33:40") (? . 24) (? . 52) (c (u . "Racket") c (u . "FFI") c (u . "tutorial") c (u . "Author: Asumu Takikawa")) (u . "\n<p>This is part 3 of my tutorial for using the Racket FFI. You can find part 1\n<a href=\"http://prl.ccs.neu.edu/blog/2016/06/27/tutorial-using-racket-s-ffi/\">here</a>\nand part 2\n<a href=\"http://prl.ccs.neu.edu/blog/2016/06/29/tutorial-racket-ffi-part-2/\">here</a>.</p>\n\n<p>In this post, we will experiment with some low-level operations with pointers,\nunion types, and custom C types. The main takeaway will be the custom C types,\nwhich let you define abstractions that hide the details of the C representation\nwhen manipulating data in Racket.</p>") #t (u . "\n<p>This is part 3 of my tutorial for using the Racket FFI. You can find part 1\n<a href=\"http://prl.ccs.neu.edu/blog/2016/06/27/tutorial-using-racket-s-ffi/\">here</a>\nand part 2\n<a href=\"http://prl.ccs.neu.edu/blog/2016/06/29/tutorial-racket-ffi-part-2/\">here</a>.</p>\n\n<p>In this post, we will experiment with some low-level operations with pointers,\nunion types, and custom C types. The main takeaway will be the custom C types,\nwhich let you define abstractions that hide the details of the C representation\nwhen manipulating data in Racket.</p>\n<!--more-->\n\n<p>As in the second post, let&rsquo;s start with some prologue code that establishes\nthe definitions from the previous two posts. But first, I&rsquo;m getting tired of\nwriting the <span class=\"stt\">#:c-id identifier</span> notation for the underscored C function\nnames.</p>\n\n<p>Instead, let&rsquo;s use a third-party package that I wrote that lets you avoid the\nboilerplate. To install the package, you can either invoke the following\nincantation in a command-line:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">$</span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\">raco</span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\">pkg</span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\">install</span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\">ffi-definer-convention</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>or you can just execute the following snippet in Racket:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pkg</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">pkg-install-command</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">#:skip-installed</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">\"ffi-definer-convention\"</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">Resolving \"ffi-definer-convention\" via https://download.racket-lang.org/releases/7.9/catalog/</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">Resolving \"ffi-definer-convention\" via https://pkgs.racket-lang.org</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">Downloading repository git://github.com/takikawa/racket-ffi-definer-convention</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: version: 7.9</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: platform: x86_64-linux [3m]</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: target machine: racket</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: installation name: 7.9</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: variants: 3m</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: main collects: /usr/share/racket/collects</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: collects paths: </span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: </span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\">/usr/share/racket/collects</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: main pkgs: /usr/share/racket/pkgs</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: pkgs paths: </span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: </span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\">/usr/share/racket/pkgs</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: </span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\">/root/.local/share/racket/7.9/pkgs</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: links files: </span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: </span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\">/usr/share/racket/links.rktd</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: </span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\">/root/.local/share/racket/7.9/links.rktd</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: main docs: /usr/share/racket/doc</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: --- updating info-domain tables ---</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\">[4:27:49]</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: updating: /root/.local/share/racket/7.9/share/info-cache.rktd</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: --- pre-installing collections --- </span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\">[4:27:49]</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: --- installing foreign libraries --- </span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\">[4:27:49]</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: --- installing shared files ---</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\">[4:27:49]</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: --- compiling collections ---</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\">[4:27:49]</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: --- parallel build using 4 jobs ---</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\">[4:27:49]</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: 3 making: &lt;pkgs&gt;/ffi-definer-convention</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: --- creating launchers --- </span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\">[4:27:51]</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: --- installing man pages --- </span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\">[4:27:51]</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: --- building documentation --- </span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\">[4:27:51]</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: 1 running: &lt;pkgs&gt;/ffi-definer-convention/ffi-definer-convention.scrbl</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: 3 rendering: &lt;pkgs&gt;/ffi-definer-convention/ffi-definer-convention.scrbl</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: 2 rendering: &lt;pkgs&gt;/racket-index/scribblings/main/user/local-redirect.scrbl</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: 1 rendering: &lt;pkgs&gt;/racket-index/scribblings/main/user/release.scrbl</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: 0 rendering: &lt;pkgs&gt;/racket-index/scribblings/main/user/search.scrbl</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: 1 rendering: &lt;pkgs&gt;/racket-index/scribblings/main/user/start.scrbl</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: --- installing collections --- </span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\">[4:27:56]</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">raco setup: --- post-installing collections ---</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\"></span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktOut\">[4:27:56]</span></p></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>This will install the package and compile its contents. If you&rsquo;re curious, the\ndocs for the package are available\n<a href=\"http://docs.racket-lang.org/ffi-definer-convention/index.html\">here</a>.</p>\n\n<p><span style=\"font-weight: bold\">Note:</span> if you&rsquo;ve never installed a package before, you may want to glance\nat the\n<a href=\"http://docs.racket-lang.org/pkg/getting-started.html\">package system docs</a>.\nA tl;dr of packages is that they bundle Racket <a class=\"techoutside Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/collects.html#%28tech._collection%29\"><span class=\"techinside\">collections</span></a>, which are\nsets of modules that you can refer to in a location-independent fashion such as\n<span class=\"RktWrap\"><a class=\"RktModLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/pict/index.html\"><span class=\"RktSym\">pict</span></a></span> or <span class=\"RktWrap\"><a class=\"RktModLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28mod-path._racket%2Flist%29\"><span class=\"RktSym\">racket/list</span></a></span>.</p>\n\n<p>Anyhow, here&rsquo;s the prologue code:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><a class=\"RktModLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/guide/Module_Syntax.html#%28part._hash-lang%29\"><span class=\"RktMod\">#lang</span></a><span class=\"hspace\">&nbsp;</span><a class=\"RktModLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/index.html\"><span class=\"RktSym\">racket</span></a></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29\">require</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">racket/draw</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">ffi/unsafe</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">avoid conflict with below</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._except-in%29%29\">except-in</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ffi/unsafe/define</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">define-ffi-definer</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">the new 3rd-party pkg</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">ffi-definer-convention</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">pict</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">C types</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_tagged-pointers.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._define-cpointer-type%29%29\">define-cpointer-type</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_tagged-pointers.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._define-cpointer-type%29%29\">define-cpointer-type</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_surface_t</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_line_cap_t</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Enumerations_and_Masks.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__enum%29%29\">_enum</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">butt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">round</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">square</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-lib</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Loading_Foreign_Libraries.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._ffi-lib%29%29\">ffi-lib</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">define-ffi-definer</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-lib</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">describes how to transform from</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Racket to C ids</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">#:make-c-id</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">convention:hyphen-&gt;underscore</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">the foreign functions</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">note lack of #:c-id keyword arguments</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-create</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_surface_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-move-to</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Other_Atomic_Types.html#%28def._%28%28quote._~23~25foreign%29.__void%29%29\">_void</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-line-to</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Other_Atomic_Types.html#%28def._%28%28quote._~23~25foreign%29.__void%29%29\">_void</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-set-line-width</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Other_Atomic_Types.html#%28def._%28%28quote._~23~25foreign%29.__void%29%29\">_void</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-stroke</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Other_Atomic_Types.html#%28def._%28%28quote._~23~25foreign%29.__void%29%29\">_void</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-set-line-cap</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_line_cap_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Other_Atomic_Types.html#%28def._%28%28quote._~23~25foreign%29.__void%29%29\">_void</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">(_cairo_t -&gt; Void) -&gt; Pict</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">do some drawing and give us the pict</span></td></tr>\n   <tr>\n    <td><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">do-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">f</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">make-bitmap</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">256</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">256</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt-surface</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">send</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">get-handle</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-create</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt-surface</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">linewidth</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">2</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">frame</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">bitmap</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">bt</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>Notice that the <span class=\"RktWrap\"><span class=\"RktSym\">define-cairo</span></span> forms don&rsquo;t have any <span class=\"stt\">#:c-id</span> keywords\nanymore. Instead, the prologue code uses an overriden <span class=\"RktWrap\"><span class=\"RktSym\">define-ffi-definer</span></span>\nfrom my package that supports a <span class=\"stt\">#:make-c-id</span> keyword that lets you specify\na naming convention to follow.</p>\n\n<p>Also, instead of creating a single bitmap and drawing into it, we now have a\n<span class=\"RktWrap\"><span class=\"RktSym\">do-cairo</span></span> function that takes a drawing function. When called,\n<span class=\"RktWrap\"><span class=\"RktSym\">do-cairo</span></span> will call the given function with a new bitmap object and\nreturn the result.</p>\n\n<p>Now let&rsquo;s get to the main point of this blog post. Let&rsquo;s say that we want to play\nwith Cairo <a href=\"https://www.cairographics.org/manual/cairo-Paths.html\">path</a>\nobjects this time. A path is\n<a href=\"https://www.cairographics.org/manual/cairo-Paths.html#cairo-path-t\">defined</a>\nas a struct with the following structure:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">typedef</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">struct</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">{</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_status_t</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">status</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_path_data_t</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">*data</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">int</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">num_data</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">}</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_path_t</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>To manipulate paths, we want to define a FFI C type that corresponds to this\nstruct definition. But before that, it&rsquo;s\nuseful to define C types for the types of values in the path struct&rsquo;s fields. First,\nlet&rsquo;s specify that a <span class=\"stt\">cairo_status_t</span> is an integer type:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_status_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__int%29%29\">_int</a></span><span class=\"RktPn\">)</span></td></tr></tbody></table></div>\n\n<p>It&rsquo;s actually an enum, but for the examples in this post we don&rsquo;t care about\ndistinguishing different statuses. Next, the data field of a path struct is an\narray of\n<a href=\"https://www.cairographics.org/manual/cairo-Paths.html#cairo-path-data-t\">path data objects</a>.\nEach path data object is a <span class=\"stt\">cairo_path_data_t</span>,\nwhich is specified with a C union:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\">union</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">_cairo_path_data_t</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">{</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">struct</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">{</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">cairo_path_data_type_t</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">type</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">int</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">length</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">}</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">header</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">struct</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">{</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">double</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">x,</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">y</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktPn\">}</span><span class=\"RktMeta\"></span><span class=\"hspace\">&nbsp;</span><span class=\"RktMeta\"></span><span class=\"RktMeta\">point</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr>\n   <tr>\n    <td><span class=\"RktMeta\"></span><span class=\"RktPn\">}</span><span class=\"RktMeta\">;</span><span class=\"RktMeta\"></span></td></tr></tbody></table></div>\n\n<p>Helpfully, the FFI library comes with support for unions with the\n<span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/C_Union_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__union%29%29\">_union</a></span></span> type constructor. The constructor takes arbitrarily\nmany arguments, one for each sub-case in the union. It&rsquo;s pretty\nstraightforward to specify this type too:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">the path data type is just an enum</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_path_data_type_t</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Enumerations_and_Masks.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__enum%29%29\">_enum</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">'</span><span class=\"RktVal\">(</span><span class=\"RktVal\">move-to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">line-to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">curve-to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">close-path</span><span class=\"RktVal\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_path_data_t</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/C_Union_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__union%29%29\">_union</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">the header case</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/C_Struct_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__list-struct%29%29\">_list-struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_path_data_type_t</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__int%29%29\">_int</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">the point case</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/C_Struct_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__list-struct%29%29\">_list-struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>There&rsquo;s a new type constructor here so let me explain that first.\nThe <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/C_Struct_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__list-struct%29%29\">_list-struct</a></span></span> constructor translates between a C struct\nand a fixed-length list of C objects on the Racket side. Unlike\n<span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/C_Struct_Types.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._define-cstruct%29%29\">define-cstruct</a></span></span>, this constructor doesn&rsquo;t define any selectors\nor anything like that. Instead, you can manipulate the struct as an\nordinary list.</p>\n\n<p>Each of the path data structs in the path data array will be manipulated with\nthe <span class=\"RktWrap\"><span class=\"RktSym\">_cairo_path_data_t</span></span> type. Union types are a bit cumbersome unfortunately\nbecause the programmer has to distinguish the cases in the union manually\non the Racket-side. Let me illustrate this with some code:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">create a union from a list of doubles</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a-union-val</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Miscellaneous_Support.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._cast%29%29\">cast</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1.3</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">5.8</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">source type</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/C_Struct_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__list-struct%29%29\">_list-struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28quote._~23~25foreign%29.__double%29%29\">_double</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">target type</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">_cairo_path_data_t</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">a-union-val</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#&lt;union&gt;</span></p></td></tr></tbody></table></div>\n\n<p>This snippet first construct a union object (via the <span class=\"RktWrap\"><span class=\"RktSym\">_cairo_path_data_t</span></span>\ntype) using a <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Miscellaneous_Support.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._cast%29%29\">cast</a></span></span>. A cast is an operation that lets you coerce\nfrom one C type to another. We use it in this example since it&rsquo;s an easy way\nto generate a union object.</p>\n\n<p>The second line shows that a union prints as an opaque object. You can&rsquo;t do\nanything with a union in Racket unless you project it to one of the sub-cases with\nthe <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/C_Union_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._union-ref%29%29\">union-ref</a></span></span> function.\nThis projection is <span class=\"emph\">unsafe</span>, in the sense that if you don&rsquo;t know which of\nthe sub-cases in the union is the correct one, you will get potentially non-sensical\ndata out of the union.</p>\n\n<p>More concretely, let&rsquo;s see what happens if we try to extract a value out of the\nunion both correctly and incorrectly:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">correct (matches construction)</span></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">cases are zero-indexed and ordered as written</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/C_Union_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._union-ref%29%29\">union-ref</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a-union-val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(1.3 5.8)</span></p></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">incorrect, error</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/C_Union_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._union-ref%29%29\">union-ref</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a-union-val</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktErr\">enum:int-&gt;_cairo_path_data_type_t: expected a known</span></p></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktErr\">#&lt;ctype:ufixint&gt;, got: 3435973837</span></p></td></tr></tbody></table></div>\n\n<p>Note that in the incorrect case we get an error saying that the FFI failed\nto convert the C value to a Racket value following the given C type. We were\nlucky in this case, but in general you can have silent failures where the\ndata is nonsense.</p>\n\n<p>With union types like these, there is usually some way to figure out which case\nof the union you are in. This may be accomplished in C using an extra struct\nfield or a variable that indicates the variant. Alternatively, there may be some\nset order that cases appear in data structures.</p>\n\n<p>With this Cairo API in particular, the position of the elements in the array\ntells you which of the union cases it&rsquo;s in. The array always starts with a\nheader element, and then follows with some number of data elements (the exact\nnumber is determined by the type indicated in the header). We can therefore\nreference the appropriate element of the union based on this ordering.</p>\n\n<p>So before moving on, let&rsquo;s recap: so far we have made C types that describe\nthe data elements in a cairo path with unions. Next we&rsquo;ll figure out how to\ndeal with the array itself.</p>\n\n<h1><a name=\"(part._.Some_low-level_operations)\"></a>Some low-level operations</h1>\n\n<p>Since we still don&rsquo;t have a C type for <span class=\"stt\">cairo_path_t</span>, let&rsquo;s go ahead\nand make a simple one where we punt on the work of specifying the array\ntype:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_simple_cairo_path_t</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/C_Struct_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__list-struct%29%29\">_list-struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_status_t</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Pointer_Types.html#%28def._%28%28quote._~23~25foreign%29.__pointer%29%29\">_pointer</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Numeric_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__int%29%29\">_int</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>In this type, we have specified the array as a bare <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Pointer_Types.html#%28def._%28%28quote._~23~25foreign%29.__pointer%29%29\">_pointer</a></span></span>.\nFor some added safety, we could also use something like\n<span class=\"RktWrap\"><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_tagged-pointers.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__cpointer%29%29\">_cpointer</a></span><span class=\"stt\"> </span><span class=\"RktVal\">'</span><span class=\"RktVal\">cairo_status_t</span><span class=\"RktPn\">)</span></span>, which sets up a tagged pointer\ntype like we saw in the first blog post with\n<span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_tagged-pointers.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._define-cpointer-type%29%29\">define-cpointer-type</a></span></span>.</p>\n\n<p>We&rsquo;ve seen the <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Pointer_Types.html#%28def._%28%28quote._~23~25foreign%29.__pointer%29%29\">_pointer</a></span></span> type before, but haven&rsquo;t actually done\nanything with values of those types except pass them around as arguments.\nIt turns out it is possible to do a bit more with pointers.</p>\n\n<p>Before we get to that, let&rsquo;s go ahead and set up an FFI binding for\n<span class=\"stt\">cairo_copy_path</span> so that we can obtain a path struct to manipulate:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-copy-path</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Pointer_Types.html#%28def._%28%28quote._~23~25foreign%29.__pointer%29%29\">_pointer</a></span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a-path</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">do-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._~ce~bb%29%29\">&#955;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">ctx</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Do stuff to make the current</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">path non-empty</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-move-to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">50.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">50.0</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-line-to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">206.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">206.0</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-move-to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">50.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">206.0</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-line-to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">115.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">115.0</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Get the current path</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29\">set!</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a-path</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-copy-path</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Stroke clears the path</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">so do it last</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-stroke</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><img src=\"/blog/img/posts/2016-07-11-tutorial-racket-ffi-part-3/pict.png\" alt=\"image\" height=\"262\" style=\"vertical-align: 0px; margin: -3px -3px -3px -3px;\" width=\"262\" /></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">a-path</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">#&lt;cpointer&gt;</span></p></td></tr></tbody></table></div>\n\n<p>Note that <span class=\"RktWrap\"><span class=\"RktSym\">cairo-copy-path</span></span> gives us a pointer to a path struct\nrather than a path struct directly. Because of that, we need to know\nhow to manipulate pointers.\nThe most useful function for pointers is <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_pointer-funcs.html#%28def._%28%28quote._~23~25foreign%29._ptr-ref%29%29\">ptr-ref</a></span></span>, which\nlets you dereference a pointer and access it at some concrete C type.</p>\n\n<p><span style=\"font-weight: bold\">Note:</span> the <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_pointer-funcs.html#%28def._%28%28quote._~23~25foreign%29._ptr-ref%29%29\">ptr-ref</a></span></span> function also takes an optional\noffset argument which we will be used in an example later.</p>\n\n<p>For example, we can use <span class=\"RktWrap\"><span class=\"RktSym\">a-path</span></span> as a <span class=\"RktWrap\"><span class=\"RktSym\">_simple_cairo_path_t</span></span>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">simple-path</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_pointer-funcs.html#%28def._%28%28quote._~23~25foreign%29._ptr-ref%29%29\">ptr-ref</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">a-path</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_simple_cairo_path_t</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">simple-path</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(0 #&lt;cpointer&gt; 8)</span></p></td></tr></tbody></table></div>\n\n<p>And now we have a Racket representation of the struct that the pointer\npoints to. Now notice that the data array field of the struct is also\na pointer as we specified earlier. To convert this to a more useful form,\nwe can use <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_pointer-funcs.html#%28def._%28%28quote._~23~25foreign%29._ptr-ref%29%29\">ptr-ref</a></span></span> again with an array type:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">array</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_pointer-funcs.html#%28def._%28%28quote._~23~25foreign%29._ptr-ref%29%29\">ptr-ref</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">the pointer</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">second</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">simple-path</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/C_Array_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__array%2Flist%29%29\">_array/list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_path_data_t</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">length field</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">third</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">simple-path</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktSym\">array</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(#&lt;union&gt; #&lt;union&gt; #&lt;union&gt; #&lt;union&gt; #&lt;union&gt; #&lt;union&gt; #&lt;union&gt; #&lt;union&gt;)</span></p></td></tr></tbody></table></div>\n\n<p>The elements of the array are all unions, as we would expect. This is\na bit annoying to use though. We have to know the structure of the\narray and reference the correct variant appropriately:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/C_Union_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._union-ref%29%29\">union-ref</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">first</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">array</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(move-to 2)</span></p></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/C_Union_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._union-ref%29%29\">union-ref</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">second</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">array</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(50.0 50.0)</span></p></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">nonsense data here, wrong union case</span></td></tr>\n   <tr>\n    <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/C_Union_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._union-ref%29%29\">union-ref</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">third</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">array</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span></td></tr>\n   <tr>\n    <td>\n     <p><span class=\"RktRes\">'(4.2439915824246e-314 0.0)</span></p></td></tr></tbody></table></div>\n\n<p>One thing we could do is write a helper function that converts this array\ninto a more useful format. It would look at each header, and then consume\nthe number of data elements specified in the header element (e.g., 1\nin the example above because the length includes the header)\nand convert them appropriately.</p>\n\n<p>An alternative is to define a <span class=\"emph\">custom C type</span> that handles all of\nthis conversion automatically for us, so that as a user of the Cairo\nFFI bindings we don&rsquo;t need to think about applying helper functions and\ndereferencing pointers.</p>\n\n<h1><a name=\"(part._.Custom_.C_types)\"></a>Custom C types</h1>\n\n<p>I briefly remarked on how to create custom C types in the first blog post,\nbut let me go over that again in more detail. A custom C type is constructed\nby providing a base C type to use along with two conversion functions.\nThe first function converts from a Racket value to a value that fits the\nbase C type. The second converts in the other direction from a value of\nthe base C type to a Racket value.</p>\n\n<p>In this way, it&rsquo;s possible to conduct interesting conversions, such as\ndereferencing union objects automatically.</p>\n\n<p>Now let&rsquo;s make a custom C type for Cairo paths that will represent the\ndata elements as a sequence in which each item in the sequence is a list\nwith an action symbol followed by the data elements for that action.</p>\n\n<p>First, we&rsquo;ll start by defining a struct type for the Racket representation\nof Cairo paths:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define-struct.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct%29%29\">struct</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-path</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">ptr</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">#:property</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._prop~3asequence%29%29\">prop:sequence</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._~ce~bb%29%29\">&#955;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in-cairo-path</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">p</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>The representation will store one field <span class=\"RktWrap\"><span class=\"RktSym\">ptr</span></span> which, as the name\nsuggests, will store a pointer value. We&rsquo;ll see what to do with this\npointer later.</p>\n\n<p>This definition uses a <a class=\"techoutside Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/structprops.html#%28tech._structure._type._property%29\"><span class=\"techinside\">structure type property</span></a> to make instances of\n<span class=\"RktWrap\"><span class=\"RktSym\">cairo-path</span></span> automatically work as sequences. This means that you\ncan iterate over them with a <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%29%29\">for</a></span></span> loop or apply <span class=\"RktWrap\"><span class=\"RktSym\">sequence-ref</span></span>\non them. The property takes a function that takes an instance of the struct\ntype itself (here <span class=\"RktWrap\"><span class=\"RktSym\">p</span></span>) and that returns a sequence.</p>\n\n<p>We&rsquo;ll later define the <span class=\"RktWrap\"><span class=\"RktSym\">in-cairo-path</span></span> function that will actually\nconstruct the relevant sequence for us. For now, let&rsquo;s see how to construct\nthe C type given this struct type:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_path_t</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29\">let</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Extract pointer out of representation</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">racket-&gt;c</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">rkt</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-path-ptr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">rkt</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Just apply the Racket constructor</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">c-&gt;racket</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cobj</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-path</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cobj</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/ctype.html#%28def._%28%28quote._~23~25foreign%29._make-ctype%29%29\">make-ctype</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Pointer_Types.html#%28def._%28%28quote._~23~25foreign%29.__pointer%29%29\">_pointer</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">racket-&gt;c</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">c-&gt;racket</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>The base type for this <span class=\"RktWrap\"><span class=\"RktSym\">_cairo_path_t</span></span> is a <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/Pointer_Types.html#%28def._%28%28quote._~23~25foreign%29.__pointer%29%29\">_pointer</a></span></span> type. Since\nthe Cairo API returns pointers to new path values, it&rsquo;s hard to avoid using some\nkind of pointer type as the base type here.</p>\n\n<p>This definition right-hand-side defines the two conversion functions between\nRacket and C. Both are very simple because of how we&rsquo;ve set up the representation.\nIn the Racket to C case, we simply extract the pointer field of the struct. In\nthe other direction, we just stuff the pointer into a struct.</p>\n\n<p>The real work is done by the helper function that makes a\n<span class=\"RktWrap\"><span class=\"RktSym\">cairo-path</span></span> instance work as a sequence.</p>\n\n<p>Starting top-down, let&rsquo;s look at the definition of <span class=\"RktWrap\"><span class=\"RktSym\">in-cairo-path</span></span>:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Cairo-Path -&gt; Sequence</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">in-cairo-path</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">path</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pp</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-path-ptr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">path</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">match-define</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._list%29%29\">list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29\">_</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/C_Array_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._array-ptr%29%29\">array-ptr</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">len</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_pointer-funcs.html#%28def._%28%28quote._~23~25foreign%29._ptr-ref%29%29\">ptr-ref</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pp</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_simple_cairo_path_t</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._make-do-sequence%29%29\">make-do-sequence</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._~ce~bb%29%29\">&#955;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/values.html#%28def._%28%28quote._~23~25kernel%29._values%29%29\">values</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">pos-&gt;element</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/C_Array_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._array-ptr%29%29\">array-ptr</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">next-pos</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/C_Array_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._array-ptr%29%29\">array-ptr</a></span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">0</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._~ce~bb%29%29\">&#955;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">pos</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3c%29%29\">&lt;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pos</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">len</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">#f</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>The first thing the function does is extract the pointer out of the\nrepresentation, and then immediately calls <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_pointer-funcs.html#%28def._%28%28quote._~23~25foreign%29._ptr-ref%29%29\">ptr-ref</a></span></span> on it. This\nlets us manipulate the C path struct using the simple representation we\ndefined in the first part of the blog post.</p>\n\n<p><span style=\"font-weight: bold\">Note:</span> in case you&rsquo;re not very familiar with Racket pattern matching, the\n<span class=\"RktWrap\"><span class=\"RktSym\">match-define</span></span> form lets you define potentially multiple variables\nusing a pattern, similar to Haskell or OCaml&rsquo;s <span class=\"stt\">let</span> statement.\nThe first argument clause\nis a pattern and the second is an expression to match on. Check it out\nin the\n<a href=\"http://docs.racket-lang.org/reference/match.html#%28form._%28%28lib._racket%2Fmatch..rkt%29._match-define%29%29\">docs</a>.</p>\n\n<p>After extracting the array pointer and the array length from the\npath value, we pass them onto some helper functions that define the\nsequence. The usual way to define a new kind of sequence is to use the\n<span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._make-do-sequence%29%29\">make-do-sequence</a></span></span> function. Essentially, <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._make-do-sequence%29%29\">make-do-sequence</a></span></span>\ntakes a bunch of arguments that specify how to get the an element of\na sequence, how to advance a sequence, how to start, and how to end\nthe sequence.</p>\n\n<p><span style=\"font-weight: bold\">Note:</span> technically <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._make-do-sequence%29%29\">make-do-sequence</a></span></span> actually takes a thunk which\nproduces a number of values. These values are effectively like arguments\nthough. The reason why it&rsquo;s a thunk is that you may wish to\nrun some initialization code that runs when the sequence is started\n(e.g., imagine opening a network connection), and your sequence functions\n(like advancing the sequence) may depend on the result of that\ninitialization code.</p>\n\n<p>In our case, we supply some curried functions that can extract elements\nout of the underlying C array. Here is the <span class=\"RktWrap\"><span class=\"RktSym\">pos-&gt;element</span></span> function\nand its helpers:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">CPointer -&gt; Integer -&gt; Element</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">pos-&gt;element</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ptr</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pos</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Extract the data path header</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">header</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/C_Union_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._union-ref%29%29\">union-ref</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_pointer-funcs.html#%28def._%28%28quote._~23~25foreign%29._ptr-ref%29%29\">ptr-ref</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ptr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_path_data_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pos</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">type</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">first</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">header</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Length includes header, so subtract 1</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">len</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._sub1%29%29\">sub1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">second</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">header</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pos*</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._add1%29%29\">add1</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pos</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">points</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">get-points</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ptr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pos*</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">len</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/pairs.html#%28def._%28%28quote._~23~25kernel%29._cons%29%29\">cons</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">type</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">points</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">CPointer Integer Integer -&gt; (Listof Data)</span></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">get-points</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ptr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pos</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">num-points</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Flist%29%29\">for/list</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">i</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-range%29%29\">in-range</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">num-points</span><span class=\"RktPn\">)</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/C_Union_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._union-ref%29%29\">union-ref</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_pointer-funcs.html#%28def._%28%28quote._~23~25foreign%29._ptr-ref%29%29\">ptr-ref</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ptr</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktSym\">_cairo_path_data_t</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">offset argument</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pos</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">i</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">1</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>This code encodes the API usage protocol that Cairo specifies, where each\nheader element in the path is followed by some number of data elements.\nEach header specifies the length, so we can loop in <span class=\"RktWrap\"><span class=\"RktSym\">get-points</span></span>\nfrom the position after the header until we reach the given length. At\neach point, we dereference the appropriate union element.</p>\n\n<p>Advancing the sequence is simpler, since all we need to do is some arithmetic\non the length given by header elements:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">(</span><span class=\"RktSym\">next-pos</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ptr</span><span class=\"RktPn\">)</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pos</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">header</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/C_Union_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29._union-ref%29%29\">union-ref</a></span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_pointer-funcs.html#%28def._%28%28quote._~23~25foreign%29._ptr-ref%29%29\">ptr-ref</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ptr</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_path_data_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pos</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktVal\">0</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">len</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">second</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">header</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29\">+</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">len</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">pos</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr></tbody></table></div>\n\n<p>Note that determining the end of the sequence is very easy. It&rsquo;s just\na matter of comparing the current position to the total length given in the\npath struct, encoded in the expression <span class=\"RktWrap\"><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._~ce~bb%29%29\">&#955;</a></span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\">pos</span><span class=\"RktPn\">)</span><span class=\"stt\"> </span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._~3c%29%29\">&lt;</a></span><span class=\"stt\"> </span><span class=\"RktSym\">pos</span><span class=\"stt\"> </span><span class=\"RktSym\">len</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></span>.</p>\n\n<p>Now we can try using a path as a sequence:</p>\n\n<div class=\"SCodeFlow\">\n <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n  <tbody>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">define-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">cairo-copy-path</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29.__fun%29%29\">_fun</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_t</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/foreign_procedures.html#%28form._%28%28lib._ffi%2Funsafe..rkt%29._-~3e%29%29\"><span class=\"nobreak\">-&gt;</span></a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">_cairo_path_t</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\" class=\"RktBlk\">\n      <tbody>\n       <tr>\n        <td><span class=\"stt\">&gt; </span><span class=\"RktPn\">(</span><span class=\"RktSym\">do-cairo</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/lambda.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._~ce~bb%29%29\">&#955;</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">ctx</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-move-to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">50.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">50.0</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-line-to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">206.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">206.0</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-move-to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">50.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">206.0</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-line-to</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">115.0</span><span class=\"hspace\">&nbsp;</span><span class=\"RktVal\">115.0</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29\">define</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">path</span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-copy-path</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktCmt\">;</span><span class=\"RktCmt\">&nbsp;</span><span class=\"RktCmt\">Using path as a sequence</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktStxLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%29%29\">for</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktPn\">[</span><span class=\"RktSym\">elem</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">path</span><span class=\"RktPn\">]</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29\">displayln</a></span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">elem</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr>\n       <tr>\n        <td><span class=\"hspace\">&nbsp;&nbsp;</span><span class=\"hspace\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"RktPn\">(</span><span class=\"RktSym\">cairo-stroke</span><span class=\"hspace\">&nbsp;</span><span class=\"RktSym\">ctx</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span><span class=\"RktPn\">)</span></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <table cellpadding=\"0\" cellspacing=\"0\">\n      <tbody>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">(move-to (50.0 50.0))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">(line-to (206.0 206.0))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">(move-to (50.0 206.0))</span></p></td></tr>\n       <tr>\n        <td>\n         <p><span class=\"RktOut\">(line-to (115.0 115.0))</span></p></td></tr></tbody></table></td></tr>\n   <tr>\n    <td>\n     <p><img src=\"/blog/img/posts/2016-07-11-tutorial-racket-ffi-part-3/pict_2.png\" alt=\"image\" height=\"262\" style=\"vertical-align: 0px; margin: -3px -3px -3px -3px;\" width=\"262\" /></p></td></tr></tbody></table></div>\n\n<p>Notice how the sequence prints out as an intuitive list of commands\ninstead of a bunch of opaque union values as we saw before when using\nthe <span class=\"RktWrap\"><span class=\"RktSym\"><a class=\"RktValLink Sq\" data-pltdoc=\"x\" href=\"https://docs.racket-lang.org/foreign/C_Array_Types.html#%28def._%28%28lib._ffi%2Funsafe..rkt%29.__array%2Flist%29%29\">_array/list</a></span></span> type.</p>\n\n<p>That concludes part 3 of the FFI tutorial. Hopefully you&rsquo;re now equipped\nto deal with union types and custom C types. If not, see the\n<a href=\"http://docs.racket-lang.org/foreign/index.html\">FFI reference</a>\nfor more details on\n<a href=\"http://docs.racket-lang.org/foreign/C_Union_Types.html\">unions</a>\nand\n<a href=\"http://docs.racket-lang.org/foreign/ctype.html\">custom C types</a>.</p>\n\n<p><span class=\"emph\">Thanks to Ben Greenman for suggestions/feedback and to Sam\nTobin-Hochstadt for suggesting to cover union types!</span></p>")) ((? . 65) f post (u . "Reviews and author responses: we should stop asking for 500-word responses") (? . 65) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/08/13/reviews-and-author-responses-we-should-stop-asking-for-500-word-responses/index.html" . unix) (u . "/blog/2017/08/13/reviews-and-author-responses-we-should-stop-asking-for-500-word-responses/") (u . "2017-08-13T14:29:41") (? . 66) (? . 58) (c (u . "Author: Gabriel Scherer")) (u . "\n<p>This year I reviewed many ICFP submissions, and got to be on the receiving end of equally many author responses (also sometimes called, somewhat combatively, rebuttals). I found that there was a large difference between the official written advice on author responses and what I, as a reviewer reading the responses, found effective. In particular, I now believe that limiting yourself to 500 words should strongly be avoided &mdash; we should even stop giving that advice.</p>") #t (u . "\n<p>This year I reviewed many ICFP submissions, and got to be on the receiving end of equally many author responses (also sometimes called, somewhat combatively, rebuttals). I found that there was a large difference between the official written advice on author responses and what I, as a reviewer reading the responses, found effective. In particular, I now believe that limiting yourself to 500 words should strongly be avoided &mdash; we should even stop giving that advice.</p>\n<!-- more-->\n\n<p>This year, I had the honor (and accompanying load of work) of being a Program Committee (PC) member at the ICFP conference. It was my first time being a PC member at a conference, and I found it extremely pleasant and interesting, thanks to the authors who sent us articles to review, my fellow PC members, and the ever-smiling careful balancing work of our PC chair, Mark Jones. It was also a lot of work, starting with 18 reviews to do over a month and a half, an intense PC meeting, and the new &ldquo;second phase&rdquo; process with the opportunity for authors and reviewers to exchange feedback on changes requested by the program committee.</p>\n\n<p>There is little guidance on how to write author responses, although this <a href=\"http://www.pl-enthusiast.net/2014/09/17/advice-writing-author-response/\">blog post</a> by Michael Hicks on pl-enthusiast is quite good. One thing that is obvious as a reviewer and is only slightly brushed in this post, however, is that author responses should <em>not</em> aim to fit a 500 words limit, and in fact I believe that it is a bad idea to do so.</p>\n\n<p>As for most conference, the ICFP review system recommends (in writing) to authors to keep their response to 500 words (some systems also highlight words after those in red to make the point clear). Don&rsquo;t do this! The least convincing responses I have seen are those that followed this recommendation.</p>\n\n<p>(I have also seen at least 18*2 other reviewers read the same responses I read, most of them well over 500 words, and <em>none</em> of them made any comment on the length of the author responses.)</p>\n\n<p>We have a frustrating situation where the explicit rule is different from the thing people do in practice. This is bad for newcomers that do not know the norms and cannot tell if ignoring the rule may hurt them. This is the point of this blog post:</p>\n\n<ul>\n <li>\n  <p>If you are an author, please know that disrespecting the 500-words  limit is the <em>right thing</em> to do. You should also know, of course,  that people have limited time, so keep the main body of your  response reasonably long. (I spent a day and a half on your paper  already, I am willing to spend 10 additional minutes reading the  response.)</p></li>\n <li>\n  <p>If you are a program committee chair or a Magical HotCRP Wizard,  please remove this silly recommendation to keep responses to 500  words. (See an alternative proposal at the end of this post.)</p></li></ul>\n\n<h2 id=\"my-personal-response-format\">My personal response format</h2>\n\n<p>My author responses start with general comments that elaborate on the main point I want to tell all reviewers. Then, a second part contains per-reviewer comments (one section per reviewer); it is clearly marked as skippable. Here is the skeleton of the last response I wrote:</p>\n\n<blockquote>\n <p>We thank the reviewers for their work on our article and their detailed feedback. We start with a general discussion that responds to the salient points raised by reviewers. In a second part, we provide detailed responses to the questions/remarks of each reviewer.</p>\n <h3 id=\"general-discussion\">General discussion</h3>\n <p>[..]</p>\n <h3 id=\"specific-questionscomments-review-a\">Specific questions/comments: review #A</h3>\n <p>[..]</p>\n <h3 id=\"specific-questionscomments-review-b\">Specific questions/comments: review #B</h3>\n <p>[..]</p>\n <h3 id=\"specific-questionscomments-review-c\">Specific questions/comments: review #C</h3>\n <p>[&hellip;]</p></blockquote>\n\n<p>For this particular response, the &ldquo;General discussion&rdquo; section used 1296 words according to <code>wc -w</code> (M-x shell-command-on-region). In the following sections, I quote the reviews to answer specific points, email-style (following the Markdown syntax that HotCRP renders properly).</p>\n\n<h2 id=\"suggested-wording-for-pc-chairs\">Suggested wording for PC chairs</h2>\n\n<p>If you are a PC chair, you should remove the suggestion of respecting a 500 words limit for your conference. Here would be a suggested alternative wording:</p>\n\n<blockquote>\n <p>Please remember, in writing your author response, that reviewers may stop reading the response at any point. We suggest having a reasonably-sized main section where you make your most important high-level comments, and clearly marked sections where you answer individual reviewer&rsquo;s questions. It is not useful nor productive to answer every point of each review, you should focus on the comments that you believe the reviewers are most interested in.</p></blockquote>")) ((? . 67) f post (u . "Welcome to the PRL blog") (? . 67) 1731904015 (p+ #"/home/runner/work/website/website/blog/2016/04/29/welcome-to-the-prl-blog/index.html" . unix) (u . "/blog/2016/04/29/welcome-to-the-prl-blog/") (u . "2016-04-29T14:50:29") #f (? . 40) (c (u . "about") c (u . "1st blog post") c (u . "Author: Ben Greenman")) (u . "\n<p>Greetings, ground rules, hopes, dreams, and notes for contributors. Welcome aboard.</p>") #t (u . "\n<p>Greetings, ground rules, hopes, dreams, and notes for contributors. Welcome aboard.</p>\n<!-- more-->\n\n<p>Earlier this year, the Programming Research Lab (PRL) was blessed with a new  postdoc: <a href=\"http://gallium.inria.fr/~scherer/\">Gabriel Scherer</a> from INRIA  Paris-Rocquencourt, France. Ever since Gabriel arrived things have been changing here in Boston. We now have homemade bread on the first Tuesday of every month,  <a href=\"https://en.wikipedia.org/wiki/Orange_flower_water\">orange water</a> crepes  after holidays, and someone new to go out for bubble tea with in between. All that and an enthusiastic colleague and researcher.</p>\n\n<p>In his spare time between lobbying the CS department for an espresso machine and  building multi-language compilers, Gabriel is also a champion of open access. Hence this blog, a window into the life and times of PRL students made  possible by Gabriel&rsquo;s tactical prodding and careful delegation of responsibilities. Anything you might read about in a rejected conference paper or hear over  coffee is fair game here: the goal is to give the wide world a glimpse of  our lab and people.</p>\n\n<h2 id=\"for-contributors\">For Contributors</h2>\n\n<p>These pages are generated using Greg Hendershott&rsquo;s <a href=\"https://github.com/greghendershott/frog\">frog</a>  static website generator. To create a new post:</p>\n\n<ol>\n <li>Clone or fork the <a href=\"https://github.com/nuprl/nuprl.github.io\">nuprl.github.io</a> repository</li>\n <li>Check out a new git branch for your post</li>\n <li>Run <code>cd blog; raco frog -n \"TITLE\"</code> to build a template for a new post</li>\n <li>Add content to the new markdown file (under <code>_src/posts</code>)</li>\n <li>Rebuild the blog with <code>raco frog -b</code></li>\n <li>Run <code>cd ..; raco frog -p</code> to start a web server and view your changes at <a href=\"http://localhost:3000/\">http://localhost:3000/</a></li>\n <li>Send a pull request to the <a href=\"https://github.com/nuprl/nuprl.github.io\">nuprl.github.io</a> repo</li></ol>\n\n<p>An open pull request is the best place to ask questions about the formatting or content of a post. We promise that within a few days of opening a PR someone with push access will reply with feedback or merge the request.</p>\n\n<p>Contributions are open to anyone: current labmates, alumni, friends from the  Racket mailing list, and even recovering C programmers. One should have a strong connection to Northeastern or our research, but  even that is not strictly necessary. Visitors are always welcome to the PRL.</p>")) ((? . 68) f post (u . "Measuring GC latencies in Haskell, OCaml, Racket") (? . 68) 1731904015 (p+ #"/home/runner/work/website/website/blog/2016/05/24/measuring-gc-latencies-in-haskell-ocaml-racket/index.html" . unix) (u . "/blog/2016/05/24/measuring-gc-latencies-in-haskell-ocaml-racket/") (u . "2016-05-24T10:51:34") (? . 69) (? . 1) (c (u . "garbage collection") c (u . "latency") c (u . "instrumentation") c (u . "haskell") c (u . "ghc") c (u . "ocaml") c (u . "racket") c (u . "Author: Gabriel Scherer")) (u . "\n<p>James Fisher has a blog post on a case where GHC&rsquo;s runtime system imposed unpleasant latencies on their Haskell program:</p>\n\n<blockquote>\n <p><a href=\"https://blog.pusher.com/latency-working-set-ghc-gc-pick-two/\">Low latency, large working set, and GHC&rsquo;s garbage collector: pick two of three</a></p></blockquote>\n\n<p>The blog post proposes a very simple, synthetic benchmark that exhibits the issue &mdash; basically, latencies incurred by copy time &mdash; with latencies of 50ms that are considered excessive. I thought it would be amusing to reproduce the synthetic benchmark in OCaml and Racket, to see how other GCs handle this.</p>\n\n<p>Without further ado, the main take-away are as follows: the OCaml GC has no issue with large objects in its old generation, as it uses a mark&amp;sweep instead of copying collection, and exhibits less than 3ms worst-case pauses on this benchmark.</p>\n\n<p>The Racket GC also does not copy the old generation, but its incremental GC is still in infancy (compared to the throughput-oriented settings which works well) so the results are less good. It currently suffer from a &ldquo;ramp-up&rdquo; effect that I will describe, that causes large pauses at the beginning of the benchmark (up to 120ms latency), but in its steady state the longest pause are around 22ms.</p>\n\n<p>Please keep in mind that the original benchmark is designed to exercise a very specific workflow that exercises worst-case behavior for GHC&rsquo;s garbage collector. This does not mean that GHC&rsquo;s latencies are bad in general, or that the other tested languages have smaller latencies in general.</p>\n\n<p>The implementations I use, with a Makefile encapsulating the logic for running and analyzing them, are available in a Gitlab repository:</p>\n\n<ul>\n <li>git: <a href=\"https://gitlab.com/gasche/gc-latency-experiment.git\">https://gitlab.com/gasche/gc-latency-experiment.git</a></li>\n <li>files: <a href=\"https://gitlab.com/gasche/gc-latency-experiment/tree/master\">https://gitlab.com/gasche/gc-latency-experiment/tree/master</a></li></ul>") #t (u . "\n<p>James Fisher has a blog post on a case where GHC&rsquo;s runtime system imposed unpleasant latencies on their Haskell program:</p>\n\n<blockquote>\n <p><a href=\"https://blog.pusher.com/latency-working-set-ghc-gc-pick-two/\">Low latency, large working set, and GHC&rsquo;s garbage collector: pick two of three</a></p></blockquote>\n\n<p>The blog post proposes a very simple, synthetic benchmark that exhibits the issue &mdash; basically, latencies incurred by copy time &mdash; with latencies of 50ms that are considered excessive. I thought it would be amusing to reproduce the synthetic benchmark in OCaml and Racket, to see how other GCs handle this.</p>\n\n<p>Without further ado, the main take-away are as follows: the OCaml GC has no issue with large objects in its old generation, as it uses a mark&amp;sweep instead of copying collection, and exhibits less than 3ms worst-case pauses on this benchmark.</p>\n\n<p>The Racket GC also does not copy the old generation, but its incremental GC is still in infancy (compared to the throughput-oriented settings which works well) so the results are less good. It currently suffer from a &ldquo;ramp-up&rdquo; effect that I will describe, that causes large pauses at the beginning of the benchmark (up to 120ms latency), but in its steady state the longest pause are around 22ms.</p>\n\n<p>Please keep in mind that the original benchmark is designed to exercise a very specific workflow that exercises worst-case behavior for GHC&rsquo;s garbage collector. This does not mean that GHC&rsquo;s latencies are bad in general, or that the other tested languages have smaller latencies in general.</p>\n\n<p>The implementations I use, with a Makefile encapsulating the logic for running and analyzing them, are available in a Gitlab repository:</p>\n\n<ul>\n <li>git: <a href=\"https://gitlab.com/gasche/gc-latency-experiment.git\">https://gitlab.com/gasche/gc-latency-experiment.git</a></li>\n <li>files: <a href=\"https://gitlab.com/gasche/gc-latency-experiment/tree/master\">https://gitlab.com/gasche/gc-latency-experiment/tree/master</a></li></ul>\n<!-- more-->\n\n<h2 id=\"the-haskell-benchmark\">The Haskell benchmark</h2>\n\n<p>James Fisher&rsquo;s Haskell benchmark is very simple: it creates an association table in which medium-size strings are inserted repeatedly &mdash; a million times. When the channel reaches 200_000 messages, a string is deleted each time a string is created, to keep the total working size constant.</p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"k\">qualified</span><span class=\"w\"> </span><span class=\"nn\">Control.Exception</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Exception</span><span class=\"w\"></span>\n<span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"k\">qualified</span><span class=\"w\"> </span><span class=\"nn\">Control.Monad</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Monad</span><span class=\"w\"></span>\n<span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"k\">qualified</span><span class=\"w\"> </span><span class=\"nn\">Data.ByteString</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">ByteString</span><span class=\"w\"></span>\n<span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"k\">qualified</span><span class=\"w\"> </span><span class=\"nn\">Data.Map.Strict</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Map</span><span class=\"w\"></span>\n\n<span class=\"kr\">data</span><span class=\"w\"> </span><span class=\"kt\">Msg</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Msg</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"kt\">ByteString</span><span class=\"o\">.</span><span class=\"kt\">ByteString</span><span class=\"w\"></span>\n\n<span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"kt\">Chan</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"kt\">ByteString</span><span class=\"o\">.</span><span class=\"kt\">ByteString</span><span class=\"w\"></span>\n\n<span class=\"nf\">message</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Msg</span><span class=\"w\"></span>\n<span class=\"nf\">message</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Msg</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">ByteString</span><span class=\"o\">.</span><span class=\"n\">replicate</span><span class=\"w\"> </span><span class=\"mi\">1024</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fromIntegral</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">))</span><span class=\"w\"></span>\n\n<span class=\"nf\">pushMsg</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">Chan</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Msg</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">IO</span><span class=\"w\"> </span><span class=\"kt\">Chan</span><span class=\"w\"></span>\n<span class=\"nf\">pushMsg</span><span class=\"w\"> </span><span class=\"n\">chan</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Msg</span><span class=\"w\"> </span><span class=\"n\">msgId</span><span class=\"w\"> </span><span class=\"n\">msgContent</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kt\">Exception</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">let</span><span class=\"w\"> </span><span class=\"n\">inserted</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"w\"> </span><span class=\"n\">msgId</span><span class=\"w\"> </span><span class=\"n\">msgContent</span><span class=\"w\"> </span><span class=\"n\">chan</span><span class=\"w\"> </span><span class=\"kr\">in</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"mi\">200000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"n\">inserted</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">deleteMin</span><span class=\"w\"> </span><span class=\"n\">inserted</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"n\">inserted</span><span class=\"w\"></span>\n\n<span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">IO</span><span class=\"w\"> </span><span class=\"nb\">()</span><span class=\"w\"></span>\n<span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Monad</span><span class=\"o\">.</span><span class=\"n\">foldM_</span><span class=\"w\"> </span><span class=\"n\">pushMsg</span><span class=\"w\"> </span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">message</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">1000000</span><span class=\"p\">])</span><span class=\"w\"></span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>To compile and run the program (<code>make run-haskell</code> also works in my repository):</p>\n\n<pre><code>ghc -O2 -optc-O3 Main.hs  # compile the program\n./Main +RTS -s            # run the program (with GC instrumentation enabled)</code></pre>\n\n<p>On my machine, running the program takes around 1.5s. We are not interested in the total running time (the <em>throughput</em> of the algorithm), but in the pause times induced by the GC: the worst pause time is 51ms (milliseconds), which is the same as the one reported by the blog post &mdash; and there it is considered excessive, with an expected worst-case latency of at most &ldquo;a few milliseconds&rdquo;.</p>\n\n<p>(I did my testing with GHC 7.8, Fischer reports results with 7.10, they are essentially the same.)</p>\n\n<p>This Haskell code makes two assumption about the <code>Map</code> data structure (immutable associative maps) that make the benchmark more cumbersome to port to other languages. It assumes that the element count is pre-cached in the data structure and thus <code>Map.size</code> is constant-time &mdash; for both OCaml and Racket it is linear. It also uses a key ordering that makes it easy to remove the smallest key &mdash; OCaml does this as well, but Racket uses hashes instead.</p>\n\n<p>I initially worked around this by storing count and minimum-key information in the ported versions, but in fact it&rsquo;s much nicer to write a variant of the benchmark, with the same behavior, that does not require these specific features:</p>\n\n<div class=\"brush: haskell\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"kt\">Msg</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">ByteString</span><span class=\"o\">.</span><span class=\"kt\">ByteString</span><span class=\"w\"></span>\n<span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"kt\">Chan</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"kt\">Msg</span><span class=\"w\"></span>\n\n<span class=\"nf\">windowSize</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"mi\">200000</span><span class=\"w\"></span>\n<span class=\"nf\">msgCount</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"mi\">1000000</span><span class=\"w\"></span>\n\n<span class=\"nf\">message</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Msg</span><span class=\"w\"></span>\n<span class=\"nf\">message</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">ByteString</span><span class=\"o\">.</span><span class=\"n\">replicate</span><span class=\"w\"> </span><span class=\"mi\">1024</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fromIntegral</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"nf\">pushMsg</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">Chan</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">IO</span><span class=\"w\"> </span><span class=\"kt\">Chan</span><span class=\"w\"></span>\n<span class=\"nf\">pushMsg</span><span class=\"w\"> </span><span class=\"n\">chan</span><span class=\"w\"> </span><span class=\"n\">highId</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kt\">Exception</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">let</span><span class=\"w\"> </span><span class=\"n\">lowId</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">highId</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">windowSize</span><span class=\"w\"> </span><span class=\"kr\">in</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">let</span><span class=\"w\"> </span><span class=\"n\">inserted</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"w\"> </span><span class=\"n\">highId</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"w\"> </span><span class=\"n\">highId</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">chan</span><span class=\"w\"> </span><span class=\"kr\">in</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"n\">lowId</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"n\">inserted</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"w\"> </span><span class=\"n\">lowId</span><span class=\"w\"> </span><span class=\"n\">inserted</span><span class=\"w\"></span>\n\n<span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">IO</span><span class=\"w\"> </span><span class=\"nb\">()</span><span class=\"w\"></span>\n<span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Monad</span><span class=\"o\">.</span><span class=\"n\">foldM_</span><span class=\"w\"> </span><span class=\"n\">pushMsg</span><span class=\"w\"> </span><span class=\"kt\">Map</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">msgCount</span><span class=\"p\">]</span><span class=\"w\"></span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This variant has the same running times and worst-case pause, 50ms, as the original program.</p>\n\n<h3 id=\"explaining-haskell-results\">Explaining Haskell results</h3>\n\n<p>James Fischer explains that the reason why the latencies are this high (50ms is considered high) is that while GHC&rsquo;s garbage collector is generational, its older generation still uses a stop-and-copy scheme. This means that when it contains lots of large objects, a lot of time is spent copying them.</p>\n\n<p>The <a href=\"https://blog.pusher.com/latency-working-set-ghc-gc-pick-two/\">original blog post</a> contains a more detailed description of the problem and of various optimizations that may be attempted. Unfortunately, it seems that it is currently impossible to optimize that kind of workloads by tuning the code or GC parameters: the copying behavior of the old heap cannot really be worked-around currently.</p>\n\n<p>As a meta-comment, one possible explanation for why this design choice was made might be that a lot of effort was invested in the Haskell&rsquo;s GC to support concurrent mutators (a multi-core runtime). The additional complexity imposed by this extremely challenging and useful requirement may have encouraged runtime authors to keep the general GC architecture as simple as reasonably possible, which could explain this choice of using the same collection strategy in all generational spaces.</p>\n\n<h2 id=\"ocaml-version\">OCaml version</h2>\n\n<p>The code can easily be ported into OCaml, for example as follows:</p>\n\n<div class=\"brush: ocaml\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"k\">open</span> <span class=\"nc\">Batteries</span>\n<span class=\"k\">module</span> <span class=\"nc\">IMap</span> <span class=\"o\">=</span> <span class=\"nn\">Map</span><span class=\"p\">.</span><span class=\"nc\">Make</span><span class=\"o\">(</span><span class=\"nc\">Int</span><span class=\"o\">)</span>\n\n<span class=\"k\">let</span> <span class=\"n\">message</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nn\">String</span><span class=\"p\">.</span><span class=\"n\">make</span> <span class=\"mi\">1024</span> <span class=\"o\">(</span><span class=\"nn\">Char</span><span class=\"p\">.</span><span class=\"n\">chr</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"ow\">mod</span> <span class=\"mi\">256</span><span class=\"o\">))</span>\n\n<span class=\"k\">let</span> <span class=\"n\">window_size</span> <span class=\"o\">=</span> <span class=\"mi\">200_000</span>\n<span class=\"k\">let</span> <span class=\"n\">msg_count</span> <span class=\"o\">=</span> <span class=\"mi\">1_000_000</span>\n\n<span class=\"k\">let</span> <span class=\"n\">push_msg</span> <span class=\"n\">chan</span> <span class=\"n\">high_id</span> <span class=\"o\">=</span>\n  <span class=\"k\">let</span> <span class=\"n\">low_id</span> <span class=\"o\">=</span> <span class=\"n\">high_id</span> <span class=\"o\">-</span> <span class=\"n\">window_size</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">inserted</span> <span class=\"o\">=</span> <span class=\"nn\">IMap</span><span class=\"p\">.</span><span class=\"n\">add</span> <span class=\"n\">high_id</span> <span class=\"o\">(</span><span class=\"n\">message</span> <span class=\"n\">high_id</span><span class=\"o\">)</span> <span class=\"n\">chan</span> <span class=\"k\">in</span>\n  <span class=\"k\">if</span> <span class=\"n\">low_id</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">inserted</span>\n  <span class=\"k\">else</span> <span class=\"nn\">IMap</span><span class=\"p\">.</span><span class=\"n\">remove</span> <span class=\"n\">low_id</span> <span class=\"n\">inserted</span>\n\n<span class=\"k\">let</span> <span class=\"bp\">()</span> <span class=\"o\">=</span>\n  <span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">init</span> <span class=\"n\">msg_count</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"o\">|&gt;</span> <span class=\"nn\">Seq</span><span class=\"p\">.</span><span class=\"n\">fold_left</span> <span class=\"n\">push_msg</span> <span class=\"nn\">IMap</span><span class=\"p\">.</span><span class=\"n\">empty</span> <span class=\"o\">|&gt;</span> <span class=\"n\">ignore</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Evaluating throughput is not the point, and the balanced maps used by the Haskell and OCaml are certainly implemented in slightly different ways that would explain any performance difference, but I was still amused to see the total runtime be essentially the same: 1.5s.</p>\n\n<p>To measure the maximal pause time, there are two options:</p>\n\n<ul>\n <li>\n  <p>use the new instrumented runtime contributed by Damien Doligez in  OCaml 4.03; this works but, being a relatively new feature with not  much usability effort put into it, it&rsquo;s far from being as convenient  as GHC&rsquo;s <code>+RTS -s</code> parameter.</p></li>\n <li>\n  <p>Simply measure the time spend in each iteration (pushing a message),  and using this as an upper bound on the pause time: clearly any GC  pause cannot pause for more time than the iteration takes. (With my Makefile,  <code>make run-ocaml</code>)</p></li></ul>\n\n<p>To use the new instrumented runtime, you need to have an OCaml compiler, version 4.03.0, compiled with the <code>--with-instrumented-runtime</code> configure-time switch. Then, you can use the <code>i</code>-variant (<code>i</code> for &ldquo;instrumented&rdquo;) of the runtime that is compiled with instrumentation enabled. (My makefile rule <code>make\nrun-ocaml-instrumented</code> does this for you, but you still need a switch compiled with the instrumented runtime.)</p>\n\n<pre><code>ocamlbuild -tag \"runtime_variant(i)\" main.native\nOCAML_INSTR_LOG=ocaml.log ./main.native</code></pre>\n\n<p>The log file <code>ocaml.log</code> will then contain a low-level log of all GC-related runtime calls, with nanosecond time, in a format made for machine rather than human consumption. The tools <code>ocaml-instr-report</code> and <code>ocaml-instr-graph</code> of the OCaml source distribution (not installed by default, you need a source checkout), will parse them and display tables or graph. The entry point of interest for worst-case latency is <code>dispatch</code>, which contains the time spent in all GC activity. The relevant section of <code>ocaml-instr-report</code>&rsquo;s output shows:</p>\n\n<pre><code>==== dispatch: 2506\n470ns..1.0us:  1     (768ns)                       0.04%\n1.0us..2.2us: # 2                                  0.12%\n2.2us..4.7us: ### 8                                0.44%\n4.7us..10us : #### 10                              0.84%\n 10us..22us :  1     (14us)                        0.88%\n 22us..47us :                                      0.88%\n 47us..100us:                                      0.88%\n100us..220us: ## 3                                 1.00%\n220us..470us: ########## 668                      27.65%\n470us..1.0ms: ########### 1795                    99.28%\n1.0ms..2.2ms: ##### 17                            99.96%\n2.2ms..4.7ms:  1     (2.7ms)                     100.00%</code></pre>\n\n<p>As you can see, most pauses are between 220µs and 1ms, with the longest pause being 2.7ms.</p>\n\n<p>The other approach to measure latency for this program, which works on older OCaml versions without an instrumented runtime, is just to insert explicit timing calls and compute the worst-case time of an iteration &mdash; as an over-approximation over the max pause time, assuming that the actual insertion/deletion time is small.</p>\n\n<div class=\"brush: ocaml\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"k\">let</span> <span class=\"n\">worst</span> <span class=\"o\">=</span> <span class=\"n\">ref</span> <span class=\"mi\">0</span><span class=\"o\">.</span>\n<span class=\"k\">let</span> <span class=\"n\">time</span> <span class=\"n\">f</span> <span class=\"o\">=</span>\n  <span class=\"k\">let</span> <span class=\"n\">before</span> <span class=\"o\">=</span> <span class=\"nn\">Unix</span><span class=\"p\">.</span><span class=\"n\">gettimeofday</span> <span class=\"bp\">()</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">f</span> <span class=\"bp\">()</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">after</span> <span class=\"o\">=</span> <span class=\"nn\">Unix</span><span class=\"p\">.</span><span class=\"n\">gettimeofday</span> <span class=\"bp\">()</span> <span class=\"k\">in</span>\n  <span class=\"n\">worst</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">!</span><span class=\"n\">worst</span> <span class=\"o\">(</span><span class=\"n\">after</span> <span class=\"o\">-.</span> <span class=\"n\">before</span><span class=\"o\">);</span>\n  <span class=\"n\">result</span>\n\n<span class=\"k\">let</span> <span class=\"n\">push_msg</span> <span class=\"n\">chan</span> <span class=\"n\">high_id</span> <span class=\"o\">=</span> <span class=\"n\">time</span> <span class=\"o\">@@</span> <span class=\"k\">fun</span> <span class=\"bp\">()</span> <span class=\"o\">-&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">low_id</span> <span class=\"o\">=</span> <span class=\"n\">high_id</span> <span class=\"o\">-</span> <span class=\"n\">window_size</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">inserted</span> <span class=\"o\">=</span> <span class=\"nn\">IMap</span><span class=\"p\">.</span><span class=\"n\">add</span> <span class=\"n\">high_id</span> <span class=\"o\">(</span><span class=\"n\">message</span> <span class=\"n\">high_id</span><span class=\"o\">)</span> <span class=\"n\">chan</span> <span class=\"k\">in</span>\n  <span class=\"k\">if</span> <span class=\"n\">low_id</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">inserted</span>\n  <span class=\"k\">else</span> <span class=\"nn\">IMap</span><span class=\"p\">.</span><span class=\"n\">remove</span> <span class=\"n\">low_id</span> <span class=\"n\">inserted</span>\n\n<span class=\"c\">(* ..main loop.. *)</span>\n<span class=\"k\">let</span> <span class=\"bp\">()</span> <span class=\"o\">=</span> <span class=\"nn\">Printf</span><span class=\"p\">.</span><span class=\"n\">printf</span> <span class=\"s2\">\"Worst pause: %.2E</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"o\">!</span><span class=\"n\">worst</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Running this version reports a worst-case latency of 2ms seconds on my machine (I use the <code>%E</code> formatter for scientific notation, so it gets printed as <code>2.03E-03</code>), which is in line with the instrumented runtime &mdash; actually slightly lower, as the instrumentation may add some overhead.</p>\n\n<p>A downside of this poor man worst-latency computation approach is that we only get the worst time, not any kind of timing distribution.</p>\n\n<h3 id=\"explaining-ocaml-results\">Explaining OCaml results</h3>\n\n<p>The OCaml GC has had reliable incremental phases implemented by default for a long time, and does not use a copying strategy for its old generation. It is mark&amp;sweep, executed well, so it was predictable from the start that this specific benchmark would not be a worst-case for OCaml.</p>\n\n<p>The latest released OCaml version, OCaml 4.03.0, has seen work by Damien Doligez to improve the worst-case latency in some situations, motivated by the industrial use-cases of Jane Street. In particular, the latency <em>instrumentation</em> tools that I&rsquo;m using above were developed by Damien on this occasion. I checked with the second measurement strategy that the latency is just as good on previous OCaml versions: this particular use-case was not in need of improvement before 4.03.</p>\n\n<h2 id=\"racket-version\">Racket version</h2>\n\n<p>Max New wrote a first version of Racket port of this benchmark &mdash; he had to explicitly keep track of the map count and minimum key to match the original GHC version. I adapted his code to my simplified variant, and it looks rather similar to the other implementations.</p>\n\n<div class=\"brush: scheme\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"o\">#</span><span class=\"nv\">lang</span> <span class=\"nv\">racket/base</span>\n<span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"nv\">racket/match</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\">define </span><span class=\"nv\">window-size</span> <span class=\"mi\">200000</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">define </span><span class=\"nv\">msg-count</span>  <span class=\"mi\">2000000</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\">define </span><span class=\"p\">(</span><span class=\"nf\">message</span> <span class=\"nv\">n</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">make-bytes</span> <span class=\"mi\">1024</span> <span class=\"p\">(</span><span class=\"nb\">modulo </span><span class=\"nv\">n</span> <span class=\"mi\">256</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\">define </span><span class=\"p\">(</span><span class=\"nf\">push-msg</span> <span class=\"nv\">chan</span> <span class=\"nv\">id-high</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">define </span><span class=\"nv\">id-low</span> <span class=\"p\">(</span><span class=\"nf\">id-high</span> <span class=\"o\">.</span> <span class=\"nv\">-</span> <span class=\"o\">.</span> <span class=\"nv\">window-size</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">define </span><span class=\"nv\">inserted</span> <span class=\"p\">(</span><span class=\"nf\">hash-set</span> <span class=\"nv\">chan</span> <span class=\"nv\">id-high</span> <span class=\"p\">(</span><span class=\"nf\">message</span> <span class=\"nv\">id-high</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nf\">id-low</span> <span class=\"o\">.</span> <span class=\"nv\">&lt;</span> <span class=\"o\">.</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"nv\">inserted</span>\n      <span class=\"p\">(</span><span class=\"nf\">hash-remove</span> <span class=\"nv\">inserted</span> <span class=\"nv\">id-low</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\">define </span><span class=\"nv\">_</span>\n  <span class=\"p\">(</span><span class=\"nf\">for/fold</span>\n     <span class=\"p\">([</span><span class=\"nv\">chan</span> <span class=\"p\">(</span><span class=\"nf\">make-immutable-hash</span><span class=\"p\">)])</span>\n     <span class=\"p\">([</span><span class=\"nv\">i</span> <span class=\"p\">(</span><span class=\"nf\">in-range</span> <span class=\"nv\">msg-count</span><span class=\"p\">)])</span>\n     <span class=\"p\">(</span><span class=\"nf\">push-msg</span> <span class=\"nv\">chan</span> <span class=\"nv\">i</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>I initially used the poor man approach of explicit timing calls to measure latency, but then switched to two better methods:</p>\n\n<ul>\n <li>\n  <p>Sam Tobin-Hochstadt&rsquo;s <a href=\"https://github.com/samth/gcstats\">gcstats</a>  package makes Racket programs produce a summary of their runtime  behavior in the same format as GHC&rsquo;s <code>+RTS -s</code> output, with in  particular the worst-case pause time. It is also very easy to use:</p>\n  <pre><code>racket -l gcstats -t main.rkt</code></pre></li>\n <li>\n  <p>By setting the environment variable <code>PLTSTDERR=debug@GC</code>, the racket  runtime will log GC events on the standard error output. One can  then grep for minor or major collections, or produce a histogram of  running times through the following scripting soup I cooked myself:</p>\n  <pre><code>cat racket.log | grep -v total | cut -d' ' -f7 | sort -n | uniq --count</code></pre></li></ul>\n\n<p>Racket has an incremental GC that is currently experimental (it is not enabled by default as it can degrade throughput) and is enabled by setting the environment variable <code>PLT_INCREMENTAL_GC=1</code>. I compared with and without the incremental GC, and generally it shifts the latency histogram towards smaller latencies, but it turns out not to help so much for the worst-case latency without further tuning, for a reason I will explain. All results reported below use the incremental GC.</p>\n\n<p>On my machine, using the latest release Racket 6.5, the maximal pause time reported by <code>gcstats</code> is around 150ms, which is rather bad &mdash; the excessive pause of GHC was 50ms.</p>\n\n<h3 id=\"investigating-the-racket-results\">Investigating the Racket results</h3>\n\n<p>I sent <a href=\"https://groups.google.com/forum/#!topic/racket-dev/AH6c-HGgzJ0\">an email</a> to the racket-dev mailing list, hoping to get explanations and advice on how to improve the code to decrease GC latencies. (Remember that one problematic aspect of the GHC benchmark is that there is no real way for users to tweak the code to get better latencies for the same workflow. So we are evaluating default latencies but also tweakability.) It worked out quite well.</p>\n\n<p>First, Matthew Flatt immediately sent a few commits on the Racket codebase to improve some behaviors that were problematic on the benchmark. Using the development version of Racket instead of 6.5, the worst-case latency drops from 150ms to 120ms on my machine. All remaining times are reported using the development version.</p>\n\n<p>Matthew Flatt also analyzed the result and noticed that the worst-case latency systematically happens at the beginning of the benchmark, just after the channel reaches its maximal side of 200,000 messages. This is hard to see with the default benchmark parameters, where the &ldquo;ramp-up&rdquo; period of filling the channel takes one fifth of the total iterations. To see this clearly, I increased the iteration count from 1,000,000 to 10,000,000, then ran <code>make\nrun-racket-instrumented</code>. I can look at the pause time of major collections by doing <code>grep MAJ racket.log</code>, and on my machine I have:</p>\n\n<pre><code>GC: 0:MAJ @ 50,634K(+37,221K)[+1,560K]; free 5,075K(-5,075K) 12ms @ 373\nGC: 0:MAJ @ 101,983K(+35,024K)[+1,560K]; free 10,880K(-5,168K) 38ms @ 521\nGC: 0:MAJ @ 192,491K(+38,404K)[+1,560K]; free 8,174K(-24,030K) 56ms @ 810\nGC: 0:MAJ @ 377,716K(+49,259K)[+1,560K]; free 10,832K(-9,536K) 92ms @ 1571\nGC: 0:MAJ @ 742,630K(+59,881K)[+1,560K]; free 140,354K(-156,738K) 138ms @ 3321\nGC: 0:MAJ @ 1,214,486K(+112,313K)[+1,560K]; free 361,371K(-377,755K) 60ms @ 6046\nGC: 0:MAJ @ 1,417,749K(+138,410K)[+1,560K]; free 600,291K(-600,291K) 23ms @ 8553\nGC: 0:MAJ @ 1,400,780K(+155,379K)[+1,560K]; free 564,923K(-564,923K) 21ms @ 11048\nGC: 0:MAJ @ 1,408,812K(+147,347K)[+1,560K]; free 583,454K(-583,454K) 21ms @ 13506\nGC: 0:MAJ @ 1,404,757K(+151,402K)[+1,560K]; free 572,350K(-572,350K) 20ms @ 15983\nGC: 0:MAJ @ 1,407,842K(+148,317K)[+1,560K]; free 579,079K(-579,079K) 22ms @ 18438\nGC: 0:MAJ @ 1,405,641K(+150,518K)[+1,560K]; free 575,624K(-575,624K) 21ms @ 20907\nGC: 0:MAJ @ 1,405,833K(+150,326K)[+1,560K]; free 577,191K(-577,191K) 21ms @ 23362\nGC: 0:MAJ @ 1,405,763K(+150,396K)[+1,560K]; free 575,779K(-575,779K) 20ms @ 25897\nGC: 0:MAJ @ 1,406,444K(+149,715K)[+1,560K]; free 577,553K(-577,553K) 20ms @ 28348\nGC: 0:MAJ @ 1,406,409K(+149,750K)[+1,560K]; free 576,323K(-576,323K) 21ms @ 30827\nGC: 0:MAJ @ 1,407,054K(+149,105K)[+1,560K]; free 577,961K(-577,961K) 21ms @ 33290\nGC: 0:MAJ @ 1,404,903K(+151,256K)[+1,560K]; free 576,241K(-576,241K) 20ms @ 35774\nGC: 0:MAJ @ 1,406,551K(+149,608K)[+1,560K]; free 575,352K(-575,352K) 22ms @ 38251\nGC: 0:MAJ @ 1,405,775K(+150,384K)[+1,560K]; free 577,401K(-577,401K) 21ms @ 40730\nGC: 0:MAJ @ 1,406,015K(+150,144K)[+1,560K]; free 575,563K(-575,563K) 20ms @ 43254\nGC: 0:MAJ @ 1,406,129K(+150,030K)[+1,560K]; free 577,760K(-577,760K) 21ms @ 45730\nGC: 0:MAJ @ 1,406,157K(+150,002K)[+1,560K]; free 575,394K(-575,394K) 22ms @ 48220\nGC: 0:MAJ @ 1,406,514K(+149,645K)[+1,560K]; free 577,765K(-577,765K) 21ms @ 50697</code></pre>\n\n<p>Look at the evolution of major collection pause times: there is an early peek at <code>140ms</code>, but then pause times decrease and the steady state has sensibly shorter pauses of around <code>22ms</code>. By looking at the amount of memory freed during each collection, one can see that the peak corresponds to the first major collection that frees a lot of memory; it is the first major collection after the channel has reached its maximal size, and starts removing a lot of messages.</p>\n\n<p>My understanding of this behavior is that the incremental GC keeps some runtime parameter that observe the memory allocation patterns of the program, and try to predict when the next collection should be or how much work it should do. Matthew Flatt explains that this monitoring logic currently fails to adapt gracefully to the change of regime in our program, and incurs a large peak pause at this point.</p>\n\n<p>This is good news for our benchmark: sure, there is a very bad pause at the beginning of the program, but it&rsquo;s a one-time thing. It does not really affect the last decile of latency that is discussed in James Fischer&rsquo;s post, and would not be a problem during the steady state of an actual message-passing application.</p>\n\n<h3 id=\"tuning-the-racket-version\">Tuning the Racket version</h3>\n\n<p>Matthew Flatt also remarked that by inserting explicit calls to the GC, one can get collection performed more often than Racket&rsquo;s heuristics demand and partly avoid the large peak pause. However, too frequent explicit collections hurt the program throughput.</p>\n\n<p>I experimented a bit and found that the peak pause issue could be partly mitigated by inserting explicit GC calls around the change of regime &mdash; around the iteration count that corresponds to the maximal channel size. I defined a function doing just that</p>\n\n<div class=\"brush: scheme\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\">define </span><span class=\"p\">(</span><span class=\"nf\">maybe-gc</span> <span class=\"nv\">i</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nf\">when</span> <span class=\"p\">(</span><span class=\"k\">and </span><span class=\"nv\">gc-during-rampup</span>\n             <span class=\"p\">(</span><span class=\"nf\">i</span> <span class=\"o\">.</span> <span class=\"nv\">&gt;</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"nf\">window-size</span> <span class=\"o\">.</span> <span class=\"nv\">/</span> <span class=\"o\">.</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n             <span class=\"p\">(</span><span class=\"nf\">i</span> <span class=\"o\">.</span> <span class=\"nv\">&lt;</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"nf\">window-size</span> <span class=\"o\">.</span> <span class=\"nv\">*</span> <span class=\"o\">.</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n             <span class=\"p\">(</span><span class=\"nb\">zero? </span><span class=\"p\">(</span><span class=\"nb\">modulo </span><span class=\"nv\">i</span> <span class=\"mi\">50</span><span class=\"p\">)))</span>\n        <span class=\"p\">(</span><span class=\"nf\">collect-garbage</span> <span class=\"ss\">&#39;incremental</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"nf\">collect-garbage</span> <span class=\"ss\">&#39;minor</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>which is controlled by a <code>gc-during-rampup</code> parameter that you can explicitly set to <code>#t</code> to experiment &mdash; explicit GC calls are disabled by default in my benchmark code. Then I just inserted a <code>(maybe-gc i)</code> call in the main loop.</p>\n\n<p>Because the extra GC calls happen only during rampup, the performance of the steady state are unchanged and the global cost on throughput is moderate (20% in my experiment with iteration count 2,000,000). This seems effective at mitigating the peak pause issue: the worst-case time on my machine is now only 38ms &mdash; the pauses during the steady state are unchanged, around 22ms.</p>\n\n<p>This is, of course, a hack; the long-term solution is to wait for Racket developers to devise better dynamic control strategies to avoid the ramp-up problem. Apparently, the incremental GC was previously tested on games that had simpler allocation profiles, such as short-lived memory allocations during each game tick, with no such a long ramp-up phase. But I was still interested in the fact that expert users can tweak the code to noticeably decrease the worst-case pause time.</p>\n\n<p>To summarize, Racket&rsquo;s incremental GC exhibits a decent-but-not-excellent steady state behavior, with maximal latencies of around 22ms, but currently suffers from a GC control issues that cause much larger pauses during the benchmark ramp-up period. Explicit GC calls can partly mitigate them.</p>")) ((? . 70) f post (u . "Complete Monitors for Gradual Types") (? . 70) 1731904015 (p+ #"/home/runner/work/website/website/blog/2019/10/31/complete-monitors-for-gradual-types/index.html" . unix) (u . "/blog/2019/10/31/complete-monitors-for-gradual-types/") (u . "2019-10-31T21:58:26") (? . 71) (? . 64) (c (u . "migratory typing") c (u . "gradual typing") c (u . "complete monitoring") c (u . "extended abstract") c (u . "Author: Ben Greenman")) (u . "\n<p>Syntactic type soundness is too weak to tell apart different ways of running  a program that mixes typed and untyped code. Complete monitoring is a stronger property that captures a meaningful  distinction &mdash; a language satisfies complete monitoring iff it checks  all interactions between typed and untyped code.</p>") #t (u . "\n<p>Syntactic type soundness is too weak to tell apart different ways of running  a program that mixes typed and untyped code. Complete monitoring is a stronger property that captures a meaningful  distinction &mdash; a language satisfies complete monitoring iff it checks  all interactions between typed and untyped code.</p>\n<!-- more-->\n\n<blockquote>\n <p>Note: this post is an extended abstract for the paper <em>Complete Monitors for Gradual Types</em> by Ben Greenman, Matthias Felleisen, and Christos Dimoulas. For the full paper, proofs, and slides, <a href=\"http://www.ccs.neu.edu/home/types/publications/publications.html#gfd-oopsla-2019\">click here</a>.</p></blockquote>\n\n<h3 id=\"example-clickable-plot\">Example: Clickable Plot</h3>\n\n<p>The program below has a subtle bug. Can you find it?</p>\n\n<p><img src=\"/img/complete-monitoring-0.png\" alt=\"Untyped client code, a typed API, and untyped library code.\" /></p>\n\n<p>First of all, this pseudocode program combines three chunks of code:</p>\n\n<ul>\n <li>\n  <p>On the left, an <strong>untyped</strong> client script defines a function <code>h</code> that expects  a pair of numbers and returns an image. The client uses this function to  create a <code>ClickPlot</code> object, and then displays the plot &mdash; ideally in a new  GUI window.</p></li>\n <li>\n  <p>In the center, a <strong>typed</strong> API file describes a <code>ClickPlot</code> object as  something with one constructor and two methods. The constructor expects  a function; according to the type, such functions can expect a pair of  numbers and must compute an image. The <code>mouseHandler</code> method expects  a <code>MouseEvt</code> object and returns nothing. The <code>show</code> method expects no arguments  and returns nothing. (Presumably, these methods have side effects.)</p></li>\n <li>\n  <p>On the right, an <strong>untyped</strong> library module implements a <code>ClickPlot</code> object.  Most of the code is omitted (<code>...</code>), but the <code>mouseHandler</code> method sends  its input directly to the <code>onClick</code> callback.</p></li></ul>\n\n<p>The <strong>bug</strong> is in the API &mdash; in the type <code>([N, N]) =&gt; Image</code>. This type promises that a given function can expect a pair of numbers,  and indeed the client function <code>h</code> expects a pair. But the library code on the right sends a <code>MouseEvt</code> object.</p>\n\n<p>What happens when we run this program in a type-sound mixed-typed language? Does <code>h</code> receive the invalid input?</p>\n\n<p>As it turns out, type soundness cannot say. A type sound language may choose to enforce or ignore the fact that the  API promises a pair of numbers to the client.</p>\n\n<h3 id=\"type-soundness-is-not-enough\">Type Soundness is Not Enough</h3>\n\n<p>Sound types are statements about the behavior of a program. A normal type soundness theorem for a typed language says that a well-typed  program can either compute a value of the same type, compute forever (diverge),  or stop with an acceptable error (perhaps division by zero). No other behaviors are possible.</p>\n\n<blockquote>\n <p><strong>Classic Type Soundness</strong></p>\n <p>If <code>e : T</code> then one of the following holds:</p>\n <ul>\n  <li><code>e --&gt;* v</code> and <code>v : T</code></li>\n  <li><code>e</code> diverges</li>\n  <li><code>e --&gt;* OkError</code></li></ul></blockquote>\n\n<p>A mixed-typed language needs two &ldquo;type soundness&rdquo; theorems:  one for typed code and one for untyped code. The <strong>typed</strong> soundness theorem can resemble a classic theorem. The <strong>untyped</strong> soundness theorem is necessarily a weaker statement due to  the lack of types:</p>\n\n<blockquote>\n <p><strong>Mixed-Typed Soundness</strong></p>\n <p>If <code>e : T</code> then one of the following holds:</p>\n <ul>\n  <li><code>e --&gt;* v</code> and <code>v : T</code></li>\n  <li><code>e</code> diverges</li>\n  <li><code>e --&gt;* OkError</code></li></ul>\n <p>And if <code>e</code> is untyped then one of the following holds:</p>\n <ul>\n  <li><code>e --&gt;* v</code> and <code>v</code> is an untyped value</li>\n  <li><code>e</code> diverges</li>\n  <li><code>e --&gt;* OkError</code></li></ul></blockquote>\n\n<p>Now we can see why mixed-typed soundness is not strong enough to guarantee that  the callback <code>h</code> in the code above receives a pair value. We have an <strong>untyped</strong> function called from an <strong>untyped</strong> context &mdash; since  there are no types sitting right there, type soundness has nothing to say  except that the untyped code can expect an untyped value!</p>\n\n<p><img height=\"200px\" src=\"/img/complete-monitoring-1.png\" alt=\"Untyped library sends input directly to untyped client.\" /></p>\n\n<p>Nevertheless, this channel of communication between the library and client  arose through the typed API. One might expect the type <code>[N, N]</code> to restrict the values that can flow across  the channel; indeed, if types really are statements about the behavior of a program,  then the channel needs to be protected.</p>\n\n<p>The question is: what formal property separates languages thet check  all typed/untyped channels of communication (whether direct or derived)? One answer is complete monitoring.</p>\n\n<h3 id=\"complete-monitoring\">Complete Monitoring</h3>\n\n<p>A mixed-typed language satisfies complete monitoring iff evaluation never  lets a value flow un-checked across a type boundary. To make this idea precise, we need to enrich the syntax of the language  with a specification of <em>ownership</em> to say what parts of the program are  responsible for different values, and to say how evalution changes  responsibilities. Relative to a specification, complete monitoring states that every expression  that arises during evaluation is made up of parts that each have a single  owner.</p>\n\n<blockquote>\n <p><em>Complete Monitoring</em></p>\n <p>For all well-formed <code>e</code> and all <code>e'</code>, if <code>e --&gt;* e'</code> then every subexpression of <code>e'</code> has a unique owner.</p></blockquote>\n\n<p>This property separates our two behaviors for the Clickable Plot code. A language that satisfies complete monitoring enforces the API types with  a runtime check. A language that merely satisfies type soundness may skip these checks.</p>\n\n<h3 id=\"an-aid-to-debugging\">An Aid to Debugging</h3>\n\n<p>The question raised by the Clickable Plot example is whether a language can  <strong>detect</strong> one mismatch between a type and a value. A language that satisfies complete monitoring detects all such mis-matches. But we can say more. If a mismatch occurs, then programmer knows exactly where to start debugging  &mdash; either the type is an incorrect specification, or the given value is  flawed. In other words, complete monitoring implies a concise 2-party explanation  for every type mismatch.</p>\n\n<p>The paper generalizes this goal of explaining a mismatch for languages  that fail to satisfy complete monitoring. There may be 2N parties to blame thanks to un-checked channels of communication,  and we want to be certain to report all these parties and no false positives.</p>\n\n<p>Also in the paper, you can find:</p>\n\n<ul>\n <li>a model of ownership, clear <em>laws</em> for how ownership changes during evaluation;</li>\n <li>examples of how to systematically add ownership to an operational semantics  to attempt a proof of complete monitoring;</li>\n <li>definitions for <strong>blame soundness</strong> and <strong>blame completeness</strong>;</li>\n <li>an analysis of three semantics, which correspond to <a href=\"https://docs.racket-lang.org/ts-reference/index.html\">Typed Racket</a>,  <a href=\"http://hdl.handle.net/2022/23172\">Transient Reticulated</a>, and a compromise;</li>\n <li>and discussion of an alternative, heap-based model of ownership.</li></ul>\n\n<p>Paper: <a href=\"https://www2.ccs.neu.edu/racket/pubs/oopsla19-gfd.pdf\">https://www2.ccs.neu.edu/racket/pubs/oopsla19-gfd.pdf</a></p>")) ((? . 72) f post (u . "Transient Answers Old Questions") (? . 72) 1731904015 (p+ #"/home/runner/work/website/website/blog/2020/10/15/transient-answers-old-questions/index.html" . unix) (u . "/blog/2020/10/15/transient-answers-old-questions/") (u . "2020-10-15T13:32:12") (? . 73) (? . 44) (c (u . "typed racket") c (u . "transient") c (u . "Author: Ben Greenman")) (u . "\n<p>Several old questions from the Typed Racket mailing list have new and simple answers under a &ldquo;transient&rdquo; Typed Racket.</p>") #t (u . "\n<p>Several old questions from the Typed Racket mailing list have new and simple answers under a &ldquo;transient&rdquo; Typed Racket.</p>\n<!-- more-->\n\n<hr />\n\n<p>For the past few months, I&rsquo;ve been adding a transient semantics to Typed Racket. The project is called Shallow Typed Racket. Details are in the <a href=\"https://github.com/racket/typed-racket/pull/952\">RFC</a>  and <a href=\"https://github.com/racket/typed-racket/pull/948\">pull request</a>.</p>\n\n<p>The short story is that the new Shallow Racket does less to enforce types  when typed code interacts with untyped code. Typed code is still type-sound, but that&rsquo;s about it. By contrast, types are much stronger in classic Typed Racket.</p>\n\n<p>Shallow Racket&rsquo;s weaker types allow more programs to run. While testing whether the new freedom is useful, I reviewed a few years of  Typed Racket questions on the <a href=\"https://groups.google.com/g/racket-users\">Racket mailing list</a>. There were a surprising number of questions that went like this:</p>\n\n<blockquote>\n <p><strong>Q.</strong> Hey, I ran a program expecting <em>X</em> to happen, but <em>Y</em> happened instead. Is this a bug?</p>\n <p><strong>A.</strong> No, Typed Racket has to do <em>Y</em> because of its strong types.</p></blockquote>\n\n<p>&hellip; but changing to shallow types gives the <em>X</em> behavior! Here are their stories.</p>\n\n<p>Going forward, <strong>Deep</strong> refers to normal Typed Racket and <strong>Shallow</strong> refers to Shallow Typed Racket.</p>\n\n<hr />\n\n<h2 id=\"higher-order-value-as-any\">Higher-Order Value as Any</h2>\n\n<p>Original message : <a href=\"https://groups.google.com/g/racket-users/c/cCQ6dRNybDg/m/CKXgX1PyBgAJ\">groups.google.com/g/racket-users/c/cCQ6dRNybDg/m/CKXgX1PyBgAJ</a></p>\n\n<h4 id=\"on-20180416-mailoo-wrote\">On 2018&ndash;04&ndash;16, <em>mailoo</em> wrote:</h4>\n\n<blockquote>\n <p> I play a little with the &ldquo;Any&rdquo; type (due to &lsquo;dynamic-require&rsquo; which   return Any), and I&rsquo;m not able to cast them back in a function.</p>\n <p> I (over) simplify my question with this little program :</p></blockquote>\n\n<pre><code>(: p Any) \n(define (p i) (displayln i)) \n\n; Here I want to get back my function \n(define proc (cast p (-&gt; Integer Void))) \n(proc 2) </code></pre>\n\n<blockquote>\n <p> but I get this error when I try to execute the function :</p></blockquote>\n\n<pre><code>; contract violation \n; Attempted to use a higher-order value passed as `Any` in untyped code: #&lt;procedure:p&gt; </code></pre>\n\n<h3 id=\"whats-going-on\">What&rsquo;s going on?</h3>\n\n<p><strong>Deep</strong> raises an error because it must enforce the <code>Any</code> type with a contract that  rejects all interactions. Things would go badly if an Any-typed function expected a String but got an  Integer.</p>\n\n<h3 id=\"hows-transient\">How&rsquo;s transient?</h3>\n\n<p><strong>Shallow</strong> prints 2 and returns void. No error. Same goes for dynamic-require.</p>\n\n<hr />\n\n<h2 id=\"parametric-contract-affects-untyped-code\">Parametric Contract Affects Untyped Code</h2>\n\n<p>Original message : <a href=\"https://groups.google.com/g/racket-users/c/ZbYRQCy93dY/m/kF_Ek0VvAQAJ\">groups.google.com/g/racket-users/c/ZbYRQCy93dY/m/kF_Ek0VvAQAJ</a></p>\n\n<h4 id=\"on-20191215-john-clements-wrote\">On 2019&ndash;12&ndash;15, John Clements wrote:</h4>\n\n<blockquote>\n <p> It looks like my quick attempt at importing index-of into TR is running into a problem. Here’s the program I ran:</p></blockquote>\n\n<pre><code>  #lang typed/racket \n\n  (require/typed racket/list \n  [index-of (All (T) ((Listof T) T -&gt; (U False Natural)))]) \n\n  (index-of '(n s e w) 'n) ;; returns... #f? </code></pre>\n\n<blockquote>\n <p> In typed/racket/no-check this returns 0, and also in racket (mutatis mutandis).</p>\n <p> I thought this might be some kind of parametricity issue, but even when I instantiate index-of at Symbol which should pretty much clear the way for arbitrary equality checking, I still get False.</p></blockquote>\n\n<h3 id=\"whats-going-on\">What&rsquo;s going on?</h3>\n\n<p><strong>Deep</strong> enforces parametricity for <code>All</code> types, and this throws off the equality  function that index-of uses internally.</p>\n\n<h3 id=\"hows-transient\">How&rsquo;s transient?</h3>\n\n<p><strong>Shallow</strong> returns 0.</p>\n\n<p>ps John, thanks very much for working on <a href=\"https://adventofcode.com\">Advent of Code</a> and mailing the list!</p>\n\n<hr />\n\n<h2 id=\"unable-to-protect-opaque-value-as-any\">Unable to Protect Opaque Value as Any</h2>\n\n<p>Original message : <a href=\"https://groups.google.com/g/racket-users/c/jtmVDFCGL28/m/jwl4hsjtBQAJ\">groups.google.com/g/racket-users/c/jtmVDFCGL28/m/jwl4hsjtBQAJ</a></p>\n\n<h4 id=\"on-20191211-marc-kaufmann-wrote\">On 2019&ndash;12&ndash;11, Marc Kaufmann wrote:</h4>\n\n<blockquote>\n <p>I have one file called <code>type-test.rkt</code> with the following</p></blockquote>\n\n<pre><code>#lang typed/racket\n\n(require (only-in typed/web-server/http response/xexpr response))\n\n(provide f2)\n\n(: f2 (-&gt; (U response Any)))\n(define (f2)\n  (define x '(body (h1 \"Try it\")))\n  (: resp response)\n  (define resp (response/xexpr x))\n  resp)</code></pre>\n\n<blockquote>\n <p>Then I have another <em>untyped</em> file for a servlet:</p></blockquote>\n\n<pre><code>#lang racket\n\n(require \"type-test.rkt\"\n         web-server/servlet\n         web-server/servlet-env)\n\n(define (start req)\n  (f2))\n\n(serve/servlet start\n               #:servlet-regexp #rx\"\"\n               #:launch-browser? #false\n               #:port 8080)</code></pre>\n\n<blockquote>\n <p>Notice that I am telling [f2] that <code>resp</code> is of type <code>response</code>. Yet, when I run the server with <code>start</code> [&hellip;.] I get the following result:</p>\n <p>(f2): Error, see below.</p>\n <p>The error is:</p></blockquote>\n\n<pre><code>f2: broke its own contract\n  any-wrap/c: Unable to protect opaque value passed as `Any`\n  value: #&lt;response&gt;\n  in: the range of\n      (-&gt; Any)</code></pre>\n\n<h3 id=\"whats-going-on\">What&rsquo;s going on?</h3>\n\n<p><strong>Deep</strong> tries to enforce the <code>Any</code> type with a contract that rejects all  interactions, but needs to know what interactions are possible in order  to make a reject-all contract. For many values, Deep can ask questions like procedure? and struct-info  to learn enough. But this program sends an opaque response struct across a boundary and  Deep does not have the right inspector to learn about the struct fields.</p>\n\n<h3 id=\"hows-transient\">How&rsquo;s transient?</h3>\n\n<p><strong>Shallow</strong> does nothing to enforce the Any type. This program runs, and in general Shallow never complains about opaque values.</p>\n\n<hr />\n\n<h2 id=\"type-inference-installs-a-precise-type\">Type Inference Installs a Precise Type</h2>\n\n<p>Original message : <a href=\"https://groups.google.com/g/racket-users/c/2X5olKMV3C4/m/mJhsp9ZWBgAJ\">groups.google.com/g/racket-users/c/2X5olKMV3C4/m/mJhsp9ZWBgAJ</a></p>\n\n<h4 id=\"on-20200214-john-clements-wrote\">On 2020&ndash;02&ndash;14, John Clements wrote:</h4>\n\n<blockquote>\n <p>I think I may understand what’s going on here, but a student and I worked on this for quite a while today before I found the problem.</p>\n <p>Here’s a program:</p></blockquote>\n\n<pre><code>#lang typed/racket \n\n(define-type Store (Mutable-HashTable Integer Value)) \n(define-type Value (U Real Boolean String)) \n\n(define top-store\n  (cast\n    (make-hash (list (cons -1 14) (cons 1 #t) (cons 2 #f)))\n    Store))\n\n(hash-set! top-store 5 1234)</code></pre>\n\n<blockquote>\n <p>It fails with this error:</p></blockquote>\n\n<pre><code>contract violation\nexpected: (or/c (and/c byte? positive?) #t #f)\ngiven: 1234\nin: the values of\nthe 3rd conjunct of\n(and/c hash?\n       hash-mutable?\n       (hash/c exact-integer?\n               (or/c (and/c byte? positive?) #t #f)\n               #:immutable #f))</code></pre>\n\n<h3 id=\"whats-going-on\">What&rsquo;s going on?</h3>\n\n<p>First off, <strong>Deep</strong> runs fine after swapping <code>cast</code> for <code>ann</code>.</p>\n\n<p>Second, Typed Racket does try to generalize inferred types for mutable data. If the only value in the hash is the byte 14 then Deep also runs.</p>\n\n<p>The problem is that Typed Racket does not generalize the inferred value type  (U Byte Boolean) and that cast is a run-time tool for enforcing types. Casts create contracts to protect mutable data. In this program, there are two contracts:  one based on the Store type to protect code that uses the hash,  and one based on the inferred type to protect the hash against bad writes. That second contract raises the error message.</p>\n\n<h3 id=\"hows-transient\">How&rsquo;s transient?</h3>\n\n<p><strong>Shallow</strong> runs successfully. The cast looks for a hash, does not make a contract, and ignores the inferred  type going forward.</p>\n\n<hr />\n\n<h2 id=\"same-arity-functions-in-a-case-lambda\">Same-Arity Functions in a Case Lambda</h2>\n\n<p>Original message : <a href=\"https://groups.google.com/g/racket-users/c/BDrrgW0axGQ/m/P31NxeGHAAAJ\">groups.google.com/g/racket-users/c/BDrrgW0axGQ/m/P31NxeGHAAAJ</a></p>\n\n<h4 id=\"on-20190705-ryan-kramer-wrote\">On 2019&ndash;07&ndash;05, Ryan Kramer wrote:</h4>\n\n<blockquote>\n <p>In the code below, can <code>maybe-car</code> have the given type [&hellip;.]?</p></blockquote>\n\n<pre><code>#lang typed/racket\n\n(module untyped racket\n  (provide maybe-car)\n  (define (maybe-car x)\n    (cond\n      [(pair? x) (car x)]\n      [else x])))\n\n(require/typed\n 'untyped\n [maybe-car (All (a b) (case-&gt;\n                        (-&gt; (Pairof a b) a)\n                        (-&gt; a a)))])</code></pre>\n\n<blockquote>\n <p>[Current error:]</p></blockquote>\n\n<pre><code>Type Checker:\n Type (All (a b) (case-&gt; (-&gt; (Pairof a b) a) (-&gt; a a)))\n  could not be converted to a contract:\n   function type has two cases of arity 1</code></pre>\n\n<h3 id=\"whats-going-on\">What&rsquo;s going on?</h3>\n\n<p><strong>Deep</strong> tries to enforce the type with a Racket <code>or/c</code> contract, but cannot. The problem is that or/c only has partial support for unions. If or/c ends up with two possible higher-order options at runtime, it halts. In this case, we end up with two function contracts that have the same arity  and don&rsquo;t know which to apply to an incoming function.</p>\n\n<p>Note, the &ldquo;Type Checker&rdquo; error message is much better than what or/c would  give on its own.</p>\n\n<h3 id=\"hows-transient\">How&rsquo;s transient?</h3>\n\n<p><strong>Shallow</strong> simply checks that maybe-car accepts both arities inside the  case-&gt; type. The code runs fine. Later, when the function gets applied in typed code, Shallow spot-checks the  results.</p>\n\n<hr />\n\n<h3 id=\"immutable-type-affects-untyped-code\">Immutable Type Affects Untyped Code</h3>\n\n<p>Original message : <a href=\"https://groups.google.com/g/racket-users/c/UD20HadJ9Ec/m/Lmuw0U8mBwAJ\">groups.google.com/g/racket-users/c/UD20HadJ9Ec/m/Lmuw0U8mBwAJ</a></p>\n\n<h4 id=\"on-20200217-bertrand-augereau-wrote\">On 2020&ndash;02&ndash;17, Bertrand Augereau wrote:</h4>\n\n<blockquote>\n <p>Hello everybody, I&rsquo;m trying to gradually type my script to make it a proper app (yes I&rsquo;m a static-ish guy) and I have an issue (Racket 7.6 CS).</p></blockquote>\n\n<pre><code>; racket_mod.rkt:\n#lang racket\n\n(provide (struct-out s))\n(provide list-of-s)\n(provide set-list-of-s!)\n\n(struct s (a))\n(define list-of-s '())\n(define (set-list-of-s! los)\n  (set! list-of-s los))</code></pre>\n\n<pre><code>; racket_mod_typed.rkt:\n#lang typed/racket\n\n(provide (struct-out s2))\n(provide list-of-s2)\n(provide set-list-of-s2!)\n\n(struct s2 ([a : Natural]))\n(define list-of-s2 '())\n(define (set-list-of-s2! [los : (Listof s2)])\n  (set! list-of-s2 los))</code></pre>\n\n<pre><code>; racket_main.rkt:\n#lang racket\n\n(require \"racket_mod.rkt\")\n(require \"racket_mod_typed.rkt\")\n\n(define los (list (s 1) (s 2)))\n(set-list-of-s! los)\n(displayln list-of-s)\n\n(define los2 (list (s2 1) (s2 2)))\n(set-list-of-s2! los2)\n(displayln list-of-s2)</code></pre>\n\n<blockquote>\n <p>list-of-s2 is empty and list-of-s is not, the only difference seems to be the type annotations. Can someone help me ? :)</p></blockquote>\n\n<h3 id=\"whats-going-on\">What&rsquo;s going on?</h3>\n\n<p><strong>Deep</strong> enforces the type of <code>list-of-s2</code> with a listof contract, which  ends up making a copy of the original (empty) list as it traverses and  validates it. The original value does change in typed code, but the main module only has  access to the empty copy.</p>\n\n<p>Here&rsquo;s a step-by-step breakdown:</p>\n\n<ol>\n <li>the typed module creates an empty list-of-s2</li>\n <li>the main module imports the list and receives a new copy</li>\n <li>the main module calls set-list-of-s2! and the typed module updates the original list-of-s2 variable</li>\n <li>the main module reads from its copy &mdash; and it&rsquo;s still empty</li></ol>\n\n<h3 id=\"hows-transient\">How&rsquo;s transient?</h3>\n\n<p><strong>Shallow</strong> lets the original list travel to untyped code. There are no contracts in the way.</p>\n\n<h2 id=\"discussion\">Discussion</h2>\n\n<p>Wow! It&rsquo;s great to see that Shallow Racket works &ldquo;as expected&rdquo; on these examples. I hope the Shallow option makes types more accessible to more Racket programmers  in the future.</p>\n\n<p>If you have a similar experience with a deep-types error, let me know.</p>\n\n<p>Keep in mind, though, the freedoms of shallow types allow silent failures. A value can pass by a mis-matched type annotation without Shallow raising an  error &mdash; and if that happens, the end result may be really, really confusing. Of course you can always switch back to Deep Typed Racket for debugging.</p>\n\n<p>Shallow Typed Racket is coming soon. Follow the <a href=\"https://github.com/racket/typed-racket/pull/948\">pull request</a>  or watch the Racket release notes for news.</p>\n\n<h3 id=\"links\">Links</h3>\n\n<ul>\n <li><a href=\"http://prl.ccs.neu.edu/blog/2019/10/31/complete-monitors-for-gradual-types/\">Larger example</a>  where Shallow misses an error that Deep catches</li>\n <li>Michael M. Vitousek <a href=\"http://hdl.handle.net/2022/23172\">invented</a>  the Transient semantics and implemented it in  <a href=\"https://github.com/mvitousek/reticulated\">Reticulated Python</a>.</li>\n <li>My <a href=\"https://ccs.neu.edu/home/types/publications/publications.html#g-thesis-2020\">upcoming dissertation</a>  has lots more to say about Shallow Typed Racket.</li></ul>\n\n<p><em>Thanks to Artem Pelenitsyn for reading and criticizing an early version of this post.</em></p>")) ((? . 26) f post (u . "Linear Types for Low-level Languages") (? . 26) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/02/28/linear-types-for-low-level-languages/index.html" . unix) (u . "/blog/2017/02/28/linear-types-for-low-level-languages/") (u . "2017-02-28T09:51:55") (? . 25) (? . 14) (c (u . "HOPL") c (u . "Author: Daniel Patterson")) (? . 5) #t (u . "<!-- more-->\n\n<p>In this talk, we covered early papers (primarily, by Girard, Lafont, and Abramsky) on linear logic and its reflections into computation. The goal was to understand why linearity is often turned to as a principled way to control resource usage, as shows up in a language like Rust. From the very beginning, researchers realized the implications for &ldquo;low-level&rdquo; languages - that linear resources would eliminate the need for garbage collection, allow in-place mutation, and enable safe parallel computation. However, pure implementations of linearity incur lots of copying, doing away with any efficiency gained, and we covered a survey of papers that attempted to reconcile this contradiction by weakening linearity in controlled ways.</p>\n\n<p>Notes:</p>\n\n<ul>\n <li><a href=\"https://github.com/nuprl/hopl-s2017/blob/master/lecture_notes/2017-02-14.md\">https://github.com/nuprl/hopl-s2017/blob/master/lecture_notes/2017&ndash;02&ndash;14.md</a></li></ul>\n\n<hr />\n\n<p>Just after the talk, over lunch, we had a lab discussion about the phrase &ldquo;low level&rdquo;. Here are some thoughts:</p>\n\n<ul>\n <li>the phrase is relative, both over time and depending on the programming  task at hand</li>\n <li>a &ldquo;low level&rdquo; task is &ldquo;one that you shouldn&rsquo;t need to worry about&rdquo; while  solving your current task</li></ul>\n\n<p>And here are some example &ldquo;low-level&rdquo; tasks:</p>\n\n<ul>\n <li>Time and space management is &ldquo;low level&rdquo; when designing a new algorithm  (the first question is correctness)</li>\n <li>Calling conventions and endian-ness (facets of the damn machine running  the programs) are almost always low-level</li>\n <li>Whether a given value is serializable is usually low-level</li>\n <li>Possible side effects, thrown exceptions, and optional arguments can all  be considered &ldquo;low level&rdquo; aspects of library functions. This is low-level  in the sense that &ldquo;I&rsquo;d rather use a simpler type to think about this library&rdquo;</li>\n <li>Managing type annotations is a low-level detail in ML programs</li></ul>")) ((? . 62) f post (u . "Introducing HOPL 2017") (? . 62) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/02/15/introducing-hopl-2017/index.html" . unix) (u . "/blog/2017/02/15/introducing-hopl-2017/") (u . "2017-02-15T01:21:37") (? . 60) (? . 29) (c (u . "HOPL") c (u . "Author: Ben Greenman")) (u . "\n<p>This semester at Northeastern, Matthias Felleisen is organizing the <a href=\"http://www.ccs.neu.edu/home/matthias/7480-s17/index.html\">History of Programming Languages</a> seminar. Look for posts tagged <code>HOPL</code> for updates from the lectures.</p>") #t (u . "\n<p>This semester at Northeastern, Matthias Felleisen is organizing the <a href=\"http://www.ccs.neu.edu/home/matthias/7480-s17/index.html\">History of Programming Languages</a> seminar. Look for posts tagged <code>HOPL</code> for updates from the lectures.</p>\n<!-- more-->\n\n<p>Once every 6 to 8 years (i.e., once every batch of Ph.D. students?), <a href=\"http://www.ccs.neu.edu/home/matthias\">Matthias Felleisen</a> teaches History of Programming Languages. Nominally, the course is a seminar. But unlike a typical seminar course, weekly topics are not the technical details from a handful of papers. Rather:</p>\n\n<blockquote>\n <p>The primary goal is to understand (some of) the discipline as it exists today and how some of its major themes evolved.</p></blockquote>\n\n<blockquote>\n <p>The secondary goal is to develop basic skills for understanding and describing research themes. Every student will learn to study a theme via a series of papers, prepare an annotated bibliography, and present the key steps in the evolution of the theme.</p></blockquote>\n\n<p><strong>Themes</strong> is the operative word. To set the tone, this semester started with &ldquo;themes that NUPRL faculty members have developed over the many decades of their careers.&rdquo;</p>\n\n<ul>\n <li>Matthias, <em>Full Abstraction: From PCF to SPCF</em></li>\n <li>Jan Vitek, <em>From Encapsulation to Ownership</em></li>\n <li>Will Clinger, <em>Garbage Collection vs. Manual Allocation</em></li>\n <li>Olin Shivers, <em>Higher-order Flow Analysis</em></li>\n <li>Amal Ahmed, <em>Logical Relations: Stepping Beyond Toy Languages</em></li>\n <li>Matthias, <em>Programming Languages and Calculi</em></li>\n <li>Jan-Willem van de Meent, <em>Rescoring Strategies for Probabilistic Programs</em></li>\n <li>(upcoming) Mitch Wand, <em>Analysis-Based Program Transformation</em></li>\n <li>(upcoming) Frank Tip, <em>Refactoring</em></li></ul>\n\n<p>At this point in the course, we are just starting with the student presentations. As these presentations happen, we plan to push updates to this blog. All presentation materials are in the course repository:</p>\n\n<ul>\n <li><a href=\"https://github.com/nuprl/hopl-s2017\">https://github.com/nuprl/hopl-s2017</a></li></ul>\n\n<p>Speakers&rsquo; notes and annotated bibliographies are in top-level folders in the repo. Discussion summaries and &ldquo;unofficial&rdquo; notes are in the top-level <a href=\"https://github.com/nuprl/hopl-s2017/tree/master/lecture_notes\"><code>lecture_notes/</code></a> folder.</p>\n\n<p>The list of upcoming presentations is online (along with <a href=\"http://www.ccs.neu.edu/home/matthias/7480-s17/Summary___Materials.html\">the papers</a> each presentation is based on):</p>\n\n<ul>\n <li><a href=\"http://www.ccs.neu.edu/home/matthias/7480-s17/lectures.html\">http://www.ccs.neu.edu/home/matthias/7480-s17/lectures.html</a></li></ul>\n\n<p>Blogs posts for each talk should appear 2 weeks after the talk happens.</p>\n\n<hr />\n\n<p>Links to past editions of HOPL:</p>\n\n<ul>\n <li><a href=\"http://www.ccs.neu.edu/home/matthias/369-s10/index.html\">Spring 2010</a></li>\n <li><a href=\"http://www.ccs.neu.edu/home/matthias/369-s04/index.html\">Spring 2004</a></li></ul>")) ((? . 74) f post (u . "[Why am I going to ICFP 2017? (cross-post)](https://williamjbowman.com/blog/2017/08/29/why-am-i-going-to-icfp-2017/)") (? . 74) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/08/29/-why-am-i-going-to-icfp-2017-cross-post-https-williamjbowman-com-blog-2017-08-29-why-am-i-going-to-icfp-2017/index.html" . unix) (u . "/blog/2017/08/29/-why-am-i-going-to-icfp-2017-cross-post-https-williamjbowman-com-blog-2017-08-29-why-am-i-going-to-icfp-2017/") (u . "2017-08-29T13:33:21") (? . 75) (? . 18) (c (u . "Author: William J. Bowman")) (? . 5) #f (? . 5)) ((? . 76) f post (u . "On-Stack Replacement") (? . 76) 1731904015 (p+ #"/home/runner/work/website/website/blog/2019/01/28/on-stack-replacement/index.html" . unix) (u . "/blog/2019/01/28/on-stack-replacement/") (u . "2019-01-28T10:29:57") (? . 77) (? . 54) (c (u . "Author: Ming-Ho Yee")) (u . "\n<p>Last semester, I took <a href=\"https://course.ccs.neu.edu/cs7600/\">a course</a> where the final project was to write a survey paper on &ldquo;a topic in the intersection between computer systems and your area.&rdquo; So I wrote about on-stack replacement.</p>") #t (u . "\n<p>Last semester, I took <a href=\"https://course.ccs.neu.edu/cs7600/\">a course</a> where the final project was to write a survey paper on &ldquo;a topic in the intersection between computer systems and your area.&rdquo; So I wrote about on-stack replacement.</p>\n<!-- more-->\n\n<p><strong>Abstract</strong></p>\n\n<blockquote>\n <p>On-stack replacement (OSR) is a programming language implementation technique that allows a running program to switch to a different version of code. For example, a program could start executing optimized code, and then transfer to and start executing unoptimized code. This was the original use case for OSR, to facilitate debugging of optimized code.</p>\n <p>After its original use was established, OSR shifted to a different use case: optimizing programs. OSR allows the run-time system to detect if a program is executing an inefficient loop, recompile and optimize the method that contains the loop, and then transfer control to the newly compiled method. Another strategy is to optimize code based on some assumptions, then, if the assumptions are invalidated at run-time, transfer control back to the original, unoptimized code.</p>\n <p>In this survey paper, we study how OSR was first introduced as a means for debugging, how it came to be used for program optimizations, its implementation as a reusable library, and other directions of research.</p></blockquote>\n\n<p>If you&rsquo;re interested, you can find a copy <a href=\"/img/cs7600-mhyee-survey-paper-osr.pdf\">here</a> or on <a href=\"https://www.overleaf.com/read/smcmsnksxfdk\">Overleaf</a>.</p>\n\n<hr />\n\n<p><em>If you liked this post, you may also be interested in <a href=\"http://prl.ccs.neu.edu/blog/2017/03/15/tracing-jits-for-dynamic-languages/\">tracing JITs for dynamic languages</a>.</em></p>")) ((? . 78) f post (u . "A Spectrum of Type Soundness and Performance") (? . 78) 1731904015 (p+ #"/home/runner/work/website/website/blog/2018/10/06/a-spectrum-of-type-soundness-and-performance/index.html" . unix) (u . "/blog/2018/10/06/a-spectrum-of-type-soundness-and-performance/") (u . "2018-10-06T11:23:35") (? . 79) (? . 34) (c (u . "migratory typing") c (u . "gradual typing") c (u . "extended abstract") c (u . "Author: Ben Greenman")) (u . "\n<p>The literature on mixed-typed languages presents (at least) three fundamentally different ways of thinking about the integrity of programs that combine  statically typed and dynamically typed code. Recently, we have been sorting them out.</p>") #t (u . "\n<p>The literature on mixed-typed languages presents (at least) three fundamentally different ways of thinking about the integrity of programs that combine  statically typed and dynamically typed code. Recently, we have been sorting them out.</p>\n<!-- more-->\n\n<blockquote>\n <p>Note: this post is an extended abstract for the paper <em>A Spectrum of Type  Soundness and Performance</em> by Ben Greenman and Matthias Felleisen.  For the full paper, slides, code, and a video presentation, visit  <a href=\"http://www.ccs.neu.edu/home/types/publications/publications.html#gf-icfp-2018\">http://www.ccs.neu.edu/home/types/publications/publications.html#gf-icfp-2018</a></p></blockquote>\n\n<p>A dynamically-typed language runs any program that &ldquo;looks good&rdquo; (i.e.,  passes some basic syntactic criteria. In Python a program cannot mix  indentation levels. In Racket a program cannot refer to unbound variables). A statically-typed language runs any program that both &ldquo;looks good&rdquo; and  is well-typed according to a type checker.</p>\n\n<p>A <em>mixed-typed</em> language allows some combination of static and dynamic typing. There are many languages that fall in the mixed-typed category; figure 1 lists  a few, roughly arranged left-to-right by the year they first provided a way to  mix.</p>\n\n<div class=\"figure\"><img src=\"/img/mixed-typed-systems-by-year.png\" alt=\"Figure 1: Some mixed-typed languages\" />\n <p class=\"caption\">Figure 1: Some mixed-typed languages</p></div>\n\n<p>These languages all try to combine static and dynamic typing in a useful way,  but they take VERY different approaches. For example:</p>\n\n<ul>\n <li><strong>MACLISP</strong> defines a syntax for type annotations but does not say how a compiler  should interpret the types; see section 14.2 of the <a href=\"http://www.softwarepreservation.org/projects/LISP/MIT/Moon-MACLISP_Reference_Manual-Apr_08_1974.pdf\">Moonual</a>.  For example, a compiler may use types to generate specialized code that assumes  the type annotations are correct (and has undefined behavior otherwise).</li>\n <li><strong>Strongtalk</strong> includes a static type checker and DOES NOT use types to change the  behavior of a program.  For rationale, see the <a href=\"http://bracha.org/pluggableTypesPosition.pdf\">Pluggable Type Systems</a> position paper.</li>\n <li><strong>Typed Racket</strong> lets a program combine statically-typed modules and dynamically-typed  modules. The compiler inserts run-time checks at the boundaries between such  modules to detect any mismatches between the static types and incoming dynamically-typed  values.</li>\n <li><strong>Thorn</strong> requires that every value in a program has a type, but allows  dynamically-typed contexts to manipulate values. In other words, every Thorn  value is an instance of a statically-declared class and classes may contain  dynamically-typed methods.</li>\n <li><strong>Reticulated</strong> lets a program combine static and dynamic <em>expressions</em> and  guarantees that the combination has a well-defined semantics (Vitousek, Swords, and Siek <a href=\"https://dl.acm.org/citation.cfm?id=3009849\">POPL 2017</a>).</li></ul>\n\n<p>That makes five different systems. There are 15 other systems in the figure, and many more in the world. How can we make sense of this space? We claim: by understanding each system&rsquo;s protocol for checking  dynamically-typed values at a <em>type boundary</em> (between static and dynamic code).</p>\n\n<h3 id=\"main-contribution\">Main Contribution</h3>\n\n<p>In the paper <a href=\"http://drops.dagstuhl.de/opus/volltexte/2015/5031/\"><em>A Spectrum of Type Soundness and Performance</em></a>,  we define a tiny mixed-typed language and show three ways to define the  behavior of programs &mdash; based on three protocols for checking  dynamically-typed values that cross a boundary into statically-typed code.</p>\n\n<p>The three behaviors are inspired by existing languages. A <strong>higher order</strong> behavior ensures that dynamically-typed  values match the static type at a boundary &mdash; by checking the value when possible,  and by monitoring the value&rsquo;s future interactions when necessary. A <strong>first order</strong> behavior performs a yes-or-no check on dynamically-typed values  and never monitors their future behavior. An <strong>erasure</strong> behavior does no checking whatsoever.</p>\n\n<blockquote>\n <p>Example (monitors): if typed code expects a function from numbers to numbers and receives an untyped function <code>f</code>, then one way to enforce the type boundary is to wrap <code>f</code> in a proxy to assert that every future call to <code>f</code> returns a number. In this case, the proxy monitors the behavior of <code>f</code>.</p></blockquote>\n\n<p>Concretely, the paper defines three formal semantics with the same names. The <strong>higher-order</strong> semantics enforces full types at the boundaries (Section 2.3). The <strong>first-order</strong> semantics enforces type constructors at the boundaries, and  furthermore enforces type constructors on every &ldquo;selector&rdquo; operation in typed  code, e.g., function application, data structure access (Section 2.5). The <strong>erasure</strong> semantics simply ignores the types (Section 2.4).</p>\n\n<p>Each semantics satisfies a <em>different</em> notion of soundness for mixed-typed  programs, and each notion is slightly weaker than soundness for fully-typed  programs. The paper states these theorems (Section 2) and the  <a href=\"https://repository.library.northeastern.edu/files/neu:cj82rk279\">online supplement</a>  gives full proofs.</p>\n\n<p>The paper has more to say about the meta-theory. See section 2 and section 4.</p>\n\n<blockquote>\n <p>To the best of our knowledge, this paper is the first to explicitly acknowledge that different approaches to a mixed-typed language lead to different notions of soundness. Other papers state type soundness theorems for <a href=\"https://dl.acm.org/citation.cfm?id=2676971\">subset of the language</a> (in the spirit of <a href=\"http://soundiness.org/\">soundiness</a>) or use the name &ldquo;type soundness&rdquo; to describe <a href=\"https://dl.acm.org/citation.cfm?id=2676971\">a different property</a>.</p></blockquote>\n\n<p>Next, we used the three semantics as a guide to arrive at three compilers for  Typed Racket. The higher-order compiler is the standard Typed Racket. The first-order compiler is something we built, based on the semantics. The erasure compiler simply ignores the type annotations &mdash; similar to Typed Racket&rsquo;s  <a href=\"http://docs.racket-lang.org/ts-reference/Typed_Racket_Syntax_Without_Type_Checking.html\">no-check</a> language.</p>\n\n<p>Using this set-up, we measured the performance of mixed-typed programs via  each compiler using the method suggested by Takikawa et. al (<a href=\"https://www2.ccs.neu.edu/racket/pubs/popl16-tfgnvf.pdf\">POPL 2016</a>). The programs we measured are the non-object-oriented ones from our <a href=\"http://docs.racket-lang.org/gtp-benchmarks/index.html\">benchmark suite</a>.</p>\n\n<p>To some extent, the performance results confirm conjectures from the literature. The full results, however, include many surprises &mdash; see section 3 of the paper,  section B of the <a href=\"https://repository.library.northeastern.edu/files/neu:cj82rk279\">supplement</a>,  and/or the <a href=\"http://www.ccs.neu.edu/home/types/publications/apples-to-apples/gf-icfp-2018-slides.pdf\">slides</a>.</p>\n\n<h3 id=\"implications\">Implications</h3>\n\n<ol>\n <li>The model in the paper is one way to understand the different approaches  to mixed-typed languages. See section 5 of the paper,  section D of the <a href=\"https://repository.library.northeastern.edu/files/neu:cj82rk279\">supplement</a>,  or <a href=\"http://www.ccs.neu.edu/home/types/publications/apples-to-apples/gf-icfp-2018-slides.pdf\">slide 114</a>.</li>\n <li>Programmers using mixed-typed languages need to know what guarantees their  types provide.  (It is <a href=\"https://twitter.com/jbandi/status/965005464638541825\">not safe to assume that TypeScript types give the same guarantees as OCaml types</a>!)  Section 4 of the paper contains many examples of how the different guarantees  may affect practice.</li>\n <li>The relative performance of different approaches is more nuanced than the  literature suggests. Our paper gives a first systematic comparison based on  implementations that have clear areas for improvement. The question is:  can we find improvements that lead to asymptotic differences, or is it a  battle for constant factors?</li></ol>\n\n<blockquote>\n <p>Note: in this post, a <em>mixed-typed language</em> is one that allows any combination of static and dynamic typing. A <em>gradually-typed language</em> is one that allows a certain kind of mixing that satisfies properties defined by Siek, Vitousek, Cimini, and Boyland (<a href=\"http://drops.dagstuhl.de/opus/volltexte/2015/5031/\">SNAPL 2015</a>).</p></blockquote>")) ((? . 79) f post (u . "Sampling Gradual Typing Performance") (? . 79) 1731904015 (p+ #"/home/runner/work/website/website/blog/2018/05/08/sampling-gradual-typing-performance/index.html" . unix) (u . "/blog/2018/05/08/sampling-gradual-typing-performance/") (u . "2018-05-08T15:37:37") (? . 59) (? . 78) (c (u . "gradual typing") c (u . "migratory typing") c (u . "performance") c (u . "statistics") c (u . "Takikawa constant") c (u . "Author: Ben Greenman") c (u . "Author: Zeina Migeed")) (u . "\n<p>This post explains the sampling method introduced in the paper <a href=\"http://www.ccs.neu.edu/home/types/publications/publications.html#gm-pepm-2018\"><em>On the Cost of Type-Tag Soundness</em></a></p>") #t (u . "\n<p>This post explains the sampling method introduced in the paper <a href=\"http://www.ccs.neu.edu/home/types/publications/publications.html#gm-pepm-2018\"><em>On the Cost of Type-Tag Soundness</em></a></p>\n<!-- more-->\n\n<h2 id=\"quick-reference-how-to-apply-the-method\">Quick Reference: How to apply the method</h2>\n\n<ol>\n <li>Find an untyped program, measure its running time.</li>\n <li>Define a <em>granularity</em> for type annotations (by-function, by-module, by-program, &hellip;.).</li>\n <li>Define a sample size <strong>s</strong> and number of samples <strong>r</strong>.</li>\n <li>Randomly select <strong>s</strong> <em>configurations</em> uniformly at random, measure their running time.</li>\n <li>Repeat the previous step <strong>r</strong> times.</li>\n <li>Pick a positive real number <strong>D</strong>.</li>\n <li>Count the proportion of configurations in each sample with running time less-than-or-equal-to <strong>D</strong></li>\n <li>Build a 95% confidence interval for the <strong>r</strong> proportions computed in the previous step</li>\n <li>Conclusion: there is a good chance that your interval contains the true proportion of configurations with running time less-than-or-equal-to <strong>D</strong></li></ol>\n\n<h2 id=\"background-what-to-measure\">Background: what to measure</h2>\n\n<p>A migratory typing system adds static typing to a dynamically-typed (or, untyped) language. The recipe for &ldquo;adding static typing&rdquo; has a few steps:</p>\n\n<ul>\n <li>add a syntax for type annotations</li>\n <li>add a static type checker</li>\n <li>add a semantics for statically-typed parts of the program</li></ul>\n\n<p>If the semantics for statically-typed parts of the program is <strong>not</strong> the same  as the semantics for dynamically-typed parts, then it is important to measure  performance.</p>\n\n<p>The key question is: how does adding type annotations affect the  running time of a working program? We do not know how to answer this question directly.</p>\n\n<p>An easier question, that we can answer, is: for a few programs each with  one full set of type annotations, how does adding or removing the chosen type  annotations affect the running time of these programs?</p>\n\n<p>The next two sections give two methods for answering this question.</p>\n\n<h2 id=\"exhaustive-method\">Exhaustive Method</h2>\n\n<p>One way to answer our easier question is to remove type annotations one  &ldquo;unit&rdquo; at a time and measure the running time of all these partially-typed  programs. We call the &ldquo;unit&rdquo; the <em>granularity</em> of the performance evaluation. For example, some choices for granularity are to remove types one module  at a time, to remove types one function at a time, or to remove types  one variable at a time. We call the &ldquo;partially-typed programs&rdquo; the <em>configurations</em> of the original  dynamically-typed program. Note that the number of configurations depends on the choice of granularity  &mdash; I can&rsquo;t just use the word <em>configurations</em> without telling you the  granularity I have in mind.</p>\n\n<p>After measuring the running time of all configurations, we can summarize the  results. One way to summarize is to pick a number <strong>D</strong> and count the number of configurations  that run at most <strong>D</strong> times slower than the original dynamically-typed program. If this number is large, then the takeaway is:  if <em>you</em> are willing to accept at most a <strong>D</strong>x slowdown, and you add your  own type annotations to your own program, then there&rsquo;s some hope that your  configuration runs at most <strong>D</strong> times slower than your original program.</p>\n\n<blockquote>\n <p>Credit for the exhaustive method: <a href=\"https://www2.ccs.neu.edu/racket/pubs/popl16-tfgnvf.pdf\"><em>Is Sound Gradual Typing Dead?</em></a> and <a href=\"https://www2.ccs.neu.edu/racket/pubs/ecoop2015-takikawa-et-al.pdf\"><em>Toward Practical Gradual Typing</em></a></p></blockquote>\n\n<h2 id=\"simple-random-approximation-method\">Simple Random Approximation Method</h2>\n\n<p>The method above does not scale to large programs or fine granularities  because it asks for an exponential number of measurements. E.g., if there are 20 units to add or remove types from, then there are 1 million  configurations to measure. Exponentials are bad.</p>\n\n<p><a href=\"http://www.ccs.neu.edu/home/types/publications/publications.html#gm-pepm-2018\"><em>On the Cost of Type-Tag Soundness</em></a>,  suggests a method based on simple random sampling that answers a similar question. Instead of measuring the true proportion of configurations that run at most  <strong>D</strong> times slower than the original dynamically-typed program, we:</p>\n\n<ul>\n <li>pick a sample size <strong>s</strong> (in the paper, we used <strong>s = 10M</strong> where <strong>M</strong> is the number of units),</li>\n <li>pick a number of samples <strong>r</strong> (in the paper, we used <strong>r = 10</strong>),</li>\n <li>and build a 95% confidence interval for the true proportion of configurations  that run at most <strong>D</strong> times slower than the original program (from the  <strong>r</strong> proportions of configurations that run at most <strong>D</strong> times slower than the  original program in each of the <strong>r</strong> samples).</li></ul>\n\n<p>The method is outlined above, described in the paper, and validated in that paper&rsquo;s appendix. Please let us know if you have more questions.</p>\n\n<blockquote>\n <p>Maybe you&rsquo;re wondering, &ldquo;gee why do they keep writing out &lsquo;configurations that  run at most &hellip;.&rsquo; instead of something shorter?&rdquo;. Well, the short version is <em><strong>D</strong>-deliverable</em> and it was introduced in the <a href=\"https://www2.ccs.neu.edu/racket/pubs/popl16-tfgnvf.pdf\"><em>Is Sound Gradual Typing Dead?</em></a> paper. Unfortunately, (1) that paper instantiated <strong>D</strong> to <strong>3</strong>-deliverable in order to  explain a few graphs and (2) at least two published papers (<a href=\"https://dl.acm.org/citation.cfm?id=3009849\">paper 1</a>, <a href=\"https://dl.acm.org/citation.cfm?id=3133878\">paper 2</a>)  now cite us as saying <strong>3</strong>x overhead is the cutoff between a good migratory  typing system and a bad one.</p>\n <p>&hellip;</p>\n <p>If we can&rsquo;t trust scientists to understand, then we <em>definitely</em> can&rsquo;t trust  you folks on the internet.</p></blockquote>\n\n<h2 id=\"faq\">FAQ</h2>\n\n<h3 id=\"q-what-is-the-sampling-method-useful-for\">Q. What is the sampling method useful for?</h3>\n\n<ul>\n <li>Making a confidence interval for the true proportion of configurations that  run at most <strong>D</strong> times slower than some baseline, for your favorite value of <strong>D</strong>.</li></ul>\n\n<h3 id=\"q-what-is-the-sampling-method-not-useful-for\">Q. What is the sampling method <strong>not</strong> useful for?</h3>\n\n<ul>\n <li>Finding the slowest configuration.</li>\n <li>Finding the average running time of all configurations.</li>\n <li>Evaluations where &ldquo;removing types&rdquo; might involve changing <strong>List[Int]</strong> to <strong>List[Dyn]</strong>, etc.</li>\n <li>Situations where its wrong to assume that a programmer will start from untyped and pick a configuration uniformly at random</li>\n <li>&hellip;. many more &hellip;.</li></ul>\n\n<h3 id=\"q-why-is-it-okay-to-choose-d-after-collecting-the-samples\">Q. Why is it okay to choose <strong>D</strong> after collecting the samples?</h3>\n\n<p>The &ldquo;quick reference&rdquo; at the top of this post suggests choosing a value for <strong>D</strong>  (the cutoff between good and bad performance) after sampling configurations  and measuring their running time. This may sound strange, because (1) the value of <strong>D</strong> affects our bottom-line  judgment about the proportion of configurations with good performance, and (2)  shouldn&rsquo;t and value that affects the bottom line be fixed before taking samples? (To avoid accidental <a href=\"https://en.wikipedia.org/wiki/Data_dredging\">data dredging</a>.)</p>\n\n<p>The reason it is ok to pick <strong>D</strong> after taking the sample is that the  running times in the sample are independent of the choice of <strong>D</strong>.</p>\n\n<p>For example, if one person chose <strong>D=3</strong> and a second person chose <strong>D=9</strong>,  both would follow the same protocol independent of <strong>D</strong> to take samples.</p>\n\n<h3 id=\"q-how-does-migratory-typing-relate-to-gradual-typing\">Q. How does migratory typing relate to gradual typing?</h3>\n\n<p>Gradual typing is not just about adding a type system to an existing programming  language. See <a href=\"http://drops.dagstuhl.de/opus/volltexte/2015/5031/\"><em>Refined Criteria for Gradual Typing</em></a>  and <a href=\"http://drops.dagstuhl.de/opus/volltexte/2017/7120/\"><em>Migratory Typing: 10 Years Later</em></a>  for details.</p>\n\n<h3 id=\"q-do-you-have-code-i-can-use-to-plot-sampling-data\">Q. Do you have code I can use to plot sampling data?</h3>\n\n<p>Yes, start here:</p>\n\n<ul>\n <li><a href=\"http://docs.racket-lang.org/gtp-plot/index.html#%28def._%28%28lib._gtp-plot%2Fplot..rkt%29._samples-plot%29%29\">http://docs.racket-lang.org/gtp-plot/index.html#%28def._%28%28lib._gtp-plot%2Fplot..rkt%29._samples-plot%29%29</a></li></ul>\n\n<p>Please ask questions and open issues if you have trouble. The source is here:</p>\n\n<ul>\n <li><a href=\"https://github.com/bennn/gtp-plot\">https://github.com/bennn/gtp-plot</a></li></ul>\n\n<h3 id=\"q-where-is-code-for-the-sampling-paper\">Q. Where is code for the sampling paper?</h3>\n\n<p>Start here:</p>\n\n<ul>\n <li><a href=\"https://pkgd.racket-lang.org/pkgn/package/gm-pepm-2018\">https://pkgd.racket-lang.org/pkgn/package/gm-pepm-2018</a></li></ul>\n\n<p>Source is here:</p>\n\n<ul>\n <li><a href=\"https://github.com/nuprl/retic_performance\">https://github.com/nuprl/retic_performance</a></li></ul>\n\n<h2 id=\"closing-thoughts\">Closing Thoughts</h2>\n\n<p>Statistics is easy to do wrong. Please let us know if you think our method is doing bad statistics.</p>")) ((? . 61) f post (u . "Fall 2016 PL Junior Retrospective") (? . 61) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/01/02/fall-2016-pl-junior-retrospective/index.html" . unix) (u . "/blog/2017/01/02/fall-2016-pl-junior-retrospective/") (u . "2017-01-02T16:39:37") (? . 43) (? . 60) (c (u . "PL Junior") c (u . "Author: Ben Chung") c (u . "Author: Milo Davis") c (u . "Author: Ming-Ho Yee") c (u . "Author: Sam Caldwell")) (u . "\n<p>The <a href=\"http://prl.ccs.neu.edu/seminars.html\">Programming Language Seminar, Junior</a> (or “PL Junior”), is a seminar for junior students to learn and discuss topics at a pace more suitable to our background. This semester, we decided to study dependent types. We chose this topic because</p>\n\n<ol>\n <li>working from the <a href=\"https://mitpress.mit.edu/books/types-and-programming-languages\">TAPL</a> presentation of type systems, dependent types are a step up in difficulty (excepting F-omega-sub), and</li>\n <li>they represent a significant increase in the reasoning power of types over programs.</li></ol>") #t (u . "\n<p>The <a href=\"http://prl.ccs.neu.edu/seminars.html\">Programming Language Seminar, Junior</a> (or “PL Junior”), is a seminar for junior students to learn and discuss topics at a pace more suitable to our background. This semester, we decided to study dependent types. We chose this topic because</p>\n\n<ol>\n <li>working from the <a href=\"https://mitpress.mit.edu/books/types-and-programming-languages\">TAPL</a> presentation of type systems, dependent types are a step up in difficulty (excepting F-omega-sub), and</li>\n <li>they represent a significant increase in the reasoning power of types over programs.</li></ol>\n<!-- more-->\n\n<p>There was a preference for learning how to implement a dependent type system, instead of spending a significant amount of time reading papers, especially dense type-theoretic papers suggested by <a href=\"http://purelytheoretical.com/sywtltt.html\">posts</a> like <a href=\"http://jozefg.bitbucket.org/posts/2015-08-14-learn-tt.html\">these</a>. So we followed the <a href=\"https://github.com/sweirich/pi-forall\">pi-for-all</a> lecture series given by Stephanie Weirich at <a href=\"https://www.cis.upenn.edu/~bcpierce/attapl/\">OPLSS</a>, which focuses on implementing a simple dependently-typed programming language.</p>\n\n<p>After the pi-for-all lectures, we read chapter two of Edwin Brady’s <a href=\"https://eb.host.cs.st-andrews.ac.uk/writings/thesis.pdf\">dissertation on implementing dependently typed languages</a>. The thesis includes a relatively approachable introduction to TT, the core dependent type theory of Epigram.</p>\n\n<p>Along the way, we became sidetracked by <a href=\"https://en.wikipedia.org/wiki/System_U#Girard.27s_paradox\">Girard’s paradox</a>. In the first pi-for-all lecture, we came across the Type-in-Type rule. (In a dependent type system the term and the type languages are the same. However, we still need to distinguish what is a “program” and what is a “type,” for instance, so that we can determine that the annotation of a function’s argument is valid. So a construct in the term language is Type, which is meant to describe those things that are valid in programs where we expect to find a type). In the lecture, this prompted the comment that this (“of course”) makes our system inconsistent as a logic, but there was no further elaboration, and we could not figure out how to use this fact to show inconsistency.</p>\n\n<p>It turns out the reason Type-in-Type is inconsistent is quite complicated. It is explained in a <a href=\"https://www.cs.cmu.edu/~kw/scans/hurkens95tlca.pdf\">paper</a> that we had difficulty understanding. So we turned to the students in our lab that have expertise in the area. The answer we received is that, intuitively, it is inconsistent for the same reason as Russell’s paradox (or the Burali-Forti paradox), but the actual proof is actually quite involved. The lesson we drew is that despite being “obvious,” Type-in-Type being inconsistent is not easy to prove. The way people seem to throw around this conclusion is confusing from a beginner’s point of view.</p>\n\n<p>The best thing about the pi-for-all series is that it demystified dependent types for us. We gained confidence in being able to whiteboard a dependent type system with the ease of System-F or STLC. If we had one complaint, the presentation of the material relied heavily on Haskell details. The unbound library to handle variables in the implementation results in a somewhat “magicy” representation of binding; it’s not clear that the benefits are so great as to outweigh the cost of just implementing alpha-equivalence and capture-avoiding-substitution. Overall they were high-quality lectures. As hinted above, we didn’t particularly care for the second lecture that was mostly a code walk-through. One advantage of watching videos was that we could speed through parts we were already comfortable with.</p>\n\n<p>With Edwin Brady’s dissertation, we got a glimpse of how quickly the details of a dependently typed language get hairy. Looking at you, inductive data definitions and eliminations. There were some extremely large type signatures. While this exercise boosted our confidence that we could read Serious Dependent Types™ papers, it also gave evidence that our fears of incomprehensibility were not completely unfounded.</p>\n\n<p>This issue appeared before in our discussion of Girard’s Paradox. In the discussion of the paradox, we got stuck when we tried to understand the very complex term that inhabited the bottom type. Dependent typing, and discussions thereof, allow very rich, meaningful, and complex types that are as complex as the code that they abstract over. While we are used to understanding these structures in code, parsing a complex type and its fundamental meaning gave us considerable difficulty.</p>\n\n<h2 id=\"thoughts-on-the-format\">Thoughts on the format</h2>\n\n<p>Our meetings this semester were all of the form “we’ll watch this lecture or read this chapter, and then discuss it next week.” Next semester we would like to go back to presenting each week. We feel doing presentations forces the presenter to reach a deeper understanding of the material. This semester we got a relatively shallow understanding of a broad area. A deeper understanding with a narrower focus may be more beneficial (or complementary).</p>\n\n<p>[[Sam’s defense as Grand Convener of PL Junior: Once we picked dependent types as a topic, doing presentations was not an option. We didn’t have the expertise in the area to pick out different sub-topics and papers suitable for presentations. And, since we were short-handed (4 people each week), we would be presenting once a month!]]</p>\n\n<p>If we continue learning more about dependent types it would be by: 1) Doing more reading, such as the <a href=\"https://www.cis.upenn.edu/~bcpierce/attapl/\">ATTAPL</a> chapter or the programming in Martin-Löf’s type theory material. 2) Actually trying to implement some of the things we’ve learned this semester 3) Playing around with more of the various dependent type systems and theorem provers out there</p>\n\n<p>For future pl junior cohorts or anyone else in learning about dependent types: Pi-for-all is useful material, but could be condensed into two weeks (for example, by watching the lectures at 1.5x speed) instead of four. Don’t worry about Type-in-Type. The Epigram material is OK but you might be better served looking at ATTAPL first. At some point, you will have to read the dense papers, but pi-for-all is a good introduction.</p>")) ((? . 49) f post (u . "[Bridging the System Configuration Gap (Cross-Post)](https://aaronweiss.us/posts/2017-06-05-bridging-the-system-configuration-gap.html)") (? . 49) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/06/09/-bridging-the-system-configuration-gap-cross-post-https-aaronweiss-us-posts-2017-06-05-bridging-the-system-configuration-gap-html/index.html" . unix) (u . "/blog/2017/06/09/-bridging-the-system-configuration-gap-cross-post-https-aaronweiss-us-posts-2017-06-05-bridging-the-system-configuration-gap-html/") (u . "2017-06-09T13:36:56") (? . 48) (? . 8) (c (u . "Author: Aaron Weiss")) (? . 5) #f (? . 5)) ((? . 75) f post (u . "Closure Conversion as CoYoneda") (? . 75) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/08/28/closure-conversion-as-coyoneda/index.html" . unix) (u . "/blog/2017/08/28/closure-conversion-as-coyoneda/") (u . "2017-08-28T10:30:00") (? . 58) (? . 74) (c (u . "Yoneda") c (u . "coYoneda") c (u . "category theory") c (u . "compilers") c (u . "closure conversion") c (u . "math") c (u . "Author: Max New")) (u . "\n<p>The continuation-passing style transform (cps) and closure conversion (cc) are two techniques widely employed by compilers for functional languages, and have been studied extensively in the compiler correctness literature. Interestingly, <em>typed</em> versions of each can be proven to be equivalence preserving using polymorphic types and parametric reasoning, as shown by my advisor Amal Ahmed and Matthias Blume (<a href=\"http://www.ccs.neu.edu/home/amal/papers/epc.pdf\">cps</a>,<a href=\"http://www.ccs.neu.edu/home/amal/papers/tccpoe.pdf\">cc</a>).</p>\n\n<p>In fact, there is something like a duality between the two proofs, cps uses a universal type, closure-conversion uses an existential type and the isomorphism proofs use analogous reasoning. It turns out that both are instances of general theorems in category theory: the polymorphic cps isomorphism can be proven using the Yoneda lemma, and the polymorphic closure-conversion isomorphism can be proven using a less well known theorem often called the <a href=\"https://ncatlab.org/nlab/show/co-Yoneda+lemma\">*co*Yoneda lemma</a>.</p>\n\n<p>The connection between cps and the Yoneda embedding/lemma is detailed elsewhere in the <a href=\"http://www.cs.ox.ac.uk/people/daniel.james/iso/iso.pdf\">literature</a> and blogosphere (<a href=\"https://golem.ph.utexas.edu/category/2008/01/the_continuation_passing_trans.html\">ncafe</a>, <a href=\"https://bartoszmilewski.com/2015/09/01/the-Yoneda-lemma/\">Bartosz</a>), so I&rsquo;ll focus on closure conversion here. Also, I&rsquo;ll try to go into some detail in showing how the &ldquo;usual&rdquo; version of Yoneda/coYoneda (using the category of sets) relates to the appropriate version for compilers.</p>\n\n<p>I&rsquo;ll assume some background knowledge on closure conversion and parametricity below. Fortunately, Matt Might has a <a href=\"http://matt.might.net/articles/closure-conversion/\">nice blog post explaining untyped closure conversion</a>.</p>") #t (u . "\n<p>The continuation-passing style transform (cps) and closure conversion (cc) are two techniques widely employed by compilers for functional languages, and have been studied extensively in the compiler correctness literature. Interestingly, <em>typed</em> versions of each can be proven to be equivalence preserving using polymorphic types and parametric reasoning, as shown by my advisor Amal Ahmed and Matthias Blume (<a href=\"http://www.ccs.neu.edu/home/amal/papers/epc.pdf\">cps</a>,<a href=\"http://www.ccs.neu.edu/home/amal/papers/tccpoe.pdf\">cc</a>).</p>\n\n<p>In fact, there is something like a duality between the two proofs, cps uses a universal type, closure-conversion uses an existential type and the isomorphism proofs use analogous reasoning. It turns out that both are instances of general theorems in category theory: the polymorphic cps isomorphism can be proven using the Yoneda lemma, and the polymorphic closure-conversion isomorphism can be proven using a less well known theorem often called the <a href=\"https://ncatlab.org/nlab/show/co-Yoneda+lemma\">*co*Yoneda lemma</a>.</p>\n\n<p>The connection between cps and the Yoneda embedding/lemma is detailed elsewhere in the <a href=\"http://www.cs.ox.ac.uk/people/daniel.james/iso/iso.pdf\">literature</a> and blogosphere (<a href=\"https://golem.ph.utexas.edu/category/2008/01/the_continuation_passing_trans.html\">ncafe</a>, <a href=\"https://bartoszmilewski.com/2015/09/01/the-Yoneda-lemma/\">Bartosz</a>), so I&rsquo;ll focus on closure conversion here. Also, I&rsquo;ll try to go into some detail in showing how the &ldquo;usual&rdquo; version of Yoneda/coYoneda (using the category of sets) relates to the appropriate version for compilers.</p>\n\n<p>I&rsquo;ll assume some background knowledge on closure conversion and parametricity below. Fortunately, Matt Might has a <a href=\"http://matt.might.net/articles/closure-conversion/\">nice blog post explaining untyped closure conversion</a>.</p>\n<!-- more-->\n\n<p>\\(\n\\newcommand{\\Set}{\\mathsf{Set}}\n\\newcommand{\\Hom}{\\mathsf{Hom}}\n\\)</p>\n\n<h2 id=\"polymorphic-closure-conversion\">Polymorphic Closure Conversion</h2>\n\n<p>Closure conversion is a way of compiling a language with closures (i.e., basically any modern high-level language) to one that only has function pointers/labels like C or machine code. Closure conversion compiles high-level functions (aka closures) to a pair of an environment that will contain the values of all the functions&rsquo; free variables and a code pointer to a block that takes as inputs all the inputs to the function and values for all of the free variables.</p>\n\n<p>For instance</p>\n\n<pre><code>let x = 3 in λ y. x + y</code></pre>\n\n<p>would be converted to something like</p>\n\n<pre><code>let x = 3 in ([x: 3], λ env, y. let x = env.x in x + y)</code></pre>\n\n<p>Can we give a type to the resulting code? The source program has type <code>Number -&gt; Number</code>, but the target has a type more like</p>\n\n<pre><code>{ x: Number} × ({x : Number} × Number -&gt; Number).</code></pre>\n\n<p>In addition to being ugly, this type is leaking irrelevant details of the function&rsquo;s implementation: all of its free variables are there in its type, so two terms with the same function type but different free variables would be translated to different types. Also high-level program equivalences like \\(\\beta\\)-reducing the term to just <code>λ y. 3 + y</code> would not even preserve typing. Not only that, but some bad code could now supply a <em>different</em>, well-typed value for <code>x</code> than allowed which could break invariants the programmer had about the function.</p>\n\n<p>We could fix the type preservation issue by just using a dynamic type for our environment, but this would still leak details in the values. Fortunately, there is a nice solution to the other problems using existential types. The idea is that the type of the environment of free variables is <em>irrelevant</em> to anyone that calls the function, only the function itself should know what the environment looks like; the type of the environment should be <em>abstract</em> to the caller and <em>concrete</em> to the callee. Existential types capture this.</p>\n\n<p>We can translate functions in the source of type <code>A -&gt; B</code> to pairs of an environment and a code pointer, but now making the environment type existentially quantified:</p>\n\n<pre><code>∃ Γ. Γ × (Γ × A -&gt; B).</code></pre>\n\n<p>Then the syntax of existential types ensure that all any consumer can do with the <code>env : Γ</code> in the pair is pass it to the code pointer with an <code>A</code> argument.</p>\n\n<p>How do we prove that this is correct? And what does correct even mean? We&rsquo;ll focus on a property called <em>full abstraction</em> which says that if two programs are equal in the source language, then their translations are equal. Here, equal in the source language will just mean \\(\\beta,\\eta \\) equivalence, so things like as above:</p>\n\n<pre><code>let x = 3 in λ y. x + y\n≡\nλ y. 3 + y</code></pre>\n\n<p>To prove this we&rsquo;ll show that in a language with existential types the types <code>∃ Γ. Γ × (Γ × A -&gt; B)</code> and <code>A \\to B</code> are isomorphic. The usual proof is by parametricity, instead we&rsquo;ll use a closely related category-theoretic argument: the coYoneda lemma.</p>\n\n<h2 id=\"the-coyoneda-lemma\">The CoYoneda Lemma</h2>\n\n<p>The coYoneda lemma is a generalization of the equivalence described above. I&rsquo;ll start with the ordinary version which uses <em>coends</em> and <em>presheaves</em>.</p>\n\n<p>The coYoneda lemma says that for any category \\( C \\), presheaf \\( Q : C^{op} \\to \\Set \\), and object \\(A \\in C \\), \\(Q(A) \\) is isomorphic to the coend: \\[ \\exists B. (A \\to B) \\times Q(B) \\] Let&rsquo;s break that down.</p>\n\n<h3 id=\"coends\">Coends</h3>\n\n<p>A coend is a construction that is very similar to the parametric existential quantifier. If you&rsquo;re familiar with parametricity, a good intuition is that coends have the same definition as existential types but where the only relations are functional relations.</p>\n\n<p>You can take the coend of a functor of type \\(M : C^{op} \\times C \\to\n\\Set \\). We can get such an \\(M \\) from a type with a free type variable like \\( X \\times A \\to X \\) by splitting the \\(X \\) into positive and negative occurrences: \\(X^- \\times A \\to X^+ \\). Then the coend \\(\\exists X. M(X,X) \\in \\Set \\) is like the union of all \\(M(X,X) \\), but where the \\(X \\) is ensured to be &ldquo;irrelevant&rdquo;.</p>\n\n<p>So for any object \\(A \\in C \\) there is a map \\(pack_A : M(A,A) \\to\n\\exists X. M(X,X) \\), we can &ldquo;hide the A&rdquo;. To make sure the \\(X \\) is treated opaquely, we add an invariance condition that says if you have an \\(mA : M(A,A) \\) and an \\(mB :\nM(B,B) \\) such that the \\(A, B\\) positions are related by some function \\(f : A \\to B \\), then \\(pack_A(mA) = pack_B(mB)\\). More formally, this means that if you have a \\(m' : M(B,A) \\), then</p>\n\n<p>\\[ pack_B(M(B,f)(m')) = pack_A(M(f,A)(m'))\\] or in a point-free style: \\[ pack_B \\circ M(B,f) = pack_A \\circ M(f,A) : M(B,A) \\to \\exists X. M(X,X) \\]</p>\n\n<p>A function parameterized by types like \\(pack \\) that has this property is called a <em>co-wedge</em> from \\(M \\).</p>\n\n<p>A coend is an object \\(\\exists X. M(X,X) \\) and a co-wedge \\(\\forall\nA. pack_A : M(A,A) \\to \\exists X. M(X,X) \\) that are <em>universal</em>, i.e. any other co-wedge \\(\\forall A. f_A : M(A,A) \\to C\\) factors through \\(pack_A \\). This gives us the syntax for existential elimination.</p>\n\n<p>If you are familiar with parametricity, it is a good exercise to see why the usual condition for invariance wrt all <em>relations</em> implies that a parametric \\(pack, \\exists X. M(X,X) \\) will form a cowedge. It seems that in general it would not be a universal co-wedge because a parametric exists is invariant under all relations and there are many relations that don&rsquo;t act like functions.</p>\n\n<h3 id=\"presheaves\">Presheaves</h3>\n\n<p>Next, a presheaf is just a functor \\( Q : C^{op} \\to\n\\Set \\). Think of this as a set that is parameterised by a type of &ldquo;inputs&rdquo;, so if you have a map in \\(C, f : A \\to B\\) you get a function \\(Q(f) :\nQ(B) \\to Q(A) \\) that &ldquo;preprocesses&rdquo; the inputs using \\(f\n\\). Functoriality ensures that preprocessing with the identity is just the identity and that composition of preprocessers is the preprocessor from the composite function.</p>\n\n<p>So the informal explanation of the coYoneda lemma is that for any presheaf \\(Q \\), if we have an \\( \\exists X. (A \\to X) \\times Q(X)\n\\), then since we can&rsquo;t inspect the \\(X \\) in any way, all we can really do is compose the \\(Q(X) \\) with the preprocesser from the function \\(A \\to X \\), giving us a \\(Q(A) \\).</p>\n\n<h3 id=\"enriched-categories-and-enriched-coyoneda\">Enriched Categories and Enriched CoYoneda</h3>\n\n<p>But there&rsquo;s a gap from here to applying this to a programming language, the coYoneda lemma as presented says that \\(Q(A) \\) and \\(\\exists B. (A \\to B) \\times Q(B) \\) are isomorphic as <em>sets</em>, but we wanted an isomorphism of <em>types</em> in our programming language. We can reconcile this by considering <em>enriched</em> category theory and the <em>enriched</em> coYoneda lemma. Let \\(V \\) be a category, then if \\( V\n\\) is sufficiently like the category of sets, then we can do a lot of category theory by replacing the word &ldquo;set&rdquo; with &ldquo;object of \\(V \\)&rdquo;.</p>\n\n<p>Specifically, a \\(V \\)-enriched category (or just \\(V\\)-category) has a set of objects \\(Ob \\), but for each pair of objects \\(A,B\n\\in Ob \\) we get a \\( V\\)-object \\(\\Hom(A,B) \\) of morphisms from \\(A \\) to \\( B \\). If \\(V \\) is a closed category, we can see \\(V \\) <em>itself</em> as a \\(V\\)-enriched category with the same objects and just making \\(\\Hom(A,B) = A \\to B \\) i.e. the <em>internal</em> hom aka exponential.</p>\n\n<p>Then we can reinterpret the coYoneda lemma above by saying \\(C \\) is a \\(V\\)-category and \\(Q \\) is a \\(V\\)-presheaf i.e., just a contravariant functor from \\(V \\) to itself: \\(Q : V^{op} \\to V\\) where the preprocessing function is now a morphism in \\(C \\). Haskelletons just call this a <a href=\"https://hackage.haskell.org/package/contravariant-1.4/docs/Data-Functor-Contravariant.html\">contravariant functor</a>. Furthermore, since existential types provide at least as strong of a reasoning principle as coends, the proof of the coYoneda lemma goes through with existential types instead. Finally, the point-free description above for coend can be interpreted in any category.</p>\n\n<p>Now that we&rsquo;re working all inside our language, let&rsquo;s look at what the isomorphism looks like in Haskellish/Agdaish syntax. We want mutually inverse functions</p>\n\n<pre><code>f : (Contravariant Q) =&gt; (∃ Γ. (Δ -&gt; Γ) × (Q Γ)) -&gt; Q Δ\ng : (Contravariant Q) =&gt; Q Δ -&gt; ∃ Γ. (Δ -&gt; Γ) × (Q Γ)</code></pre>\n\n<p>If you try to implement them you won&rsquo;t be able to get it wrong, but here they are:</p>\n\n<pre><code>f (k, qΓ) = contramap k qΓ\ng qΔ = (id, qΔ)</code></pre>\n\n<p>where we just instantiate \\(\\Gamma = \\Delta \\) in the second case. You can prove \\( f \\circ g = id \\) using just \\(\\beta \\) and the Contravariant laws, but to prove \\(g \\circ f = id \\) you need to use the coend reasoning. For those of you that know about the Yoneda lemma, note the similarity to that proof in using the identity function and instantiating a type variable in a trivial way.</p>\n\n<h2 id=\"closure-version-as-coyoneda\">Closure Version as CoYoneda</h2>\n\n<p>Now it&rsquo;s time to bring it all together. Let \\(V \\) be our programming language viewed as a category in the usual way.</p>\n\n<p>We want to prove the closure conversion isomorphism:</p>\n\n<p>\\[ A \\to B \\cong \\exists \\Gamma. \\Gamma \\times (\\Gamma \\times A \\to B)\n\\]</p>\n\n<p>using the \\(V \\)-coYoneda lemma which says for any contravariant functor \\(Q : V^{op} \\to V \\), and object \\(\\Delta \\in V\\)</p>\n\n<p>\\[ Q(\\Delta) \\cong \\exists \\Gamma. (\\Delta \\to \\Gamma) \\times Q(\\Gamma)\n\\]</p>\n\n<p>Clearly based on the right hand side, \\(Q \\) should be \\( - \\times\nA \\to B \\) which gives us for any \\(\\Delta \\in V\\):</p>\n\n<p>\\[ \\Delta \\times A \\to B \\cong \\exists \\Gamma. (\\Delta \\to \\Gamma) \\times (\\Gamma \\times A \\to B)\n\\]</p>\n\n<p>Next we pick \\(\\Delta = 1\\), the unit type. Then we use some basic facts about the unit type: \\(1 \\times A \\cong\nA \\) and \\(1 \\to \\Gamma \\cong \\Gamma\\) (at least in a pure language) to get the desired result by composition:</p>\n\n<p>\\[ A \\to B \\cong 1 \\times A \\to B \\cong \\exists \\Gamma. (1 \\to\n\\Gamma) \\times (\\Gamma \\times A \\to B) \\cong \\exists \\Gamma. \\Gamma\n\\times (\\Gamma \\times A \\to B)\\]</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Since closure conversion is an instance of the CoYoneda lemma, this might be a nice example to give intuition for CoYoneda for programmers. While not as famous as its cousin Yoneda, CoYoneda is used in <a href=\"https://hackage.haskell.org/package/kan-extensions-5.0.2/docs/Data-Functor-Coyoneda.html\">Haskell</a> and is also central to the <a href=\"https://ncatlab.org/nlab/show/Day+convolution\">Day Convolution</a>, which can be used to give semantics to <a href=\"atkey-thesis\">separation logic</a>.</p>\n\n<p>Also in researching for this post, I was surprised at how little I could find on the relationship between ends/coends and relational parametricity. This seems very unfortunate as it looks like we&rsquo;re reproving some of the same theorems (Yoneda, coYoneda) using very similar, but incompatible formalisms.</p>\n\n<h2 id=\"you-might-also-like\">You might also like</h2>\n\n<ul>\n <li>\n  <p><a href=\"http://prl.ccs.neu.edu/blog/2017/06/05/syntactic-parametricity-strikes-again/\">Syntactic Parametricity Strikes Again</a></p></li>\n <li>\n  <p><a href=\"http://prl.ccs.neu.edu/blog/2017/05/01/categorical-semantics-for-dynamically-typed-programming-languages/\">Categorical Semantics for Dynamically Typed Programming  Languages</a></p></li>\n <li>\n  <p><a href=\"http://prl.ccs.neu.edu/blog/2016/11/16/understanding-constructive-galois-connections/\">Understanding Constructive Galois  Connections</a>.</p></li></ul>")) ((? . 80) f post (u . "Racket 6.9 and Windows 10 Creators Update") (? . 80) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/05/26/racket-6-9-and-windows-10-creators-update/index.html" . unix) (u . "/blog/2017/05/26/racket-6-9-and-windows-10-creators-update/") (u . "2017-05-26T17:00:28") (? . 50) (? . 81) (c (u . "racket") c (u . "windows") c (u . "bugs") c (u . "Author: Leif Andersen")) (u . "\n<p><a href=\"http://racket-lang.org/\">Racket</a> 6.9 was released in April and it has been smooth sailing for many people. However, some people using the <a href=\"https://blogs.windows.com/windowsexperience/2017/04/11/whats-new-in-the-windows-10-creators-update/\">Windows 10 Creators Update</a> have been experiencing <a href=\"https://github.com/racket/racket/issues/1671\">crashes</a>, not just for Racket, but for the whole operating system. This is due to a bug in Windows. We have contacted Microsoft; they have classified the bug as (1) a stack overflow and (2) not a security hazard, and intend to add a fix in a future version of Windows.</p>\n\n<p>The next version of Racket will include a patch to help avoid triggering the bug. Until then, one work-around is to run Racket in a virtual machine (VM). This blog post is a step-by-step guide on how to install a VM for Racket.</p>\n\n<p>A VirtualBox image with Racket preinstalled can be downloaded here:</p>\n\n<ul>\n <li><a href=\"https://github.com/nuprl/website/releases/download/racket69vm/Racket_6_9.ova\">https://github.com/nuprl/website/releases/download/racket69vm/Racket_6_9.ova</a></li></ul>\n\n<p>The username and password for this machine are both <code>racket</code>.</p>") #t (u . "\n<p><a href=\"http://racket-lang.org/\">Racket</a> 6.9 was released in April and it has been smooth sailing for many people. However, some people using the <a href=\"https://blogs.windows.com/windowsexperience/2017/04/11/whats-new-in-the-windows-10-creators-update/\">Windows 10 Creators Update</a> have been experiencing <a href=\"https://github.com/racket/racket/issues/1671\">crashes</a>, not just for Racket, but for the whole operating system. This is due to a bug in Windows. We have contacted Microsoft; they have classified the bug as (1) a stack overflow and (2) not a security hazard, and intend to add a fix in a future version of Windows.</p>\n\n<p>The next version of Racket will include a patch to help avoid triggering the bug. Until then, one work-around is to run Racket in a virtual machine (VM). This blog post is a step-by-step guide on how to install a VM for Racket.</p>\n\n<p>A VirtualBox image with Racket preinstalled can be downloaded here:</p>\n\n<ul>\n <li><a href=\"https://github.com/nuprl/website/releases/download/racket69vm/Racket_6_9.ova\">https://github.com/nuprl/website/releases/download/racket69vm/Racket_6_9.ova</a></li></ul>\n\n<p>The username and password for this machine are both <code>racket</code>.</p>\n<!-- more-->\n\n<ol>\n <li>\n  <p>The first thing you need to install is virtualization software. In principle it doesn&rsquo;t matter what you install, but for this tutorial, we will use <a href=\"https://www.virtualbox.org/\">VirtualBox</a>. Go to their <a href=\"https://www.virtualbox.org/wiki/Downloads\">downloads</a> page and download and install the version for your platform (most likely Windows).</p></li>\n <li>\n  <p>Once installed, you need to download a virtual image and install Racket on it. We have prepared an image that comes with Racket pre-installed, which <a href=\"https://github.com/nuprl/website/releases/download/racket69vm/Racket_6_9.ova\">you can download here</a>. The rest of this tutorial will assume you are using this image.</p></li>\n <li>\n  <p>Start up VirtualBox and import the virtual machine. You can do this by clicking on <code>File -&gt; Import Appliance</code>. In the dialog, select the image you downloaded and hit <code>Continue</code>. The next window lets you change the specs for your virtual machine. Feel free to make any changes you want, but the defaults work fine for this image. Once you are satisfied click <code>Import</code>.</p></li>\n <li>\n  <p>After import finishes, you should now see your new VM in the list on the left of the VirtualBox manager. Select it and hit <code>Start</code>. Once started up, you will see DrRacket and Firefox on the VM&rsquo;s desktop.</p></li></ol>")) ((? . 82) f post (u . "Tracing JITs for Dynamic Languages") (? . 82) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/03/15/tracing-jits-for-dynamic-languages/index.html" . unix) (u . "/blog/2017/03/15/tracing-jits-for-dynamic-languages/") (u . "2017-03-15T10:54:39") (? . 83) (? . 21) (c (u . "HOPL") c (u . "Author: Ming-Ho Yee")) (? . 5) #t (u . "<!-- more-->\n\n<p>Traditional JIT (just-in-time) compilers are method-based: they compile &ldquo;hot&rdquo; (i.e. frequently executed) methods to native code. An alternative is trace-based or tracing JITs, where the compilation unit is a (hot) sequence of instructions. Typically, such sequences of instructions correspond to loops, where programs spend most of their execution time.</p>\n\n<p>Where did the idea of tracing come from? What was appealing about it? How was tracing adapted for JITs and dynamic languages? What happened to Mozilla&rsquo;s TraceMonkey, which used to be part of Firefox? Do any JITs today use tracing?</p>\n\n<p>In this talk, I trace tracing JITs from their origins to some of their recent developments. I cover five papers: the original tracing paper, an implementation of a tracing JIT for Java, the TraceMonkey JIT for JavaScript, PyPy&rsquo;s &ldquo;meta-level&rdquo; tracing, and a specific class of optimizations for tracing JITs.</p>\n\n<p><em>(The idea of using the phrase &ldquo;trace tracing JITs&rdquo; is from Matthias Felleisen.)</em></p>\n\n<p>All materials can be found in the <a href=\"https://github.com/nuprl/hopl-s2017/tree/master/tracing-jit\">course repository</a>:</p>\n\n<ul>\n <li><a href=\"https://github.com/nuprl/hopl-s2017/blob/master/tracing-jit/notes.pdf\">Full notes</a></li>\n <li><a href=\"https://github.com/nuprl/hopl-s2017/blob/master/tracing-jit/annotated.txt\">Annotated bibliography</a></li></ul>\n\n<hr />\n\n<p><em>If you liked this post, you may also be interested in <a href=\"http://prl.ccs.neu.edu/blog/2019/01/28/on-stack-replacement/\">on-stack replacement</a>.</em></p>")) ((? . 71) f post (u . "Four Kinds of Scoping in R") (? . 71) 1731904015 (p+ #"/home/runner/work/website/website/blog/2019/09/10/four-kinds-of-scoping-in-r/index.html" . unix) (u . "/blog/2019/09/10/four-kinds-of-scoping-in-r/") (u . "2019-09-10T11:00:00") (? . 38) (? . 70) (c (u . "scope") c (u . "r") c (u . "Author: Ming-Ho Yee")) (u . "\n<p>In the <a href=\"/blog/2019/09/05/lexical-and-dynamic-scope/\">first</a> and <a href=\"/blog/2019/09/10/scoping-in-r/\">second</a> parts of this blog series, I defined lexical and dynamic scope, and demonstrated interesting cases of scoping in R.</p>\n\n<p>In this third and final part of my blog series, I&rsquo;d like to discuss a paper by the creators of R, where they motivate the need for lexical scoping in a statistical programming language.</p>\n\n<p>This is a &ldquo;bonus&rdquo; blog post, because I&rsquo;m going to dive into some of the hairier R features to show how four different kinds of scoping can be simulated in R.</p>") #t (u . "\n<p>In the <a href=\"/blog/2019/09/05/lexical-and-dynamic-scope/\">first</a> and <a href=\"/blog/2019/09/10/scoping-in-r/\">second</a> parts of this blog series, I defined lexical and dynamic scope, and demonstrated interesting cases of scoping in R.</p>\n\n<p>In this third and final part of my blog series, I&rsquo;d like to discuss a paper by the creators of R, where they motivate the need for lexical scoping in a statistical programming language.</p>\n\n<p>This is a &ldquo;bonus&rdquo; blog post, because I&rsquo;m going to dive into some of the hairier R features to show how four different kinds of scoping can be simulated in R.</p>\n<!-- more-->\n\n<h2 id=\"lexical-scope-and-statistical-computation\">Lexical scope and statistical computation</h2>\n\n<p>In <em>Lexical Scope and Statistical Computation</em>,<sup><a href=\"#2019-09-10-four-kinds-of-scoping-in-r-footnote-1-definition\" name=\"2019-09-10-four-kinds-of-scoping-in-r-footnote-1-return\">1</a></sup> Robert Gentleman and Ross Ihaka, the creators of R, discuss why they designed R with lexical scoping. The paper is written for a statistics audience, and they provide motivating examples for having lexical scoping in R.</p>\n\n<p>For the purpose of their discussion, they define four (slightly different) kinds of scoping rules:</p>\n\n<ul>\n <li><em>trivial</em>: no free variables allowed</li>\n <li><em>static</em>: a free variable takes its value from a set of global variables</li>\n <li><em>lexical</em>: a free variable takes the value of the binding that was in  effect when the function was defined</li>\n <li><em>dynamic</em>: a free variable takes the value of the most recent assignment to  that variable</li></ul>\n\n<p>Note that under this set of definitions, <em>static scoping</em> is a separate scoping rule and not another name for <em>lexical scoping</em>.</p>\n\n<p>It is possible to simulate each of strategies in R. For fun, we can even construct &ldquo;factories&rdquo; that take a function, and then modify it to use the desired scoping rule! (Jan Ječmen originally provided these examples to me, and I adapted them for this blog post after some feedback from Artem Pelenitsyn.)</p>\n\n<h3 id=\"template\">Template</h3>\n\n<p>Our examples will follow the template given below:</p>\n\n<div class=\"brush: r\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">factory</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">fun</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"o\">&lt;???&gt;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">0</span>\n<span class=\"n\">h</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">1</span>\n  <span class=\"nf\">factory</span><span class=\"p\">(</span><span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"n\">g</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">h</span><span class=\"p\">()</span>\n<span class=\"n\">f</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">2</span>\n  <span class=\"nf\">g</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">f</span><span class=\"p\">()</span> <span class=\"c1\"># error, 0, 1, or 2</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>We want to define a <code>factory</code> that takes a function literal and returns a closure that implements the desired scoping rule.</p>\n\n<p>Our example consists of three definitions of <code>x</code>. On line 5, we assign <code>0</code> to <code>x</code> at the top level. On line 7, we assign <code>1</code> to <code>x</code> inside function <code>h</code>, where we also create the closure. On line 12, we assign <code>2</code> to <code>x</code> inside the function <code>f</code> and right before we call <code>g</code>, which is the closure.</p>\n\n<p>Finally, we call <code>f</code> and observe the result:</p>\n\n<ul>\n <li>Under trivial scoping, no free variables are allowed, so <code>f()</code> should result  in an error.</li>\n <li>Under static scoping, free variables may only refer to global variables, so  <code>f()</code> should return <code>0</code>.</li>\n <li>Under lexical scoping, free variables refer to the variables in scope when  the function was defined, so <code>f()</code> should return <code>1</code>.</li>\n <li>Under dynamic scoping, free variables take the value from the most recent  assignment, so <code>f()</code> should return <code>2</code>.</li></ul>\n\n<p>We will implement the body of <code>factory</code> in only 3&ndash;5 lines of code. The rest of the code snippet, from lines 7 to the end, will remain the same, other than the call to <code>factory</code> on line 10.</p>\n\n<h3 id=\"trivial-scoping\">Trivial scoping</h3>\n\n<div class=\"brush: r\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">makeTrivial</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">fun</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">res</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">eval</span><span class=\"p\">(</span><span class=\"nf\">substitute</span><span class=\"p\">(</span><span class=\"n\">fun</span><span class=\"p\">))</span>\n  <span class=\"nf\">environment</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">baseenv</span><span class=\"p\">()</span>\n  <span class=\"n\">res</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">0</span>\n<span class=\"n\">h</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">1</span>\n  <span class=\"nf\">makeTrivial</span><span class=\"p\">(</span><span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"n\">g</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">h</span><span class=\"p\">()</span>\n<span class=\"n\">f</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">2</span>\n  <span class=\"nf\">g</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">f</span><span class=\"p\">()</span> <span class=\"c1\"># Error in f(0) : object &#39;x&#39; not found</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><code>substitute</code> returns the unevaluated parse tree for <code>fun</code>. In other words, it obtains the literal argument that was passed for <code>fun</code>. This works because of call-by-need semantics in R: function arguments are packaged up into <em>promises</em>. As a result, the syntax tree of arguments is available for metaprogramming. A recent paper by Goel and Vitek<sup><a href=\"#2019-09-10-four-kinds-of-scoping-in-r-footnote-2-definition\" name=\"2019-09-10-four-kinds-of-scoping-in-r-footnote-2-return\">2</a></sup> discusses laziness in R in more detail.</p>\n\n<p>In this example, on line 8, we call <code>factory</code> with <code>function(a) x+a</code> as the argument for the formal parameter <code>fun</code>. Then, we evaluate that parse tree with <code>eval</code>.</p>\n\n<p>At this point, <code>res</code> is the closure with expression <code>function(a) x+a</code> and a reference to the environment of <code>makeTrivial</code>. On line 3, we change that reference to <code>baseenv()</code>, which is the environment containing library definitions. Since this environment is above the (user) top-level environment, global variables are not available.</p>\n\n<p>Therefore, variable lookup in the function literal will only search the base environment, so <code>f()</code> results in an error.</p>\n\n<h3 id=\"static-scoping\">Static scoping</h3>\n\n<div class=\"brush: r\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">makeStatic</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">fun</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">res</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">eval</span><span class=\"p\">(</span><span class=\"nf\">substitute</span><span class=\"p\">(</span><span class=\"n\">fun</span><span class=\"p\">))</span>\n  <span class=\"nf\">environment</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">globalenv</span><span class=\"p\">()</span>\n  <span class=\"n\">res</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">0</span>\n<span class=\"n\">h</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">1</span>\n  <span class=\"nf\">makeStatic</span><span class=\"p\">(</span><span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"n\">g</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">h</span><span class=\"p\">()</span>\n<span class=\"n\">f</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">2</span>\n  <span class=\"nf\">g</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">f</span><span class=\"p\">()</span> <span class=\"c1\"># 0</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>For this example, on line 3, we update the environment of <code>res</code> to refer to <code>globalenv()</code>, which is the top-level environment where globals are defined.</p>\n\n<p>Therefore, variable lookup searches the top-level environment, so <code>f()</code> returns <code>0</code>.</p>\n\n<h3 id=\"lexical-scoping\">Lexical scoping</h3>\n\n<div class=\"brush: r\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">makeLexical</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">fun</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">res</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">eval</span><span class=\"p\">(</span><span class=\"nf\">substitute</span><span class=\"p\">(</span><span class=\"n\">fun</span><span class=\"p\">))</span>\n  <span class=\"nf\">environment</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">parent.frame</span><span class=\"p\">()</span>\n  <span class=\"n\">res</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">0</span>\n<span class=\"n\">h</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">1</span>\n  <span class=\"nf\">makeLexical</span><span class=\"p\">(</span><span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"n\">g</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">h</span><span class=\"p\">()</span>\n<span class=\"n\">f</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">2</span>\n  <span class=\"nf\">g</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">f</span><span class=\"p\">()</span> <span class=\"c1\"># 1</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Although lexical scoping is the default for R, our factory template requires some metaprogramming to work properly. We need to set the environment of <code>res</code> to <code>parent.frame()</code>, which is the environment of the function (<code>h</code>) that called the current function (<code>makeLexical</code>). This allows us to simulate lexical scoping, as if the function literal was evaluated inside <code>h</code>, rather than <code>makeLexical</code>.</p>\n\n<p>Therefore, variable lookup searches the environment of <code>h</code>, so <code>f()</code> returns <code>1</code>.</p>\n\n<h3 id=\"dynamic-scoping\">Dynamic scoping</h3>\n\n<div class=\"brush: r\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">makeDynamic</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">fun</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"kc\">...</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">res</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">eval</span><span class=\"p\">(</span><span class=\"nf\">substitute</span><span class=\"p\">(</span><span class=\"n\">fun</span><span class=\"p\">))</span>\n    <span class=\"nf\">environment</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">parent.frame</span><span class=\"p\">()</span>\n    <span class=\"nf\">res</span><span class=\"p\">(</span><span class=\"kc\">...</span><span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">0</span>\n<span class=\"n\">h</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">1</span>\n  <span class=\"nf\">makeDynamic</span><span class=\"p\">(</span><span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"n\">g</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">h</span><span class=\"p\">()</span>\n<span class=\"n\">f</span> <span class=\"o\">&lt;-</span> <span class=\"nf\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"m\">2</span>\n  <span class=\"nf\">g</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"nf\">f</span><span class=\"p\">()</span> <span class=\"c1\"># 2</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>For this example, we need another level of indirection. <code>makeDynamic</code> returns an anonymous function literal. The anonymous function takes <code>...</code>, which represents an arbitrary list of arguments, and then on line 5 we call <code>res</code> with those exact arguments. Note that we set the environment of <code>res</code> to be the environment of the <em>caller</em> of the anonymous function. Because of the multiple levels of indirection, the caller is <code>f</code>, on line 17.</p>\n\n<p>On line 12, <code>makeDynamic</code> returns a closure for the anonymous function. <code>h</code> returns that closure when it is called, and assigns it to <code>g</code>. When <code>g</code> is called on line 17, the function literal <code>function(a) x+a</code> is finally evaluated, and its environment is set to the environment of <code>f</code>, the caller of <code>g</code>.</p>\n\n<p>Therefore, variable lookup searches the environment of <code>f</code>, so <code>f()</code> returns <code>2</code>.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Hopefully this blog post has shown another way of looking at scoping definitions. As discussed in the <a href=\"/blog/2019/09/10/scoping-in-r/\">previous post</a>, it&rsquo;s very easy to get confused because different definitions are used by different people. Here, Gentleman and Ihaka very clearly state what definitions they are using.</p>\n\n<p>And finally, while I am far from an expert on metaprogramming in R, I hope this post has given a taste of what is possible.</p>\n\n<p><em>I would like to thank Jan Ječmen for coming up with and showing me the original versions of these code examples, and Artem Pelenitsyn for his feedback to improve and not discard these examples from an earlier blog draft.</em></p>\n\n<hr />\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n <ol>\n  <li id=\"2019-09-10-four-kinds-of-scoping-in-r-footnote-1-definition\" class=\"footnote-definition\">\n   <p>R. Gentleman and R. Ihaka. \"Lexical Scope and Statistical Computing, <em>Journal of Computational and Graphical Statistics</em>, vol. 9, no. 3, 2000. [<a href=\"https://doi.org/10.1080/10618600.2000.10474895\">DOI</a>][<a href=\"https://www.stat.auckland.ac.nz/~ihaka/downloads/lexical.pdf\">Available online</a>]&nbsp;<a href=\"#2019-09-10-four-kinds-of-scoping-in-r-footnote-1-return\">↩</a></p></li>\n  <li id=\"2019-09-10-four-kinds-of-scoping-in-r-footnote-2-definition\" class=\"footnote-definition\">\n   <p>A. Goel and J. Vitek. &ldquo;On the Design, Implementation and Use of Laziness in R,&rdquo; in <em>Proceedings of the ACM in Programming Languages (PACMPL)</em>, vol. 3, no. OOPSLA, 2019. To appear. [<a href=\"http://janvitek.org/pubs/oopsla19a.pdf\">Available online</a>]&nbsp;<a href=\"#2019-09-10-four-kinds-of-scoping-in-r-footnote-2-return\">↩</a></p></li></ol></div>")) ((? . 69) f post (u . "Gradual Typing Across the Spectrum") (? . 69) 1731904015 (p+ #"/home/runner/work/website/website/blog/2016/05/18/gradual-typing-across-the-spectrum/index.html" . unix) (u . "/blog/2016/05/18/gradual-typing-across-the-spectrum/") (u . "2016-05-18T07:58:56") (? . 40) (? . 68) (c (u . "gradual typing") c (u . "PI meeting") c (u . "Author: Asumu Takikawa")) (u . "\n<blockquote>\n <p>Instead of being Pythonistas, Rubyists, or Racketeers we have to be scientists. &mdash; Matthias Felleisen</p></blockquote>\n\n<p>Yesterday we hosted a PI meeting for the <a href=\"http://prl.ccs.neu.edu/gtp/\">Gradual Typing Across the Spectrum</a> NSF grant, gathering researchers from a number of institutions who work on gradual typing (the meeting program can be found <a href=\"http://prl.ccs.neu.edu/gtp/pi2016/pi2016.html\">here</a>). In case you aren&rsquo;t familiar with gradual typing, the idea is to augment dynamically typed languages (think Python or Ruby) with static type annotations (as documentation, for debugging, or for tool support) that are guaranteed to be sound.</p>\n\n<p>Gradual typing is these days a fairly popular area, but the research can seem fragmentary because of the need to support idiosyncratic language features. One of the points of the meeting was to encourage the cross-pollination of the key scientific ideas of gradual typing&mdash;the ideas that cross language and platform barriers.</p>") #t (u . "\n<blockquote>\n <p>Instead of being Pythonistas, Rubyists, or Racketeers we have to be scientists. &mdash; Matthias Felleisen</p></blockquote>\n\n<p>Yesterday we hosted a PI meeting for the <a href=\"http://prl.ccs.neu.edu/gtp/\">Gradual Typing Across the Spectrum</a> NSF grant, gathering researchers from a number of institutions who work on gradual typing (the meeting program can be found <a href=\"http://prl.ccs.neu.edu/gtp/pi2016/pi2016.html\">here</a>). In case you aren&rsquo;t familiar with gradual typing, the idea is to augment dynamically typed languages (think Python or Ruby) with static type annotations (as documentation, for debugging, or for tool support) that are guaranteed to be sound.</p>\n\n<p>Gradual typing is these days a fairly popular area, but the research can seem fragmentary because of the need to support idiosyncratic language features. One of the points of the meeting was to encourage the cross-pollination of the key scientific ideas of gradual typing&mdash;the ideas that cross language and platform barriers.</p>\n<!-- more-->\n\n<p>There were a good number of both institutions and programming languages represented at the meeting, with researchers from all of <a href=\"http://cs.brown.edu/research/plt/\">Brown University</a>, <a href=\"https://wonks.github.io/\">Indiana University</a>, <a href=\"http://prl.ccs.neu.edu/\">Northeastern University</a>, and the <a href=\"http://www.cs.umd.edu/projects/PL/\">University of Maryland</a>. The languages that we work on cover a broad subset of the dynamically-typed languages: Clojure, JavaScript, R, Racket, Ruby, Pyret, and Python.</p>\n\n<div class=\"figure\"><img src=\"/img/2016-day-slide-4.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>The specific research artifacts that were represented include <a href=\"https://github.com/mvitousek/reticulated\">Reticulated Python</a>, <a href=\"https://github.com/plum-umd/rdl\">RDL</a> (contracts for Ruby), <a href=\"http://plg.uwaterloo.ca/~dynjs/strongscript/\">StrongScript</a>, <a href=\"http://typedclojure.org/\">Typed Clojure</a>, and <a href=\"http://docs.racket-lang.org/ts-guide/index.html\">Typed Racket</a>.</p>\n\n<p>In this blog post, I&rsquo;ll summarize some of the key research themes that were brought up at the meeting. Since I can&rsquo;t go into too much detail about every topic, I will link to the relevant research papers and other resources.</p>\n\n<p>At a high level, the talks covered four major facets of gradual typing: expressiveness, performance, usability, and implementation techniques.</p>\n\n<h2 id=\"expressiveness\">Expressiveness</h2>\n\n<p>By expressiveness, I mean what kinds of language features a gradual type system supports and the richness of the reasoning that the type system provides. Since gradual typing is about augmenting existing dynamically-typed languages, a gradual type system should support the language features that programmers actually use.</p>\n\n<p>This is why recent implementations of gradual typing have focused on enabling object-oriented programming, since objects are widely used in nearly all dynamically-typed languages in use today. Unfortunately, since different languages have wildly different object systems, it&rsquo;s hard to compare research on gradual OO languages. Ben Chung is working to address this by coming up with a formal model that tries to unify various accounts of objects in order to better explain the design tradeoffs. His goal is to cover the core ideas in Reticulated Python, StrongScript, and Typed Racket.</p>\n\n<p>Of course, dynamically-typed languages have a lot more than OO features. Along these lines, I gave a talk on how at NU we&rsquo;re working to extend Typed Racket to cover everything from objects (my thesis topic), first-class modules (Dan Feltey&rsquo;s MS project), and higher-order contracts (Brian LaChance&rsquo;s MS project).</p>\n\n<p>On the other side, as programs get more complex, programmers may wish to write richer type specifications that provide even more guarantees. This makes gradual typing a wide spectrum that goes from completely untyped, fully typed, and then beyond to dependently typed. Andrew Kent and David Christiansen both presented work that takes gradual typing beyond ordinary typed reasoning with dependent types.</p>\n\n<p>Andrew presented an extension of Typed Racket that adds type refinements that can check rich properties (like vector bounds) that are found in real Racket code (see his RacketCon <a href=\"https://www.youtube.com/watch?v=ejFJIAsvdEg\">talk</a> and recent <a href=\"http://arxiv.org/pdf/1511.07033.pdf\">PLDI paper</a>). David Christiansen followed with a talk about adding dependent type theory to Typed Racket, which would allow correct-by-construction programming using a Nuprl-like proof system (he had a very cool GUI proof assistant demo in his slides!).</p>\n\n<h2 id=\"performance\">Performance</h2>\n\n<div class=\"figure\"><img src=\"/img/2016-day-slide-8.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>One of the key practical concerns about gradual typing is its performance overhead. It&rsquo;s a concern because in order to ensure type safety, a gradually-typed language implementation needs to install dynamic checks between the typed and untyped parts of a program. This catches any inconsistencies between the typed interfaces and how the untyped code may call into them.</p>\n\n<p>Ben Greenman gave an upbeat talk that set the stage for this topic, pointing out some key lessons that we&rsquo;ve learned about performance from building Typed Racket. The main idea he presented (also the topic of our <a href=\"http://www.ccs.neu.edu/racket/pubs/popl16-tfgnvf.pdf\">POPL 2016 paper</a>) is that to evaluate a gradual type system, you want to explore different ways of adding types to a program and see how much it costs. This evaluation effort started with Typed Racket, but he and Zeina Migeed are working on expanding it to Reticulated Python.</p>\n\n<p>From IU, Andre Kuhlenschmidt and Deyaaeldeen Almahallawi are exploring how ahead-of-time (AOT) compilation strategies could help reduce the cost of gradual typing. In particular, they are working on implementing <a href=\"https://github.com/deyaaeldeen/Schml\">Schml</a>: a compiler from the gradually-typed lambda calculus to C.</p>\n\n<p>In addition to AOT compilation, the folks at IU are exploring tracing JIT compilation as a means to make gradual typing faster. More specifically, Spenser Bauman talked about Pycket, an alternative implementation of Racket that uses RPython/PyPy to dramatically lower the overhead of gradual typing (also see the <a href=\"https://www.youtube.com/watch?v=GOfIY8NHAqg\">recording</a> of Spenser&rsquo;s talk on the topic at RacketCon and his <a href=\"http://homes.soic.indiana.edu/samth/pycket-draft.pdf\">ICFP paper</a>).</p>\n\n<h2 id=\"usability\">Usability</h2>\n\n<p>On the usability side, both Shriram Krishnamurthi and Ambrose Bonnaire-Sergeant made observations on what it takes to get gradual typing in the hands of real software developers.</p>\n\n<p>Shriram approached the topic from the angle of CS education, which is the focus of the <a href=\"http://www.pyret.org\">Pyret</a> language, and shared what the Brown language group is working on. While Pyret doesn&rsquo;t exactly fit the mold of gradual typing, it&rsquo;s a close cousin since it&rsquo;s a dynamically-typed language that explicitly takes design cues from the best parts of statically-typed languages. That approach lets CS beginners think in terms of types (the approach spearheaded by <a href=\"http://www.ccs.neu.edu/home/matthias/HtDP2e/index.html\">HtDP</a> and <a href=\"http://www.bootstrapworld.org/\">Bootstrap</a>) without having to battle a typechecker from the start.</p>\n\n<p>For professional software developers, a major concern with gradual typing is that writing type annotations may be a tedious and time intensive task. Ambrose, who is the creator of Typed Clojure, shared some preliminary work on how to cut down on the tedium by inferring gradual type annotations by instrumenting programs for a dynamic analysis. The hope is to be able to infer both recursive and polymorphic type annotations automatically from tests (you may also be interested in Ambrose&rsquo;s recent <a href=\"http://frenchy64.github.io/papers/esop16-short.pdf\">ESOP paper</a> on Typed Clojure).</p>\n\n<h2 id=\"implementation-techniques\">Implementation Techniques</h2>\n\n<p>Finally, several talks focused on alternative implementation techniques for gradual typing that provide a variety of software engineering benefits for implementers.</p>\n\n<p>From Maryland, Brianna Ren gave a talk on Hummingbird, a just-in-time typechecker for Ruby programs (also see the upcoming <a href=\"http://www.cs.umd.edu/~jfoster/papers/pldi16.pdf\">PLDI paper</a> by Brianna and Jeff Foster). The basic idea is that it&rsquo;s hard to implement a traditional static typechecker for a language that heavily relies on metaprogramming, in which the fields/methods of classes may be rewritten at run-time. This is particularly tricky for frameworks like Ruby on Rails. Instead of checking types at compile-time, Hummingbird actually executes the typechecker at run-time in order to be able to accurately check programs that use run-time metaprogramming. To reduce overheads, she uses a cache for typechecking that is invalidated when classes are modified.</p>\n\n<p>Stephen Chang gave a very different view on metaprogramming in his talk, which focused on <em>implementing</em> typecheckers using metaprogramming (the <a href=\"http://docs.racket-lang.org/trivial/index.html\">trivial</a> Typed Racket library is an offshoot of this work). His key idea is that typecheckers share many aspects with macro-based metaprogramming systems, such as the need to traverse syntax and annotate it with information. Since they share so much in common, why not just implement the typechecker as a macro? Stephen demonstrates that not only is this possible, but that it&rsquo;s possible to implement a wide variety of type system features this way including (local) type inference. The connection to gradual typing is that even a gradual type system can be implemented as a metaprogram by integrating the generation of dynamic checks into the macro transformation process.</p>\n\n<p>The last talk of the day (but certainly not the least), was by Michael Vitousek, who focused on the <em>transient</em> implementation of gradual typing (first described in his <a href=\"http://homes.soic.indiana.edu/mvitouse/papers/dls14.pdf\">DLS paper</a>). Traditionally, gradual type systems have implemented their dynamic checks using <a href=\"https://en.wikipedia.org/wiki/Proxy_pattern\">proxy</a> objects that wrap method implementations with both pre- and post-checks. Unfortunately, this implementation technique often conflicts with the underlying language. Since proxying changes the identity of an object it can interfere with object equality tests. Instead, the transient approach bakes the dynamic checks into and throughout the typed code to implement a &ldquo;defense in depth&rdquo; against inconsistencies with untyped code. The great thing about this implementation technique is that it doesn&rsquo;t demand any specialized support from the underlying language runtime and is therefore easy to port to other languages (like JavaScript).</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<div class=\"figure\"><img src=\"/img/2016-day-slide-3.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Hopefully this blog post helps provide a better picture of the state of gradual typing research. The exciting thing about gradual typing is that it contains both interesting theoretical problems and also connects to the practical needs of software developers.</p>")) ((? . 81) f post (u . "Syntactic parametricity strikes again") (? . 81) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/06/05/syntactic-parametricity-strikes-again/index.html" . unix) (u . "/blog/2017/06/05/syntactic-parametricity-strikes-again/") (u . "2017-06-05T14:27:44") (? . 80) (? . 48) (c (u . "Author: Gabriel Scherer") c (u . "Author: Li-Yao Xia")) (u . "\n<p>In this blog post, reporting on a collaboration with <a href=\"https://poisson.chat/\">Li-Yao Xia</a>, I will show an example of how some results that we traditionally think of as arising from free theorems / parametricity can be established in a purely &ldquo;syntactic&rdquo; way, by looking at the structure of canonical derivations. More precisely, I prove that \\(\n\\newcommand{\\List}[1]{\\mathsf{List}~#1}\n\\newcommand{\\Fin}[1]{\\mathsf{Fin}~#1}\n\\newcommand{\\Nat}[1]{\\mathbb{N}}\n\\newcommand{\\rule}[2]{\\frac{\\displaystyle \\array{#1}}{\\displaystyle #2}}\n\\newcommand{\\judge}[2]{{#1} \\vdash {#2}}\n\\newcommand{\\emptyrule}[1]{\\begin{array}{c}\\\\[-1em] #1 \\end{array}}\n  ∀α. \\List α → \\List \\alpha\n\\) is isomorphic to \\(\n    Π(n:\\Nat{}). \\List{(\\Fin{n})}\n\\) where \\(\\Fin{n}\\) is the type of integers smaller than \\(n\\), corresponding to the set \\(\\{0, 1, \\dots, n-1\\}\\).</p>") #t (u . "\n<p>In this blog post, reporting on a collaboration with <a href=\"https://poisson.chat/\">Li-Yao Xia</a>, I will show an example of how some results that we traditionally think of as arising from free theorems / parametricity can be established in a purely &ldquo;syntactic&rdquo; way, by looking at the structure of canonical derivations. More precisely, I prove that \\(\n\\newcommand{\\List}[1]{\\mathsf{List}~#1}\n\\newcommand{\\Fin}[1]{\\mathsf{Fin}~#1}\n\\newcommand{\\Nat}[1]{\\mathbb{N}}\n\\newcommand{\\rule}[2]{\\frac{\\displaystyle \\array{#1}}{\\displaystyle #2}}\n\\newcommand{\\judge}[2]{{#1} \\vdash {#2}}\n\\newcommand{\\emptyrule}[1]{\\begin{array}{c}\\\\[-1em] #1 \\end{array}}\n  ∀α. \\List α → \\List \\alpha\n\\) is isomorphic to \\(\n    Π(n:\\Nat{}). \\List{(\\Fin{n})}\n\\) where \\(\\Fin{n}\\) is the type of integers smaller than \\(n\\), corresponding to the set \\(\\{0, 1, \\dots, n-1\\}\\).</p>\n<!-- more-->\n\n<p>Context: Last week I had the pleasure of visiting UPenn, where I had many interesting discussions with various people. It was also an occasion to temporarily resume a discussion/collaboration I have with Li-Yao Xia, who is currently an intern there, and Jean-Philippe Bernardy, about testing polymorphic programs and its relation to canonical representations for System F.</p>\n\n<p>During one of our blackboard discussion, Li-Yao and I did a manual proof of a cool result: we proved a parametricity theorem for \\(∀α. \\List α → \\List α\\) using syntactic methods, namely proof search among canonical proofs. (This is an idea that I have been playing with since the last year of my <a href=\"http://www.ccs.neu.edu/home/gasche/phd_thesis/\">PhD thesis</a>, where I unsuccessfully tried to extend my work on canonical forms for the simply-typed lambda-calculus to polymorphism. It is here worked out on an specific example, but my end goal is to turn the manual reasoning into an algorithm.)</p>\n\n<p>You may wonder, first, why the isomorphism holds. The idea is that a polymorphic function of type \\(\\List α → \\List α\\) cannot inspect the elements of the input list; it can only use them in the resulting list, possibly duplicating, reordering or dropping some elements. On any input list of size \\(n\\), the behavior of the function can be described by a list of indices in \\([0; n-1]\\). For example, if the input \\([x, y, z]\\) (for some values of \\(x, y, z\\)) gives the output \\([y, y, x]\\), then this relation will hold on <em>any</em> value of \\(x, y, z\\), as the function cannot inspect their value or even test them for equality. The behavior of this function on lists of size 3 can be fully described by the list of indices \\([1, 1, 0]\\). Its whole behavior is then uniquely determined by one such list for each possible size:</p>\n\n<p>\\[\n    ∀α. \\List α → \\List α  \\quad≃\\quad  Π(n:\\Nat{}). \\List{(\\Fin n)}\n\\]</p>\n\n<p>The idea behind the &ldquo;syntactic&rdquo; (proof-theoretic?) proof method is the following: the set of closed values at a type \\(A\\) is isomorphic to the <em>search space</em> for canonical/normal derivations of \\(\\judge{}{A}\\). We have tools (in particular the notion of <em>invertible</em> inference rules) to reason on those – in this post I will only present the reasoning informally, but it can easily be made formally precise.</p>\n\n<p>We start by looking at the shape of the search space for</p>\n\n<p>\\[\n    \\judge{}{∀α. \\List α → \\List α}\n\\] or, said otherwise, of the judgment \\[\n    \\judge{}{\\List α → \\List α}\n\\]</p>\n\n<p>with a fresh/abstract type variable \\(α\\). (I will not be keeping opened type variables in context to avoid confusing them with hypotheses.)</p>\n\n<p>Any derivation of a function type, without loss of generality (w.l.o.g), is equivalent to a derivation starting with a function introduction. This is the η-expansion rule for functions: any proof term \\(e\\) is equivalent to \\(λx.~(e~x)\\), a proof that starts with a \\(λ\\). So any proof can be taken to start as follows: \\[\n\\rule{\n\\judge{\\List \\alpha}{\\List \\alpha}\n}{\n\\judge{}{\\List \\alpha \\to \\List \\alpha}\n}\n\\] we can, w.l.o.g, unfold the recursive type in the context (\\(\\List α = 1 + (α × \\List α)\\)): \\[\n\\rule{\n\\judge{1 + (α × \\List α)}{\\List α}\n}{\n\\rule{\n\\judge{\\List α}{\\List α}\n}{\n\\judge{}{\\List α → \\List α}\n}}\n\\]</p>\n\n<p>A derivation with a sum type as hypothesis can, w.l.o.g, be assumed to start by splitting on this pair (this is the η-expansion rule for sums): \\[\n\\rule{\n\\judge{1}{\\List α}\n\\quad\n\\judge{α × \\List α}{\\List α}\n}{\n\\rule{\n\\judge{1 + (α × \\List α)}{\\List α}\n}{\n\\rule{\n\\judge{\\List α}{\\List α}\n}{\n\\judge{}{\\List α → \\List α}\n}}}\n\\]</p>\n\n<p>In the right subgoal, we can always, w.l.o.g, split a hypothesis of product type: \\[\n\\rule{\n\\emptyrule{\\judge{1}{\\List α}}\n\\quad\n\\rule{\n\\judge{α, \\List α}{\\List α}\n}{\n\\judge{α × \\List α}{\\List α}\n}}{\n\\rule{\n\\judge{1 + (α × \\List α)}{\\List α}\n}{\n\\rule{\n\\judge{\\List α}{\\List α}\n}{\n\\judge{}{\\List α → \\List α}\n}}}\n\\]</p>\n\n<p>Now, an interesting pattern emerges. In the process of trying to prove \\(\\judge{\\List α}{\\List α}\\), we have to prove the (right) subgoal \\(\\judge{α,\\List α}{α}\\). We can generalize this derivation by assuming that we start with some number \\(n\\) of variables of type \\(α\\) in the context (we write \\(α^n\\) for this): \\[\n\\rule{\n\\rule{\n\\judge{\\alpha^n}{\\List \\alpha}\n}{\n\\judge{\\alpha^n, 1}{\\List \\alpha}\n}\n\\quad\n\\rule{\n\\judge{\\alpha^{n+1}, \\List \\alpha}{\\List \\alpha}\n}{\n\\judge{\\alpha^n, \\alpha \\times \\List \\alpha}{\\List \\alpha}\n}}{\n\\rule{\n\\judge{\\alpha^n, 1 + (\\alpha \\times \\List \\alpha)}{\\List \\alpha}\n}{\n\\judge{\\alpha^n, \\List \\alpha}{\\List \\alpha}\n}}\n\\]</p>\n\n<p>\\[\n\\newcommand{\\llbracket}{〚}\n\\newcommand{\\rrbracket}{〛}\n\\newcommand{\\sem}[1]{\\llbracket{} #1 \\rrbracket{}}\n\\]</p>\n\n<p>Let us write \\(\\sem{\\judge{\\alpha^n, \\List \\alpha}{\\List \\alpha}}\\) for the search space corresponding to all possible derivations of the judgment \\(\\judge{\\alpha^n, \\List \\alpha}{\\List \\alpha}\\). All the proof steps above have been done &ldquo;without loss of generality&rdquo; (in terms of focusing, we only used invertible rules), so they appear in any such derivation. Similarly, let us write \\(\\sem{\\judge{\\alpha^n}{\\List \\alpha}}\\) for the space of all possible derivations of \\(\\judge{\\alpha^n}{\\List \\alpha}\\), then above we have proven that \\[\n\\sem{\\judge{\\alpha^n, \\List \\alpha}{\\List \\alpha}}\n\\quad=\\quad\n\\sem{\\judge{\\alpha^n}{\\List \\alpha}}\n\\times\n\\sem{\\judge{\\alpha^{n+1}, \\List \\alpha}{\\List \\alpha}}\n\\]</p>\n\n<p>This equality can be unfolded at will \\[\n\\begin{align}\n&amp; \\sem{\\judge{\\alpha^n, \\List \\alpha}{\\List \\alpha}} \\\\\n= &amp; \\sem{\\judge{\\alpha^n}{\\List \\alpha}}\n    \\times\n    \\sem{\\judge{\\alpha^{n+1}, \\List \\alpha}{\\List \\alpha}} \\\\\n= &amp; \\sem{\\judge{\\alpha^n}{\\List \\alpha}}\n    \\times\n    \\sem{\\judge{\\alpha^{n+1}}{\\List \\alpha}}\n    \\times\n    \\sem{\\judge{\\alpha^{n+2}, \\List \\alpha}{\\List \\alpha}} \\\\\n= &amp; \\sem{\\judge{\\alpha^n}{\\List \\alpha}}\n    \\times\n    \\sem{\\judge{\\alpha^{n+1}}{\\List \\alpha}}\n    \\times\n    \\sem{\\judge{\\alpha^{n+2}}{\\List \\alpha}}\n    \\times\n    \\sem{\\judge{\\alpha^{n+3}, \\List \\alpha}{\\List \\alpha}} \\\\\n= &amp; \\dots \\\\\n\\end{align}\n\\]</p>\n\n<p>or written as an infinite product \\[\n    \\sem{\\judge{\\alpha^n, \\List \\alpha}{\\List \\alpha}}\n    \\quad=\\quad\n    \\prod_{k \\in \\Nat{}}{\\sem{\\judge{\\alpha^{n+k}}{\\List \\alpha}}}\n\\] and, in particular, \\[\n\\begin{align}\n&amp; \\sem{\\judge{}{\\List \\alpha \\to \\List \\alpha}} \\\\\n= &amp; \\sem{\\judge{\\alpha^0, \\List \\alpha}{\\List \\alpha}} \\\\\n= &amp; \\prod_{n \\in \\Nat{}}{\\sem{\\judge{\\alpha^n}{\\List \\alpha}}} \\\\\n\\end{align}\n\\]</p>\n\n<p>Now let&rsquo;s look at the structure of the derivations of \\(\\judge{\\alpha^n}{\\List \\alpha}\\). A proof of this judgment cannot start with a &ldquo;left rule&rdquo;, inspecting the value of one of the \\(n\\) variables of type \\(α\\), given that the structure of \\(α\\) is unknown/abstract. It must start by choosing to either build the empty list or a cons cell. We write this as follows (after unfolding the type):</p>\n\n<p>\\[\n\\rule{\n\\rule{\n\\judge{\\alpha^n}{1}\n\\quad\\oplus\\quad\n\\judge{\\alpha^n}{\\alpha \\times \\List \\alpha}\n}{\n\\judge{\\alpha^n}{1 + (\\alpha \\times \\List \\alpha)}\n}}{\n\\judge{\\alpha^n}{\\List \\alpha}\n}\n\\]</p>\n\n<p>The \\(\\oplus\\) notation between two judgments is non-standard; it means that they are not two requirements of the same proof, but two alternatives for possible proofs. All valid proofs fit that structure, and they either have a \\(\\judge{\\alpha^n}{1}\\) premise or a \\(\\judge{\\alpha^n}{\\alpha \\times \\List \\alpha}\\) premise. With this syntax, we are describing a set of possible derivations, rather than a single (partial) derivation.</p>\n\n<p>Proofs of \\(\\judge{\\Gamma}{1}\\) are trivial, and a proof of a product is always, w.l.o.g, a product of proofs (in intuitionistic logic / the λ-calculus they reuse the same context), so we can decompose further: \\[\n\\rule{\n\\rule{\n\\rule{\n}{\n\\judge{\\alpha^n}{1}\n}\n\\quad\\oplus\\quad\n\\rule\n{\n\\judge{\\alpha^n}{\\alpha}\n\\quad\n\\judge{\\alpha^n}{\\List \\alpha}\n}{\n\\judge{\\alpha^n}{\\alpha \\times \\List \\alpha}\n}\n}{\n\\judge{\\alpha^n}{1 + (\\alpha \\times \\List \\alpha)}\n}}{\n\\judge{\\alpha^n}{\\List \\alpha}\n}\n\\]</p>\n\n<p>There is exactly one possible proof of \\(\\judge{\\alpha^n}{1}\\), so its search space is \\(1\\), the unit set (with a single element). There are exactly \\(n\\) possible proofs of \\(\\judge{\\alpha^n}{\\alpha}\\), so the search space is just \\(n\\), seen as a set, or, in type-theoretic notation, \\(\\Fin{n}\\). We thus have the recursive equation: \\[\n\\sem{\\judge{\\alpha^n}{\\List \\alpha}}\n\\quad=\\quad\n1 + (\\Fin n \\times \\sem{\\judge{\\alpha^n}{\\List \\alpha}})\n\\]</p>\n\n<p>This type is either \\(1\\), or a \\(\\Fin{n}\\) and itself, recursively. This is exactly a list: \\[\n\\sem{\\judge{\\alpha^n}{\\List \\alpha}}\n\\quad=\\quad\n\\List{(\\Fin{n})}\n\\]</p>\n\n<p>so, plugging everything together: \\[\n\\begin{align}\n&amp; \\sem{\\forall \\alpha. \\List \\alpha \\to \\List \\alpha} \\\\\n= &amp; \\prod_{n \\in \\Nat{}}{\\sem{\\judge{\\alpha^n}{\\List \\alpha}}} \\\\\n= &amp; \\prod_{n \\in \\Nat{}}{\\List{(\\Fin{n})}} \\\\\n\\end{align}\n\\]</p>\n\n<h3 id=\"post-scriptum\">Post Scriptum</h3>\n\n<p>Some of reasoning steps above can be formulated in a way that is less clear but more familiar, as a sequence of type isomorphisms. For example, the first part on \\(\\sem{\\judge{\\alpha^n, \\List\n\\alpha}{\\List \\alpha}}\\) can written as:</p>\n\n<p>\\[\n\\begin{align}\n&amp;\n∀α. αⁿ × \\List α → \\List α\n\\\\ &amp;\n= \\text{(unfold List)}\n\\\\ &amp;\n    ∀α. αⁿ × (1 + α × \\List α) → \\List α\n\\\\ &amp;\n    = \\text{(distribute × over +)}\n\\\\ &amp;\n    ∀α. ((αⁿ × 1) + (αⁿ⁺¹ × \\List α)) → \\List α\n\\\\ &amp;\n    = \\text{(A × 1 ≃ A)}\n\\\\ &amp;\n    ∀α. (αⁿ + (αⁿ⁺¹ × \\List α)) → \\List α\n\\\\ &amp;\n    = \\text{(A+B) → C ≃ (A→C)×(B→C)}\n\\\\ &amp;\n    ∀α. (αⁿ → \\List α) × (αⁿ⁺¹ × \\List α → \\List α)\n\\\\ &amp;\n    = \\text{(distribute ∀α below product)}\n\\\\ &amp;\n    (∀α. αⁿ → \\List α) × (∀α. αⁿ⁺¹ × \\List α → \\List α)\n\\\\\n\\end{align}\n\\]</p>\n\n<p>Reading this equational sequence, it may look like we had to make the right choice at each step; but the proof-search perspective reveals that there were in fact no choices, as each time we apply invertible rules (&ldquo;w.l.o.g. rules&rdquo;).</p>\n\n<p>Furthermore, some parts cannot be derived in this style; in the latter part of the proof, the isomorphism between \\(∀\\alpha. \\alpha^n → \\alpha\\) and \\(\\Fin{n}\\), which is immediate from a proof search perspective, cannot be justified in this way. (In particular, \\(A×B → C\\) is <em>not</em> isomorphic to \\((A→C)+(B→C)\\).)</p>\n\n<h3 id=\"going-further\">Going further</h3>\n\n<ul>\n <li>\n  <p>It is an unfortunately-little-known obvious fact that many things we  associate to &ldquo;free theorems&rdquo; can be recovered by proof search. For  example, it is much simpler to prove that the only inhabitant of  \\(\\forall \\alpha. \\alpha \\to \\alpha\\) is the identity using proof  search than parametricity. I briefly discussed the idea in the  section 1.3 of my 2015 article, <a href=\"http://gallium.inria.fr/~scherer/research/unique_inhabitants/unique_stlc_sums-long.pdf\">Which simple types have a unique  inhabitant?</a>.</p></li>\n <li>\n  <p>If you are unfamiliar with proof search (or the LF community) and  curious about what I mean by &ldquo;canonical forms&rdquo; and why I think this  is an important idea, see my non-technical 2017 article <a href=\"http://www.ccs.neu.edu/home/gasche/research/canonical-forms/snapl.pdf\">Search for  Program  Structure</a>. The  problem of extending the notion of canonical forms to arbitrary  polymorphic types is briefly discussed in the section 14.5 of my  2016 <a href=\"http://www.ccs.neu.edu/home/gasche/phd_thesis/scherer-thesis.pdf\">phd  manuscript</a>.</p></li>\n <li>\n  <p>If you haven&rsquo;t heard of it yet, you would probably be interested in  the 2010 article <a href=\"http://publications.lib.chalmers.se/records/fulltext/local_99387.pdf\">Testing Polymorphic  Properties</a>  by Jean-Philippe Bernardy, Patrik Jansson and Koen Claessen. Li-Yao  has a 2016 implementation called  <a href=\"https://github.com/Lysxia/metamorph\">Metamorph</a> that got us talking  together. The problems of understanding canonical forms and testing  are quite related, but yet not exactly the same&hellip;</p></li></ul>\n\n<h3 id=\"you-might-also-like\">You might also like</h3>\n\n<ul>\n <li>\n  <p><a href=\"http://prl.ccs.neu.edu/blog/2017/05/01/categorical-semantics-for-dynamically-typed-programming-languages/\">Categorical Semantics for Dynamically Typed Programming  Languages</a></p></li>\n <li>\n  <p><a href=\"https://williamjbowman.com/blog/2017/01/03/toward-type-preserving-compilation-of-coq-at-popl17-src/\">Toward Type-Preserving Compilation of Coq, at POPL17 SRC</a></p></li>\n <li>\n  <p><a href=\"http://prl.ccs.neu.edu/blog/2016/11/16/understanding-constructive-galois-connections/\">Understanding Constructive Galois  Connections</a>.</p></li></ul>")) ((? . 77) f post (u . "The Behavior of Gradual Types: A User Study") (? . 77) 1731904015 (p+ #"/home/runner/work/website/website/blog/2018/12/11/the-behavior-of-gradual-types-a-user-study/index.html" . unix) (u . "/blog/2018/12/11/the-behavior-of-gradual-types-a-user-study/") (u . "2018-12-11T19:50:33") (? . 63) (? . 76) (c (u . "migratory typing") c (u . "gradual typing") c (u . "extended abstract") c (u . "Author: Ben Greenman")) (? . 5) #t (u . "<!-- more-->\n\n<blockquote>\n <p>Note: this post is an extended abstract for the paper <em>The Behavior of Gradual Types: A User Study</em> by Preston Tunnell&mdash;Wilson, Ben Greenman, Justin Pombrio, and Shriram Krishnamurthi. For the full paper, datasets, and slides, <a href=\"http://www.ccs.neu.edu/home/types/publications/publications.html#tgpk-dls-2018\">click here</a>.</p></blockquote>\n\n<p>The long-term goal of gradual typing is to build languages that offer the  &ldquo;best&rdquo; of both static and dynamic typing. Researchers disagree, however, on what the semantics of a mixed-typed language  should be; there are <a href=\"/blog/2018/10/06/a-spectrum-of-type-soundness-and-performance/\">at least three competing proposals</a>  for combining a dynamically-typed language with a similar statically-typed language.</p>\n\n<blockquote>\n <p>It&rsquo;s an interesting situation. There are dozens of papers on the semantics of gradual types&mdash;and <a href=\"http://www.ccs.neu.edu/home/types/resources/talks/tgpk-dls-2018.pdf\">many claim</a> to have developers in mind&mdash;but zero papers that ask developers what they think.</p></blockquote>\n\n<p>To help inform the discussion, we recently designed a <a href=\"http://cs.brown.edu/research/plt/dl/dls2018\">survey</a>  to see what programmers think of three mixed-typed semantics. The survey is based on 8 example programs; we selected these 8 programs because the set as a whole tells the three mixed-typed semantics apart. For each program, the survey presents a few possible outcomes of running the  program and asks participants for their opinion on each outcome.</p>\n\n<p>The image below shows one program from the survey:</p>\n\n<p> <img src=\"/img/gtsurvey-example-program.png\" alt=\"Figure 1: example program\" /></p>\n\n<p>This program creates an array, passes it between typed and untyped variables,  and performs write &amp; read operations. What should happen when we run this program? One option is to ignore the type annotations and return the second element  of the array (<code>\"bye\"</code>). A second option is to reject the write operation (on line 4) because it attempts  to write a number to a variable of type <code>Array(String)</code>. A third option is to reject the assignment after the read operation (on line 5)  because it attempts to assign a string to a variable of type <code>Number</code>. These are the three behaviors in the survey:</p>\n\n<p> <img src=\"/img/gtsurvey-example-behaviors.png\" alt=\"Figure 2: behaviors for the example question\" /></p>\n\n<blockquote>\n <p>A fourth option is to reject the assignment of an <code>Array(String)</code> to a variable of type <code>Array(Number)</code>. A few participants left comments asking for this behavior. See the <a href=\"http://cs.brown.edu/research/plt/dl/dls2018\">anonymized responses</a> for their comments, and see <a href=\"http://cs.brown.edu/~sk/Publications/Papers/Published/tgpk-beh-grad-types-user-study\">the paper</a> for why we left that behavior out.</p></blockquote>\n\n<p>For each behavior, we asked for respondents&rsquo; preference along two independent dimensions:</p>\n\n<ul>\n <li>Do you <em>like</em> or <em>dislike</em> this behavior?</li>\n <li>Does it match your <em>expectation</em> as a programmer?</li></ul>\n\n<p>Combined, the dimensions lead to four possible <em>attitudes</em>: Like and Expected,  Like and Unexpected, Dislike and Expected, Dislike and Unexpected. The full example question, with attitudes and space for comments, is below.</p>\n\n<p> <img src=\"/img/gtsurvey-example-question.png\" alt=\"Figure 3: complete question\" /></p>\n\n<p>We administered the survey to three populations &mdash; software engineers,  students, and Mechanical Turk workers &mdash; and thereby collected three sets of  attitudes for each question. The results for the running example are below:</p>\n\n<p> <img src=\"/img/gtsurvey-example-data.png\" alt=\"Figure 4: results for Question 7\" /></p>\n\n<p>The figure is a matrix of three columns (one for each population)  and three rows (one for each behavior). Each cell of the matrix contains a bar chart showing the attitudes  that we collected.</p>\n\n<blockquote>\n <p>Unlike the survey question, the behaviors in the results are labeled as <strong>Deep</strong>, <strong>Erasure</strong>, and <strong>Shallow</strong>. These names describe the three mixed-typed semantics.</p></blockquote>\n\n<p>For this question, the software engineers (left column, green bars)  mostly picked the &ldquo;Dislike and Unexpected&rdquo; attitude for every behavior. The students (mid column, blue bars) also show consensus on &ldquo;Dislike and  Unexpected&rdquo; for the <strong>Deep</strong> and <strong>Erasure</strong> behaviors; however, they are split  for the <strong>Shallow</strong> behavior. The Mechanical Turk workers are divided on every behavior.</p>\n\n<p>See <a href=\"http://cs.brown.edu/~sk/Publications/Papers/Published/tgpk-beh-grad-types-user-study\">the paper</a> for the other questions and responses.</p>\n\n<p>Overall, our main finding is that respondents preferred behaviors that enforced  full types and reported runtime mismatches as early as possible. The takeaway is thus:</p>\n\n<p style=\"margin-left: 40px; margin-right: 40px\">if you are designing a mixed-typed language and choose <strong>not</strong> to enforce full types, then make sure to explain this behavior to users!</p>\n\n<p>Put lots of example programs in the language&rsquo;s documentation. The programs in the survey can be adapted to explain how your chosen  behavior differs from alternatives.</p>\n\n<h2 id=\"questions\">Questions</h2>\n\n<p>Here are some good questions we&rsquo;ve gotten that are not clearly answered in the paper.</p>\n\n<h4 id=\"q-did-any-respondents-expect-more-than-one-behavior\">Q. Did any respondents &ldquo;expect&rdquo; more than one behavior?</h4>\n\n<p>Yes, 59% <!-- 20/34--> of the software engineers and 82% <!-- 14/17--> of the students selected &ldquo;Liked and Expected&rdquo; and/or &ldquo;Dislike and Expected&rdquo; for different behaviors on the same program.</p>\n<!-- They probably interpreted \"Expected\" as-->\n<!--  \"the program does something that makes sense\", rather than-->\n<!--  \"the program does the one thing that I believe it should do\".-->\n<!-- ids for \"double-expect\" S.Es : R_24bz47lgcAOkCux R_2R4dZ1l0t3yx6fW R_b7yMVe7VtmmsrHb R_31MXSUfCyDE8FdG R_6LGXyOirYNtYWd3 R_2qyMZBAs74PrsSz R_2ASFRBh2jfuRgP1 R_1PUc0AUEzdXKGt8 R_2dL60N9oPIkbvWY R_1BXXqYyxH7R4r9l R_1ON2sxGalcODyAd R_1oyZasBudU5gKPS R_1FIHgkQbWGaxuHd R_b1s2YMBWCrCRvxf R_29t0zWxkQsfb9FT R_2fevZOrFGzS6JLf R_8Dn6NMjDyigT59n R_2pRG370z3cBUaKv R_2qDXTFI53ntWMu4 R_ZI8AwATueqyWwOR-->\n<!-- ids for \"double-expect\" students : R_9B6WHWEX5l0DskN R_22VAu37cGWQPQx1 R_3hgYSaGy2tbyY3G R_3rTbAqgn1rhQK4d R_r3HqAP1yGRXHaZX R_1l05qvQ1sYOCcCF R_3qaMT9xR7CRYg2Y R_1Li0sGHkxk1VfcA R_24ITtgvBzg9RpE3 R_3HzshHbDWkayp4t R_5mtEFLtSX0iPVOp R_1IR6vdpmVw4OCqV R_2XpWlkKjH9LQqln R_DoQrROe0dcb1YJz-->\n\n<h4 id=\"q-did-the-respondents-have-a-prior-preference-for-static-or-dynamic-typing\">Q. Did the respondents have a prior preference for static or dynamic typing?</h4>\n\n<p>Near the end of the survey we asked: &ldquo;Which do you prefer, typed or untyped programming?&rdquo;. See table 2 of <a href=\"http://cs.brown.edu/~sk/Publications/Papers/Published/tgpk-beh-grad-types-user-study\">the paper</a> for coded responses to this question,  or the <a href=\"http://cs.brown.edu/research/plt/dl/dls2018\">anonymized responses</a> for the ground truth. Most preferred typed programming.</p>")) ((? . 66) f post (u . "Trees, 1973") (? . 66) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/07/19/trees-1973/index.html" . unix) (u . "/blog/2017/07/19/trees-1973/") (u . "2017-07-19T21:48:56") (? . 9) (? . 65) (c (u . "history") c (u . "Author: Ben Greenman")) (u . "\n<p>From the PRL archives:</p>\n\n<blockquote>\n <p>I think that I shall never see a matrix lovely as a tree. &mdash; <a href=\"/img/gls-trees-poem-1979.pdf\"><em>Trees</em></a>, by Guy L. Steele Jr., MIT, 1973</p></blockquote>") #t (u . "\n<p>From the PRL archives:</p>\n\n<blockquote>\n <p>I think that I shall never see a matrix lovely as a tree. &mdash; <a href=\"/img/gls-trees-poem-1979.pdf\"><em>Trees</em></a>, by Guy L. Steele Jr., MIT, 1973</p></blockquote>\n<!-- more-->\n\n<hr />\n\n<p>You might recognize the opening line from Joyce Kilmer&rsquo;s 1914 poem <a href=\"https://en.wikipedia.org/wiki/Trees_(poem)\"><em>Trees</em></a>, or from Radia Perlman&rsquo;s <a href=\"/img/p-sigcomm-1985.pdf\"><em>Algorhyme</em></a> (published 1985).</p>\n\n<p>The poem is online in <a href=\"http://mercury.lcs.mit.edu/~jnc/humour/lisp.tree\">at least one other place</a>, but the copy linked above (from <a href=\"https://archive.org/details/byte-magazine\">BYTE magazine</a>) comes with a footnote on <em>How this poem came to be printed</em>.</p>")) ((? . 35) f post (u . "Disappearing Code") (? . 35) 1731904015 (p+ #"/home/runner/work/website/website/blog/2018/11/24/disappearing-code/index.html" . unix) (u . "/blog/2018/11/24/disappearing-code/") (u . "2018-11-24T09:52:58") (? . 34) (? . 33) (c (u . "dear diary") c (u . "Author: Ben Greenman")) (u . "\n<p>Two experiences at <a href=\"https://2018.splashcon.org/home\">SPLASH 2018</a> reminded me that software gets thrown away and replaced.</p>") #t (u . "\n<p>Two experiences at <a href=\"https://2018.splashcon.org/home\">SPLASH 2018</a> reminded me that software gets thrown away and replaced.</p>\n<!-- more-->\n\n<h3 id=\"story-1\">Story 1</h3>\n\n<p>The first reminder came near the end of a <a href=\"https://conf.researchr.org/event/sle-2018/papers-a-new-approach-for-software-correctness-and-reliability\">talk</a> by  <a href=\"https://people.csail.mit.edu/rinard/\">Martin Rinard</a>. Once upon a time, Martin was working as a consultant and a firm asked him to  review a software package. (The firm wanted a second opinion about how the software computed its results.) The firm sent a zipfile; Martin found six versions of the code inside; the  firm said &ldquo;well, please check all six versions&rdquo;; and it turned out:</p>\n\n<ul>\n <li><strong>Version 1</strong> : the source code was written in a domain-specific language  (DSL) that generated code for the application</li>\n <li><strong>Version 2</strong> : the DSL source was the same as version 1, but the generated  code was slightly modified</li>\n <li>&hellip;</li>\n <li><strong>Version 6</strong> : the generated code was the source code and the DSL was gone</li></ul>\n\n<p>The moral of Martin&rsquo;s story was:   (1) the creators of a software system are often different from the maintainers,  and (2) researchers need to build tools to help these maintainers.</p>\n\n<h3 id=\"story-2\">Story 2</h3>\n\n<p>The second reminder came from a teaching assistant who said the  <a href=\"https://www.cs.cornell.edu/courses/cs3110/2018fa/\">functional programming course</a>  at their institution was currently using a Python script  to test students&rsquo; code. Once upon a time, I was a teaching assistant for the  <a href=\"https://www.cs.cornell.edu/courses/cs3110/2014sp/\">same course</a> at the same  institution. We had trouble testing students&rsquo; code via the Python script  left by the pre&ndash;2013 course staff, so I wrote a  <a href=\"https://gitlab.com/bengreenman/ocaml_tools/\">command-line tool</a> to handle the tests and other  compile/run/grade tasks. To keep history from repeating itself, I used the same language the course  teaches (OCaml) and wrote some documentation &mdash; but it seems like that was  not enough. At any rate, writing the tool was a good exercise.</p>\n\n<blockquote>\n <p><em>In the end, everybody must understand for himself.</em> &mdash; <a href=\"https://dl.acm.org/citation.cfm?id=3731\">Per Martin-Löf</a></p></blockquote>\n\n<h3 id=\"reflection\">Reflection</h3>\n\n<p>In each story, the maintainers of a software system threw away some old  code to make their job easier in the short term. How can we stop this &ldquo;re-inventing the wheel&rdquo; from happening?</p>\n\n<p>Martin Rinard&rsquo;s solution is to let maintenance programmers keep their current  habits, but provide tools to make the short-term, pragmatic solutions into a  more robust systems. Search for \"<a href=\"https://people.csail.mit.edu/rinard/paper/osdi04.pdf\">failure-oblivious computing</a>\"  to learn more (this was the topic of his <a href=\"https://conf.researchr.org/event/sle-2018/papers-a-new-approach-for-software-correctness-and-reliability\">talk</a>).</p>\n\n<p>In Story 1, the maintainers were able to avoid the DSL by modifying an  inherited blob of DSL-generated code. If the DSL did not generate code, history might have taken a different course;  it might be best to start with a language that offers tools for linguistic  re-use, and to build a DSL from these tools &mdash; so there is no generated code. The Racket programming language is exploring this path. For a recent example, see the <a href=\"https://www2.ccs.neu.edu/racket/pubs/icfp17-acf.pdf\">video-lang paper</a>.</p>\n\n<p>The Story 2 test harness, however, was not generating code. Its maintainers discarded a &ldquo;big&rdquo; program written in a typed  functional language in favor of a script. Perhaps we need a language that allows mixing statically-typed and  dynamically-typed code (shouts out to  <a href=\"https://www2.ccs.neu.edu/racket/pubs/icfp18-gf.pdf\">my own research</a>).</p>\n\n<p>The best solution is probably to start with a team and keep the culture alive. Always pair program!</p>\n\n<hr />\n\n<h4 id=\"addendum-comment-from-mitch-wand\">Addendum: comment from Mitch Wand</h4>\n\n<blockquote>\n <p>The best solution is probably to start with a team and keep the culture alive. Always pair program!</p></blockquote>\n\n<p>Ermm, this works better for sourdough bread than for people.</p>\n\n<p>Even in the not-so-real world of checking student solutions, there&rsquo;s often no way of guaranteeing that one half of a pair will be around for the second round. They may be on co-op. Or the course will not be offered the next semster/year/etc. Or the course will change at the next offering (from OCaml to Python or from Racket to Java) so that large chunks of the infrastructure will have to be discarded or rewritten.</p>\n\n<p>The &ldquo;real&rdquo; solution is to write literate code (as we preached incessantly in PDP), so that the next reader will have at least some clue as about what you wrote. This just may be sufficient incentive to modify rather than rebuild from scratch.</p>\n\n<p>Ever the optimist, &mdash;Mitch</p>")) ((? . 47) f post (u . "NEPLS on October 7th at Northeastern University") (? . 47) 1731904015 (p+ #"/home/runner/work/website/website/blog/2016/09/15/nepls-on-october-7th-at-northeastern-university/index.html" . unix) (u . "/blog/2016/09/15/nepls-on-october-7th-at-northeastern-university/") (u . "2016-09-15T21:18:45") (? . 46) (? . 7) (c (u . "NEPLS") c (u . "conference") c (u . "Author: Ben Greenman")) (u . "\n<p>The next edition of the New England Programming Language Seminar (NEPLS) will be held on Friday, October 7th at Northeastern University. Organizers are Gabriel Scherer and Max New. See you there!</p>") #t (u . "\n<p>The next edition of the New England Programming Language Seminar (NEPLS) will be held on Friday, October 7th at Northeastern University. Organizers are Gabriel Scherer and Max New. See you there!</p>\n<!-- more-->\n\n<p>Here is the official announcement from the NEPLS mailing list.</p>\n\n<blockquote>\n <p>Hi everyone,</p>\n <p>The next New England Programming Languages and Systems Symposium will take place on</p>\n <blockquote>\n  <p> Friday, October 7th 2016</p></blockquote>\n <p>at</p>\n <blockquote>\n  <p> Northeastern University, Boston.</p></blockquote>\n <p>Please mark it in your calendars!</p>\n <p>The speaker selection committee solicits talks for this meeting. To propose yourself or someone else, send a title, list of authors, and a brief description. You may provide UP TO ONE PAGE of description, but you can keep it as short as a paragraph. We particularly invite talks by researchers from outside the area who are visiting on the date of the NEPLS meeting.</p>\n <p>Talks can vary in length. Though 30-minute conference-style slots are traditional, speakers may request slots of as little as 5 minutes; we encourage the shorter formats. This variety permits the presentation of smaller results, preliminary work, progress reports on ongoing projects (such as language standards and compiler toolkits), and updates to past presentations. In general, NEPLS talks need not sound like conference presentations.</p>\n <p>The submission deadline is</p>\n <blockquote>\n  <p> Sunday, September 25th.</p></blockquote>\n <p>Acceptance notifications will be out on Thursday, September 28th.</p>\n <p>Send your proposal to</p>\n <blockquote>\n  <p> <a href=\"mailto:nepls-talks-committee@lists.cs.brown.edu\">nepls-talks-committee@lists.cs.brown.edu</a></p></blockquote>\n <p>More details about NEPLS are available on the NEPLS webpage:</p>\n <blockquote>\n  <p> <a href=\"http://www.nepls.org/\">http://www.nepls.org/</a></p></blockquote></blockquote>\n\n<p>To subscribe to the NEPLS mailing list, visit this page:</p>\n\n<p><a href=\"https://lists.cs.brown.edu/sympa/subscribe/nepls\">https://lists.cs.brown.edu/sympa/subscribe/nepls</a></p>")) ((? . 84) f post (u . "Refinement Types") (? . 84) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/04/20/refinement-types/index.html" . unix) (u . "/blog/2017/04/20/refinement-types/") (u . "2017-04-20T23:38:23") (? . 85) (? . 86) (c (u . "HOPL") c (u . "Author: Kevin Clancy")) (? . 5) #t (u . "<!-- more-->\n\n<p>Roughly, a refinement type system is an extra layer of precision, enforced through subtyping, added onto an existing type system. A base type is decomposed into a set of <em>base refinements</em>, each of which denotes a subset of the values belonging to the base type. A subtyping relation respecting set inclusion can then be defined among the refinements of the base type. These subtyping relations can be lifted onto a subtyping relation for compound types using a standard arrow subtyping rule.</p>\n\n<p>Extra type-checking precision sounds great, but what in practical terms does this precision look like? Freeman and Pfenning&rsquo;s &rsquo;92 paper <em>Refinement Types for ML</em> proposes extending ML&rsquo;s type definition language with constructs for decomposing a discriminated union type into a lattice of subtypes. For example, it allows the decomposition of a list type into a lattice including base refinements for empty lists, non-empty lists, and singletons. Those with experience in functional programming will realize this alleviates the dreaded and inescapable “non-exhaustive pattern match” warning, which tends to crop up in situations where the programmer understands that an exhaustive pattern match is not necessary.</p>\n\n<p>In the late 90&rsquo;s Xi and Pfenning advanced the state of refinement types by introducing a dependent refinement type system, implemented as a tool called Dependent ML. Their approach identifies a base refinement using a tuple of terms drawn from some computationally tractable constraint language called an <em>index language</em>. A list datatype can then be refined with a term of the <em>linear integer arithmetic</em> index language, denoting the subset of all lists having a specific length. One list refinement is then considered a subtype of another when a constraint solver can prove their index terms equal. Vazou et. al.&rsquo;s recent project Liquid Haskell is another dependent refinement type system which decides subtyping among base types by invoking an SMT solver under a context-dependent set of constraints. It differs significantly from Dependent ML in that it refines base types with certain well-behaved program terms rather than indices.</p>\n\n<hr />\n\n<p>Resources:</p>\n\n<ul>\n <li><a href=\"/blog/static/refinement_types_lecture.pdf\">Full Notes</a></li>\n <li><a href=\"/blog/static/refinement_types_bib.pdf\">Annotated Bibliography</a></li>\n <li><a href=\"https://github.com/nuprl/hopl-s2017/tree/master/refinement-types\">GitHub</a></li></ul>")) ((? . 83) f post (u . "Type Inference in Stack-Based Programming Languages") (? . 83) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/03/10/type-inference-in-stack-based-programming-languages/index.html" . unix) (u . "/blog/2017/03/10/type-inference-in-stack-based-programming-languages/") (u . "2017-03-10T16:23:30") (? . 2) (? . 82) (c (u . "HOPL") c (u . "Author: Rob Kleffner")) (? . 5) #t (u . "<!-- more-->\n\n<p>Stack-based languages occupy a niche in today&rsquo;s programming language environment. The predominant stack-based language in use by programmers is Forth, and is found mostly on embedded devices. These languages also find use as compile targets for more popular languages: the CIL and JVM are both stack-based. Less popular but highly interesting languages to mention include <a href=\"http://www.kevinalbrecht.com/code/joy-mirror/joy.html\">Joy</a> and <a href=\"http://factorcode.org/\">Factor</a>, known for their emphasis on higher-order stack-based programming.</p>\n\n<p>The majority of stack-based languages are not statically typed, and it would be a stretch to call Forth even dynamically typed. As such, developing large projects in Forth or Factor can require great discipline on the part of the programmer to avoid type errors.</p>\n\n<p>In this talk, I presented the development of type inference for stack-based languages as a linear sequence, divided into two overarching segments:</p>\n\n<ul>\n <li>An algebraic system known as <em>stack effects</em></li>\n <li>Systems that can be encoded as <em>nested pairs</em> in standard functional  programming languages</li></ul>\n\n<p>The thread of research on stack effects began with Jaanus Pöial in the early 1990&rsquo;s, and is a formalization of a commenting style well-known in the Forth community. The nested tuple systems were first examined by Okasaki in 1993 in the context of Haskell, and were later applied to higher-order stack-based languages. At the end, I give some avenues for extending the research on these systems, and list some pitfalls to be avoided in further research.</p>\n\n<p>Full notes (as PDF documents) &mdash; see the <a href=\"https://github.com/nuprl/hopl-s2017/tree/master/type-inference-for-stack-languages\">git repository</a> for more documents:</p>\n\n<ul>\n <li><a href=\"/blog/static/stack-languages-talk-notes.pdf\">Talk notes</a></li>\n <li><a href=\"/blog/static/stack-languages-annotated-bib.pdf\">Annotated bibliography</a></li></ul>")) ((? . 73) f post (u . "The Typed Racket Optimizer vs. Transient") (? . 73) 1731904015 (p+ #"/home/runner/work/website/website/blog/2020/01/15/the-typed-racket-optimizer-vs-transient/index.html" . unix) (u . "/blog/2020/01/15/the-typed-racket-optimizer-vs-transient/") (u . "2020-01-15T12:16:35") (? . 64) (? . 72) (c (u . "typed racket") c (u . "transient") c (u . "offsite") c (u . "Author: Ben Greenman")) (u . "\n<p>What type-directed optimizations does Typed Racket perform  and do any require full types?</p>") #t (u . "\n<p>What type-directed optimizations does Typed Racket perform  and do any require full types?</p>\n<!-- more-->\n\n<blockquote>\n <p>This post is based on a short talk. Slides from the talk are here: <a href=\"http://ccs.neu.edu/home/types/resources/talks/prl-offsite-2019.pdf\">http://ccs.neu.edu/home/types/resources/talks/prl-offsite-2019.pdf</a></p></blockquote>\n\n<p>Standard Typed Racket guarantees full type soundness and uses higher-order  contracts to make sure that interactions between Typed Racket and untyped  Racket obey the types. These contracts can be very expensive [<a href=\"https://doi.org/10.1017/S0956796818000217\">JFP 2019</a>]. And so, the standard types are very strong but (possibly) slow.</p>\n\n<p>Lately, I&rsquo;ve been working on a <a href=\"https://dl.acm.org/citation.cfm?id=3009849\">transient</a>  back-end for Typed Racket. Transient Typed Racket provides a weaker guarantee &mdash; only that typed code  cannot get &ldquo;stuck&rdquo; &mdash; via simpler run-time checks. Early data shows that these simple checks are often faster   than the standard boundary checks [<a href=\"https://doi.org/10.1145/3236766\">ICFP 2018</a>],  hence we want both options for Typed Racket programmers: slow/correct  and fast/wrong.</p>\n\n<p>The implementation of Transient needs to re-use some parts of Standard Typed  Racket and modify others. Typed Racket comes with three major components:</p>\n\n<ol>\n <li>a static type checker,</li>\n <li>a compiler from types to contracts, and</li>\n <li>a type-driven optimizer [<a href=\"https://www2.ccs.neu.edu/racket/pubs/padl12-stff.pdf\">PADL 2012</a>, <a href=\"https://doi.org/10.1145/2384616.2384629\">OOPSLA 2012</a>].</li></ol>\n\n<p>Transient Typed Racket can re-use all of the type checker  and parts of the type-to-contract compiler. The question for this post is: can Transient re-use the optimizer?</p>\n\n<h2 id=\"q-can-transient-re-use-the-typed-racket-optimizer\">Q. Can Transient re-use the Typed Racket optimizer?</h2>\n\n<p>The answer requires some thought because Standard Typed Racket and Transient  Typed Racket preserve different amounts of type information.</p>\n\n<ul>\n <li>In Standard Typed Racket, if an expression <strong>e</strong> has type <strong>T</strong> and reduces  to a value <strong>v</strong> (for short, <strong>e : T &mdash;&gt;* v</strong>), then the result <strong>v</strong> definitely  matches the full type <strong>T</strong>.</li>\n <li>In Transient Typed Racket, if <strong>e : T &mdash;&gt;* v</strong> then the result <strong>v</strong> matches  the toplevel &ldquo;shape&rdquo; of <strong>T</strong> but (maybe) nothing more.</li></ul>\n\n<p>The idea of a &ldquo;shape&rdquo; is that it corresponds to the outermost constructor of  a type. A shape check must be decidable, but otherwise finding the best shape for a type  is an engineering challenge. On one hand, deeper checks give stronger guarantees. On the other hand, shallower checks are quicker to validate.</p>\n\n<p>Here are a few shapes according to the current Transient prototype:</p>\n\n<pre><code>  Shape(Natural)                = Natural\n  Shape(Listof String)          = Listof Any\n  Shape(Symbol -&gt; Boolean)      = Any -&gt; Any\n  Shape(Vector Void Void)       = Vector Any Any\n  Shape(U Void (Listof Symbol)) = U Void (Listof Any)</code></pre>\n\n<p>For the current shapes, can we re-use the Typed Racket optimizer?</p>\n\n<h2 id=\"optimization-topics\">Optimization Topics</h2>\n\n<p>Typed Racket implements 15 kinds of type-directed transformation. Below, each gets: a short description, an example, and a verdict of &ldquo;safe&rdquo;  or &ldquo;unsafe&rdquo; for Transient.</p>\n\n<p>To be clear: some optimization topics perform many kinds of transformations, but this post picks only one example transformation for each.</p>\n\n<hr />\n\n<h3 id=\"topic-1-apply\">Topic 1: apply</h3>\n\n<p><a href=\"https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/optimizer/apply.rkt\">apply.rkt</a>  &ldquo;inlines&rdquo; expressions of the form <code>(apply f (map g xs))</code> to map and fold  in one pass over the list (<code>xs</code>). Currently, the pass only triggers when <code>f</code> is <code>+</code> or <code>*</code>.</p>\n\n<h4 id=\"example\">Example</h4>\n\n<pre><code>  ;; Type Assumptions\n  (: xs (Listof Integer))\n\n  ;; --------------------------------------------------\n  ;; Before Optimization\n  (apply + (map abs xs))\n\n  ;; --------------------------------------------------\n  ;; After Optimization\n  (let loop ((v 0)\n             (lst xs))\n    (if (null? lst)\n      v\n      (loop (+ v (abs (unsafe-car lst)))\n            (unsafe-cdr lst))))</code></pre>\n\n<p><strong>Verdict</strong>: safe, but risky.</p>\n\n<p>Technically, this transformation is unsound for Transient because of how it uses <code>unsafe-car</code>. The expansion of <code>(apply * (map g xs))</code> applies <code>(g (unsafe-car xs))</code> without  confirming that the first element of <code>xs</code> matches its expected type. This unsoundness is no problem, though, as long as <em>every</em> Transient-typed function  checks the shape of its input. (Typed functions that flow to untyped code already need to check inputs.)</p>\n\n<hr />\n\n<h3 id=\"topic-2-box\">Topic 2: box</h3>\n\n<p><a href=\"https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/optimizer/box.rkt\">box.rkt</a>  safely applies unsafe box operations to expressions with <code>Box</code> type.</p>\n\n<h4 id=\"example\">Example</h4>\n\n<pre><code>  ;; Type Assumptions\n  (: b (Boxof Symbol))\n\n  ;; --------------------------------------------------\n  ;; Before Optimization\n  (unbox b)\n\n  ;; --------------------------------------------------\n  ;; After Optimization\n  (unsafe-unbox b)</code></pre>\n\n<p><strong>Verdict</strong>: safe</p>\n\n<hr />\n\n<h3 id=\"topic-3-dead-code\">Topic 3: dead-code</h3>\n\n<p><a href=\"https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/optimizer/dead-code.rkt\">dead-code.rkt</a>  uses type information to identify code that cannot run. Once identified, the TR optimizer makes the dead code obvious for the Racket  bytecode compiler. The pass deals with <code>if</code> expressions, <code>lambda</code> expressions, and <code>case-lambda</code>;  the latter is the most interesting for Transient.</p>\n\n<h4 id=\"example\">Example</h4>\n\n<pre><code>  ;; Type Assumptions\n  (: f (-&gt; Symbol Symbol)\n\n  ;; --------------------------------------------------\n  ;; Before Optimization\n  (define f\n    (case-lambda\n      ((s) s)\n      ((s i)\n       (for/list ((_i (in-range i))) s))))\n\n  ;; --------------------------------------------------\n  ;; After Optimization\n  (define f\n    (case-lambda\n      ((s) s)\n      ((s i)\n       ; dead code, replace with no-op\n       (void))))</code></pre>\n\n<p><strong>Verdict</strong>: unsafe, can change behavior</p>\n\n<p>The pass infers that some branches of a <code>case-lambda</code> can never run because  the type says they do not exist. In Standard Typed Racket, this inference is correct because a run-time contract  seals off the &ldquo;untyped&rdquo; branches. In Transient, though, there is no need to add a contract and therefore no  guarantee these branches are inaccessible. An application in untyped code can enter the dead branch;  if it does, then adding Transient types to part of a program can change  its result to <code>(void)</code> and thereby violate the graduality design goal [<a href=\"http://drops.dagstuhl.de/opus/volltexte/2015/5031/\">SNAPL 2015</a>, <a href=\"https://doi.org/10.1145/3236768\">ICFP 2018</a>]  &mdash; that is, that adding types should only change behavior by introducing runtime  type mismatches.</p>\n\n<hr />\n\n<h3 id=\"topic-4-extflonum\">Topic 4: extflonum</h3>\n\n<p><a href=\"https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/optimizer/extflonum.rkt\">extflonum.rkt</a>  safely applies unsafe extflonum operations to expressions with <code>Extflonum</code> type.</p>\n\n<h4 id=\"example\">Example</h4>\n\n<pre><code>  ;; Type Assumptions\n  (: e Extflonum)\n\n  ;; --------------------------------------------------\n  ;; Before Optimization\n  (extflabs e)\n\n  ;; --------------------------------------------------\n  ;; After Optimization\n  (unsafe-extflabs e)</code></pre>\n\n<p><strong>Verdict</strong>: safe</p>\n\n<hr />\n\n<h3 id=\"topic-5-fixnum\">Topic 5: fixnum</h3>\n\n<p><a href=\"https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/optimizer/fixnum.rkt\">fixnum.rkt</a>  safely applies unsafe fixnum operations to expressions with <code>Fixnum</code> type.</p>\n\n<h4 id=\"example\">Example</h4>\n\n<pre><code>  ;; Type Assumptions\n  (: f Fixnum)\n\n  ;; --------------------------------------------------\n  ;; Before Optimization\n  (exact-&gt;inexact f)\n\n  ;; --------------------------------------------------\n  ;; After Optimization\n  (unsafe-fx-&gt;fl f)</code></pre>\n\n<p><strong>Verdict</strong>: safe</p>\n\n<hr />\n\n<h3 id=\"topic-6-float-complex\">Topic 6: float-complex</h3>\n\n<p><a href=\"https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/optimizer/float-complex.rkt\">float-complex.rkt</a>  unboxes complex numbers (into one real-part variable and one imaginary-part variable)  and rewrites operations to handle the unboxed numbers.</p>\n\n<h4 id=\"example\">Example</h4>\n\n<pre><code>  ;; Type Assumptions\n  (: f (-&gt; Float-Complex Float-Complex Float-Complex))\n\n  ;; --------------------------------------------------\n  ;; Before Optimization\n  (define (f n0 n1)\n    (+ n0 n1))\n\n  ;; --------------------------------------------------\n  ;; After Optimization\n  (define (f n0 n1)\n    (let* ((unboxed-real-0 (unsafe-flreal-part n0))\n           (unboxed-imag-0 (unsafe-flimag-part n0))\n           (unboxed-real-1 (unsafe-flreal-part n1))\n           (unboxed-imag-1 (unsafe-flimag-part n1))\n           (unboxed-real-2 (unsafe-fl+ (real-&gt;double-flonum unboxed-real-0)\n                                       unboxed-real-1))\n           (unboxed-imag-2 (unsafe-fl+ (real-&gt;double-flonum unboxed-imag-0)\n                                       unboxed-imag-1)))\n      (unsafe-make-flrectangular unboxed-real-2 unboxed-imag-2)))</code></pre>\n\n<p><strong>Verdict</strong>: safe, with caution</p>\n\n<p>The body of a Transient-typed function (that can flow to untyped code)  must first check that its inputs have the correct shape. Currently, the <strong>float-complex</strong> pass creates functions that apply <code>unsafe-flreal-part</code> before  anything else; to be safe, the pass needs to make sure that Transient checks  come first.</p>\n\n<hr />\n\n<h3 id=\"topic-7-float\">Topic 7: float</h3>\n\n<p><a href=\"https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/optimizer/float.rkt\">float.rkt</a>  safely applies unsafe flonum operations to expressions with <code>Flonum</code> type  and also transforms some <code>random</code> calls to use <code>unsafe-flrandom</code>.</p>\n\n<h4 id=\"example\">Example</h4>\n\n<pre><code>  ;; --------------------------------------------------\n  ;; Before Optimization\n  (random)\n\n  ;; --------------------------------------------------\n  ;; After Optimization\n  (unsafe-flrandom (current-pseudo-random-generator))</code></pre>\n\n<p><strong>Verdict</strong>: safe, but a close call</p>\n\n<p>Accessing a parameter, as in <code>(current-pseudo-random-generator)</code>, is an  elimination form that may require a shape check. This particular parameter, however, is protected by a contract that enforces  the precondition of <code>unsafe-flrandom</code>.</p>\n\n<hr />\n\n<h3 id=\"topic-8-list\">Topic 8: list</h3>\n\n<p><a href=\"https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/optimizer/list.rkt\">list.rkt</a>  safely applies unsafe list operations to list expressions.</p>\n\n<h4 id=\"example\">Example</h4>\n\n<pre><code>  ;; Type Assumptions\n  (: lst (List Symbol Symbol))\n\n  ;; --------------------------------------------------\n  ;; Before Optimization\n  (list-ref lst 0)\n\n  ;; --------------------------------------------------\n  ;; After Optimization\n  (unsafe-list-ref lst 0)</code></pre>\n\n<p><strong>Verdict</strong>: safe, with strong-enough shape checks</p>\n\n<p>The shape check for a <code>(Listof T)</code> must check for proper lists (via <code>list?</code>);  note that the cost of this check depends on the size of incoming values. The shape check for a <code>(List T ...)</code> type must validate the length of incoming  values.</p>\n\n<hr />\n\n<h3 id=\"topic-9-number\">Topic 9: number</h3>\n\n<p><a href=\"https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/optimizer/number.rkt\">number.rkt</a>  performs simple transformations on <code>Real</code>-valued expressions.</p>\n\n<h4 id=\"example\">Example</h4>\n\n<pre><code>  ;; Type Assumptions\n  (: r Real)\n\n  ;; --------------------------------------------------\n  ;; Before Optimization\n  (+ r)\n\n  ;; --------------------------------------------------\n  ;; After Optimization\n  r</code></pre>\n\n<p><strong>Verdict</strong>: safe</p>\n\n<hr />\n\n<h3 id=\"topic-10-pair\">Topic 10: pair</h3>\n\n<p><a href=\"https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/optimizer/pair.rkt\">pair.rkt</a>  safely applies pair-access operations to (possibly-nested) pairs.</p>\n\n<h4 id=\"example\">Example</h4>\n\n<pre><code>  ;; Type Assumptions\n  (: p (Pairof (Pairof Symbol Void) String))\n\n  ;; --------------------------------------------------\n  ;; Before Optimization\n  (cdar p)\n\n  ;; --------------------------------------------------\n  ;; After Optimization\n  (unsafe-cdr (unsafe-car p))</code></pre>\n\n<p><strong>Verdict</strong>: unsafe</p>\n\n<p>Transient guarantees the first level of a type, but nothing more. Concretely, <code>Shape(Pairof (Pairof Symbol Void) String) = Pairof Any Any</code>  and so the <code>unsafe-cdr</code> above is not safe.</p>\n\n<hr />\n\n<h3 id=\"topic-11-sequence\">Topic 11: sequence</h3>\n\n<p><a href=\"https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/optimizer/sequence.rkt\">sequence.rkt</a>  safely applies unsafe sequence operations to expressions with <code>(Sequenceof T)</code> type.</p>\n\n<h4 id=\"example\">Example</h4>\n\n<pre><code>  ;; Type Assumptions\n  (: s String)\n\n  ;; --------------------------------------------------\n  ;; Before Optimization\n  (for ((c s))\n    (void))\n\n  ;; --------------------------------------------------\n  ;; After Optimization (simplified)\n  (for ((c (in-string s)))\n    (void))</code></pre>\n\n<p><strong>Verdict</strong>: safe, with strong enough shape checks (see <strong>list</strong> and <strong>vector</strong>)</p>\n\n<hr />\n\n<h3 id=\"topic-12-string\">Topic 12: string</h3>\n\n<p><a href=\"https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/optimizer/string.rkt\">string.rkt</a>  safely applies unsafe string operations to expressions with <code>String</code> type. (Note that <code>unsafe-string-ref</code> is only safe when the result is sure to be  a Latin&ndash;1 character.)</p>\n\n<h4 id=\"example\">Example</h4>\n\n<pre><code>  ;; Type Assumptions\n  (: b Bytes)\n\n  ;; --------------------------------------------------\n  ;; Before Optimization\n  (bytes-length b)\n\n  ;; --------------------------------------------------\n  ;; After Optimization\n  (unsafe-bytes-length b)</code></pre>\n\n<p><strong>Verdict</strong>: safe</p>\n\n<hr />\n\n<h3 id=\"topic-13-struct\">Topic 13: struct</h3>\n\n<p><a href=\"https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/optimizer/struct.rkt\">struct.rkt</a>  safely applies unsafe struct operations to struct expressions, using  Typed Racket&rsquo;s <a href=\"https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/types/struct-table.rkt\">internal registry of struct info</a>.</p>\n\n<h4 id=\"example\">Example</h4>\n\n<pre><code>  ;; Type Assumptions\n  (struct open-interval ([lo : Real] [hi : Real]))\n  (: ivl open-interval)\n\n  ;; --------------------------------------------------\n  ;; Before Optimization\n  (open-interval-lo ivl)\n\n  ;; --------------------------------------------------\n  ;; After Optimization\n  (unsafe-struct-ref ivl 0)</code></pre>\n\n<p><strong>Verdict</strong>: safe</p>\n\n<hr />\n\n<h3 id=\"topic-14-unboxed-let\">Topic 14: unboxed-let</h3>\n\n<p><a href=\"https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/optimizer/unboxed-let.rkt\">unboxed-let.rkt</a>  cooperates with the <code>float-complex</code> pass by transforming the binding-site  of some complex numbers. This pass may change a <code>let</code>-expression into a <code>let-values</code> that expects  a real-part and imag-part, and may change a function to expect twice as many  arguments &mdash; provided the optimizer can find <em>all</em> calls to the function.</p>\n\n<h4 id=\"example\">Example</h4>\n\n<pre><code>  ;; Type Assumptions\n  (: k Float-Complex)\n\n  ;; --------------------------------------------------\n  ;; Before Optimization\n  (let ((f (lambda ((n : Float-Complex)) (+ n n))))\n    (f k))\n\n  ;; --------------------------------------------------\n  ;; After Optimization\n  (let ((f (lambda (real-part-n imag-part-n) ....)))\n    (f (unsafe-flreal-part k) (unsafe-flimag-part k)))</code></pre>\n\n<p><strong>Verdict</strong>: safe, thanks to the (conservative) escape analysis</p>\n\n<hr />\n\n<h3 id=\"topic-15-vector\">Topic 15: vector</h3>\n\n<p><a href=\"https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/optimizer/vector.rkt\">vector.rkt</a>  safely applies vector operations to vector expressions.</p>\n\n<h4 id=\"example\">Example</h4>\n\n<pre><code>  ;; Type Assumptions\n  (: v (Vector (Listof Symbol) String))\n  (: lst (Listof Symbol))\n\n  ;; --------------------------------------------------\n  ;; Before Optimization\n  (vector-set! v lst 0)\n\n  ;; --------------------------------------------------\n  ;; After Optimization\n  (unsafe-vector-set! v lst 0)</code></pre>\n\n<p><strong>Verdict</strong>: safe, with strong-enough shape checks</p>\n\n<p>The check for <code>(Vector T ...)</code> must check the length of incoming values.</p>\n\n<hr />\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>The Typed Racket optimizer implements 15 kinds of transformations. Two are definitely unsafe for Transient as-is (<strong>dead-code</strong>, <strong>pair</strong>). One must take care when rewriting a Transient function (<strong>float-complex</strong>). One may limit our ability to reduce the number of run-time checks in a program (<strong>apply</strong>). Two others require transient checks whose cost depends on the size of the input values (<strong>list</strong>, <strong>sequence</strong>).</p>\n\n<p>There may be other issues that I missed while reading the optimizer code. If so, I&rsquo;ll try to remember to update this post.</p>")) ((? . 42) f post (u . "SRC-submissions") (? . 42) 1731904015 (p+ #"/home/runner/work/website/website/blog/2016/11/17/src-submissions/index.html" . unix) (u . "/blog/2016/11/17/src-submissions/") (u . "2016-11-17T13:52:52") (? . 41) (? . 36) (c (u . "Author: Gabriel Scherer")) (u . "\n<p>Max New, Daniel Patterson and Ben Greenman recently wrote three two-page abstracts on what they are working on right now. Come have a look &mdash; and any feedback is welcome!</p>") #t (u . "\n<p>Max New, Daniel Patterson and Ben Greenman recently wrote three two-page abstracts on what they are working on right now. Come have a look &mdash; and any feedback is welcome!</p>\n<!-- more-->\n\n<h2 id=\"gradual-type-precision-as-retraction\">Gradual Type Precision as Retraction</h2>\n\n<p><a href=\"http://maxsnew.github.io/docs/precision-as-retraction.pdf\">Gradual Type Precision as Retraction</a>\n <br />Max New\n <br />2016</p>\n\n<blockquote>\n <p>Gradually typed programming languages allow for a mix of precision of static type information, allowing advanced type features to be added to existing languages, while still supporting interoperability with legacy code. The advantages of gradual typing are enticing to researchers and practitioners alike, but a general theory of gradually typed languages is only beginning to emerge after a decade of research.</p>\n <p>It has long been noted that there is much similarity between work on contracts and gradual typing, and the use of retracts in domain theory which were used to relate models of untyped and typed lambda calculus in <a href=\"https://pdfs.semanticscholar.org/359e/ca57fe42d97cbb67f0b5591869abe5eb5421.pdf\">Scott(1976)</a> and <a href=\"http://andrewkish-name.s3.amazonaws.com/scott80.pdf\">Scott(1980)</a>. Here we take this connection seriously and consider how judgments in modern gradually typed languages can be framed in terms of retractions. While retractions in programming languages were originally studied in terms of denotational semantics in domains, our presentation will use only the most basic elements of category theory: composition, identity and equality of terms, so our formulation is equally applicable to axiomatic or operational semantics.</p>\n <p>In particular we propose a semantic criterion for the notion of precision of gradual types, a common judgment in gradually typed languages (sometimes called naive subtyping for historical reasons). We relate it to a previous definition from <a href=\"https://www.eecs.northwestern.edu/%7Erobby/pubs/papers/esop2009-wf.pdf\">Wadler and Findler(2009)</a> that defines type precision in terms of blame. We show that our definition decomposes in a similar way into “positive” and “negative” type precision, but without depending on a specific notion of blame in the language.</p></blockquote>\n\n<h2 id=\"linking-types-specifying-safe-interoperability-and-equivalences\">Linking Types: Specifying Safe Interoperability and Equivalences</h2>\n\n<p><a href=\"https://dbp.io/pubs/2016/linking-types-poplsrc2017-proposal.pdf\">Linking Types: Specifying Safe Interoperability and Equivalences</a>\n <br />Daniel Patterson\n <br />2016</p>\n\n<blockquote>\n <p>All programs written in high-level languages link with libraries written in lower-level languages, often to expose constructs, like threads, random numbers, or automatic serialization, that aren’t possible in the high-level language. This linking usually takes place after compiling both languages to a common language, possibly assembly. In this sense, reasoning about crosslanguage linking means reasoning about compilation.</p>\n <p>While most languages include cross-language linking (FFI) mechanisms, they are ad-hoc and can easily break the semantic equivalences of the source language, making it hard for source programmers to reason about correctness of their programs and hard for compiler writers to reason about correctness of their optimizations.</p>\n <p>In this work, I design and motivate linking types, a language-based mechanism for formally specifying safe linking with libraries utilizing features inexpressible in the source. Linking types allows programmers to reason about their programs in the presence of behavior inexpressible in their language, without dealing with the intricacies of either the compiler or the particular language they are linking with.</p></blockquote>\n\n<h2 id=\"pruning-contracts-with-rosette\">Pruning Contracts with Rosette</h2>\n\n<p><a href=\"http://www.ccs.neu.edu/home/types/resources/popl2017-src.pdf\">Pruning Contracts with Rosette</a>\n <br />Ben Greenman\n <br />2016</p>\n\n<blockquote>\n <p><a href=\"http://www.ccs.neu.edu/racket/pubs/icfp16-dnff.pdf\">Contracts</a> are a pragmatic tool for managing software systems, but programs using contracts suffer runtime overhead. If this overhead becomes a performance bottleneck, programmers must manually edit or remove their contracts. This is no good. Rather, the contracts should identify their own inefficiencies and remove unnecessary dynamic checks. Implementing contracts with <a href=\"https://emina.github.io/rosette/\">Rosette</a> is a promising way to build such self-aware contracts.</p></blockquote>\n\n<h2 id=\"while-were-at-it-lets-rant-on-srcs\">While we&rsquo;re at it let&rsquo;s rant on SRCs</h2>\n\n<p>These abstracts are submitted at POPL&rsquo;s &ldquo;Student Research Competition&rdquo;. You submit an abstract, and if you get accepted to that thing, you get a bit of travel support money, and you have to prepare a poster and present it at the conference.</p>\n\n<p>I have a firm dislike for the <em>Competition</em> part of that concept: I think that people think of research too competitively already, and that we should have less of that, not more. (Having some is unfortunately unavoidable in scarce-resource situations.) I think that the process of awarding prizes to students with the &ldquo;best poster&rdquo; is dumb &mdash; and borderline ridiculous.</p>\n\n<p>On the other hand, my experience seeing them writing these extended abstracts is that it&rsquo;s a useful exercise for them, and produces nice result &mdash; short, readable introductions to their ideas. And Jennifer Paykin <a href=\"https://github.com/gasche/icfp2016-blog/blob/master/SVs/jennifer_paykin.md\">convincingly argues</a> that although writing a poster is rather painful, actually presenting it during the conference is interesting and useful. In her words, &ldquo;it&rsquo;s worth it to get the experience of authentic and fruitful discussions&rdquo;. Plus having posters in the corridors of one&rsquo;s lab is very nice.</p>\n\n<p>I think we could have &ldquo;Student Research Sessions&rdquo; or &ldquo;Student Poster Sessions&rdquo;, where students are encouraged to present their work, would write those nice extended abstracts and posters, interact with researchers at the conference, and get travel money, without the ranking and prize stuff. (I would still encourage students to participate to SRC today, it seems to be worth it.)</p>")) ((? . 51) f post (u . "Building a Website with Scribble") (? . 51) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/05/23/building-a-website-with-scribble/index.html" . unix) (u . "/blog/2017/05/23/building-a-website-with-scribble/") (u . "2017-05-23T01:53:13") (? . 22) (? . 50) (c (u . "Scribble") c (u . "tutorial") c (u . "Author: Ben Greenman")) (u . "\n<p>The source code for the PRL website is written using Scribble, the Racket  documentation tool. I am very happy with this choice, and you should be too!</p>") #t (u . "\n<p>The source code for the PRL website is written using Scribble, the Racket  documentation tool. I am very happy with this choice, and you should be too!</p>\n<!-- more-->\n\n<h2 id=\"the-story-so-far\">The Story so Far</h2>\n\n<p>Last Fall, I took a flight to Chicago (on my way to <a href=\"http://con.racket-lang.org/2016/\">RacketCon 2016</a>). When I landed, there was a new message in my inbox:</p>\n\n<pre><code>    Subject: Web Page\n    Date: 2016-09-15\n\n    You have been nominated webmaster by public acclamation. Congratulations!</code></pre>\n\n<p>Emboldened by the trust of my people, I promptly converted the PRL website  from Racket-generating-HTML to the fine <a href=\"http://docs.racket-lang.org/scribble-pp/html.html\"><code>scribble/html</code></a>  preprocessor language (commit <a href=\"https://github.com/nuprl/website/commit/a0600d32fec4bd70c5530b2717aec32979d634f7\"><code>a0600d</code></a>) This bold action polarized the community.</p>\n\n<blockquote>\n <p>I can&rsquo;t read the source anymore! Is this really an improvement?</p></blockquote>\n\n<p>Fear not, citizens. The switch to <a href=\"http://docs.racket-lang.org/scribble-pp/html.html\"><code>scribble/html</code></a> was the right choice, and you  too can learn to read the source code.</p>\n\n<h2 id=\"how-to-read-scribblehtml-programs\">How to Read <code>scribble/html</code> Programs</h2>\n\n<h3 id=\"basics\">Basics</h3>\n\n<p>Scribble is a language for writing Racket documentation. The key innovation in Scribble is the <em>@-expression</em> (read: &ldquo;at expression&rdquo;). The <a href=\"http://docs.racket-lang.org/scribble-pp/html.html\"><code>scribble/html</code></a> language combines @-expression syntax with  functions that generate HTML.</p>\n\n<h4 id=\"-syntax\">@-syntax</h4>\n\n<p><a href=\"http://www.greghendershott.com/2015/08/at-expressions.html\">Greg Hendershott</a> and the <a href=\"http://docs.racket-lang.org/scribble/reader.html\">Scribble Documentation</a> explain @-expressions properly. Here&rsquo;s a short tutorial (Part 1 of 2, &ldquo;the basics&rdquo;):</p>\n\n<ul>\n <li>Scribble programs start in &ldquo;text mode&rdquo;.  Every character you type goes straight to the document you are building.</li>\n <li>The @-sign toggles to &ldquo;Racket mode&rdquo; for the next expression.  In Racket mode, the characters you type will be evaluated as a Racket program  to produce part of the document.</li></ul>\n\n<p><em>Examples:</em> Evaluating <code>\"Hello Dave\"</code> puts &ldquo;Hello Dave&rdquo; in your document. Evaluating <code>\"Hello @Dave\"</code> puts &ldquo;Hello ???&rdquo; in your document, where \"???\" is the value of the variable <code>Dave</code>. Finally if <code>Dave</code> is the name of a function, then <code>\"Hello @(Dave)\"</code> calls the <code>Dave</code> function with zero arguments and puts whatever it returns into your document.</p>\n\n<p>To make it easy to interleave text, function calls, and code, Scribble  discriminates between 4 kinds of parentheses when they follow an @-sign (Part 2 of 2, &ldquo;the parens&rdquo;):</p>\n\n<ul>\n <li><code>@(f A B)</code> is just like the function call <code>(f A B)</code> in Racket</li>\n <li><code>@f[A B]</code> is the same as <code>@(f A B)</code>, but typically more useful because &hellip;</li>\n <li><code>@f[A B]{....}</code> evaluates the <code>....</code> in &ldquo;text mode&rdquo; to a list of words <code>w*</code>,  then calls <code>f</code> just like <code>(apply f A B w*)</code></li>\n <li><code>@f{....}</code> evaluates the <code>....</code> in &ldquo;text mode&rdquo; and calls <code>f</code> with the results</li>\n <li><code>@f|{....}|</code> is similar, but the <code>....</code> are in &ldquo;unescapable text mode&rdquo;</li></ul>\n\n<p>&ldquo;Unescapable text mode&rdquo; treats @-signs as text instead of toggling between modes.</p>\n\n<h4 id=\"generating-html\">Generating HTML</h4>\n\n<p>The <a href=\"http://docs.racket-lang.org/scribble-pp/html.html\"><code>scribble/html</code></a> language comes with functions that render HTML. These functions have the same name as the corresponding HTML tag.</p>\n\n<p>Example program:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">scribble/html</span>\n<span class=\"n\">@p</span><span class=\"p\">{</span><span class=\"n\">Hello</span> <span class=\"n\">World</span><span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Running this program prints:</p>\n\n<div class=\"brush: html\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Hello World<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>No surprises.</p>\n\n<p>One thing that <em>is</em> surprising is how <code>scribble/html</code> handles tag attributes. Every tag-rendering function accepts &ldquo;Racket mode&rdquo; arguments that specify  an attribute name and attribute value.</p>\n\n<p>For example:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">scribble/html</span>\n<span class=\"n\">@p</span><span class=\"p\">[</span><span class=\"n\">style:</span> <span class=\"s2\">\"color:red\"</span><span class=\"p\">]{</span><span class=\"n\">Hello</span> <span class=\"n\">World</span><span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Prints:</p>\n\n<div class=\"brush: html\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">style</span><span class=\"o\">=</span><span class=\"s\">\"color:red\"</span><span class=\"p\">&gt;</span>Hello World<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Hope the output looks familiar. The input syntax is strange, but that&rsquo;s what it is.</p>\n\n<p>Larger programs print larger webpages. Each page on the PRL website is HTML generated by one <code>scribble/html</code> program.</p>\n\n<h2 id=\"why-scribblehtml-is-an-improvement\">Why <code>scribble/html</code> is an Improvement</h2>\n\n<p>Before <code>scribble/html</code>, the PRL website was implemented in <code>scribble/text</code>. A <code>scribble/text</code> program renders and prints text. There is no extra support for HTML.</p>\n\n<p>To compare, here&rsquo;s the start of the old homepage:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span>\n<span class=\"normal\">9</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">scribble/text</span>\n<span class=\"n\">@</span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a></span> <span class=\"s2\">\"templates.rkt\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">&lt;!DOCTYPE</span> <span class=\"n\">html&gt;</span>\n<span class=\"n\">&lt;html</span> <span class=\"n\">lang=</span><span class=\"s2\">\"en\"</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span>\n  <span class=\"n\">@</span><span class=\"p\">(</span><span class=\"n\">header</span> <span class=\"s2\">\"Home\"</span><span class=\"p\">)</span>\n  <span class=\"n\">&lt;body</span> <span class=\"n\">id=</span><span class=\"s2\">\"pn-top\"</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span>\n    <span class=\"n\">@</span><span class=\"p\">(</span><span class=\"n\">navbar</span> <span class=\"s2\">\"Home\"</span><span class=\"p\">)</span>\n    <span class=\"n\">&lt;div</span> <span class=\"n\">class=</span><span class=\"s2\">\"jumbotron\"</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>And here is the start of the <code>scribble/html</code>&rsquo;d homepage:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span>\n<span class=\"normal\">9</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">scribble/html</span>\n<span class=\"n\">@require</span><span class=\"p\">[</span><span class=\"s2\">\"templates.rkt\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">@doctype</span><span class=\"p\">{</span><span class=\"n\">html</span><span class=\"p\">}</span>\n<span class=\"n\">@html</span><span class=\"p\">[</span><span class=\"n\">lang:</span> <span class=\"s2\">\"en\"</span><span class=\"p\">]{</span>\n  <span class=\"n\">@header</span><span class=\"p\">{</span><span class=\"n\">Home</span><span class=\"p\">}</span>\n    <span class=\"n\">@body</span><span class=\"p\">[</span><span class=\"n\">id:</span> <span class=\"s2\">\"pn-top\"</span><span class=\"p\">]{</span>\n      <span class=\"n\">@navbar</span><span class=\"p\">{</span><span class=\"n\">Home</span><span class=\"p\">}</span>\n      <span class=\"n\">@div</span><span class=\"p\">[</span><span class=\"n\">class:</span> <span class=\"s2\">\"jumbotron\"</span><span class=\"p\">]{</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The pages look similar. The new one has more @-signs and parentheses, the old one has more <code>&lt;</code>-signs  and quotes. If you were able to edit the old page, you should be able to edit the new page.</p>\n\n<p>The <strong>key improvement</strong> in the new page is that <strong>common mistakes are now  compile-time errors</strong>.</p>\n\n<ul>\n <li>\n  <p>Before, a typo like <code>&lt;hmtl&gt;</code> would generate an ugly webpage.  After, a typo like <code>@hmtl</code> is a syntax error.</p></li>\n <li>\n  <p>Before, a typo like <code>&lt;b&gt;....</code> with no closing tag would generate an ugly webpage.  After, a typo like <code>@b{....</code> is a syntax error.</p></li></ul>\n\n<p>Both flavors of error message come with source-code line numbers. This is very very helpful.</p>\n\n<h3 id=\"small-improvements\">Small Improvements</h3>\n\n<h4 id=\"1-more-functions\">1. More Functions</h4>\n\n<p>Before, the <a href=\"http://prl.ccs.neu.edu/teaching.html\">Teaching page</a> contained  some interesting HTML for rendering vertical text (look for the word &ldquo;Semantics&rdquo; to see how this was used):</p>\n\n<div class=\"brush: html\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"how-to-design-programs\"</span><span class=\"p\">&gt;</span>S<span class=\"p\">&lt;</span><span class=\"nt\">br</span> <span class=\"p\">/&gt;</span>e<span class=\"p\">&lt;</span><span class=\"nt\">br</span> <span class=\"p\">/&gt;</span>m<span class=\"p\">&lt;</span><span class=\"nt\">br</span> <span class=\"p\">/&gt;</span>a<span class=\"p\">&lt;</span><span class=\"nt\">br</span> <span class=\"p\">/&gt;</span>n<span class=\"p\">&lt;</span><span class=\"nt\">br</span> <span class=\"p\">/&gt;</span>t<span class=\"p\">&lt;</span><span class=\"nt\">br</span> <span class=\"p\">/&gt;</span>i<span class=\"p\">&lt;</span><span class=\"nt\">br</span> <span class=\"p\">/&gt;</span>c<span class=\"p\">&lt;</span><span class=\"nt\">br</span> <span class=\"p\">/&gt;</span>s<span class=\"p\">&lt;</span><span class=\"nt\">br</span> <span class=\"p\">/&gt;&lt;</span><span class=\"nt\">br</span> <span class=\"p\">/&gt;&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>After, the same text is generated from a function call:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">@span</span><span class=\"p\">[</span><span class=\"n\">class:</span> <span class=\"s2\">\"how-to-design-programs\"</span><span class=\"p\">]{</span><span class=\"n\">@vertical-text</span><span class=\"p\">{</span><span class=\"n\">Semantics</span><span class=\"p\">}}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The <code>vertical-text</code> function is simple:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">@require</span><span class=\"p\">[(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._only-in))\" style=\"color: inherit\">only-in</a></span> <span class=\"n\">racket/list</span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._add-between))\" style=\"color: inherit\">add-between</a></span><span class=\"p\">)]</span>\n\n<span class=\"n\">@</span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">vertical-text</span> <span class=\"o\">.</span> <span class=\"n\">str*</span><span class=\"p\">)</span>\n   <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._add-between))\" style=\"color: inherit\">add-between</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-~3elist))\" style=\"color: inherit\">string-&gt;list</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._append*))\" style=\"color: inherit\">append*</a></span> <span class=\"n\">str*</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"n\">br</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h4 id=\"2-more-structure-less-boilerplate\">2. More Structure, Less Boilerplate</h4>\n\n<p>Here&rsquo;s part of the old definition of &ldquo;Ben Greenman&rdquo; on the <a href=\"http://prl.ccs.neu.edu/people.html\">People page</a>:</p>\n\n<div class=\"brush: html\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"row pn-person\"</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"col-md-12 pn-row-eq-height\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"col-md-3 pn-photo\"</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"img-wrapper\"</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"img/ben_greenman.jpg\"</span> <span class=\"na\">title</span><span class=\"o\">=</span><span class=\"s\">\"Ben Greenman\"</span> <span class=\"na\">alt</span><span class=\"o\">=</span><span class=\"s\">\"Ben Greenman\"</span> <span class=\"p\">/&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"col-md-9\"</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"col-md-4 pn-contact\"</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"pn-name\"</span><span class=\"p\">&gt;</span>Ben Greenman<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">br</span> <span class=\"p\">/&gt;</span>\n        Advisor: Matthias Felleisen<span class=\"p\">&lt;</span><span class=\"nt\">br</span> <span class=\"p\">/&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"mailto:types@\"</span><span class=\"err\">@\"</span><span class=\"na\">ccs</span><span class=\"err\">.</span><span class=\"na\">neu</span><span class=\"err\">.</span><span class=\"na\">edu</span><span class=\"err\">\"</span><span class=\"p\">&gt;</span>types@\"@\"ccs.neu.edu<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">br</span> <span class=\"p\">/&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"http://www.ccs.neu.edu/home/types\"</span><span class=\"p\">&gt;</span>www.ccs.neu.edu/home/types<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"col-md-3 pn-muted col-md-offset-5\"</span><span class=\"p\">&gt;</span>\n        Joined 2014\n      <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"col-md-12 pn-bio\"</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>I like constructions .... <span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The new definition uses a helper function with keyword arguments for each  &ldquo;field&rdquo; of the person:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">@person</span><span class=\"p\">[</span><span class=\"kd\">#:name</span> <span class=\"s2\">\"Ben Greenman\"</span>\n        <span class=\"kd\">#:title</span> <span class=\"s2\">\"Advisor: Matthias Felleisen\"</span>\n        <span class=\"kd\">#:e-mail</span> <span class=\"s2\">\"types@ccs.neu.edu\"</span>\n        <span class=\"kd\">#:website</span> <span class=\"s2\">\"http://ccs.neu.edu/home/types\"</span>\n        <span class=\"kd\">#:history</span> <span class=\"n\">@list</span><span class=\"p\">[</span><span class=\"s2\">\"Joined 2014\"</span><span class=\"p\">]</span>\n        <span class=\"kd\">#:img</span> <span class=\"s2\">\"ben_greenman.jpg\"</span><span class=\"p\">]{</span>\n  <span class=\"n\">I</span> <span class=\"n\">like</span> <span class=\"n\">constructions</span> <span class=\"n\">....</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h4 id=\"3-less-string-formatting\">3. Less String-Formatting</h4>\n\n<p>Before, the code did a lot of string formatting (<a href=\"https://github.com/nuprl/website/commit/a0600d#diff-1921e33ce89be28dd277cf1c7880d1beL9\">link</a>):</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/creatingunits.html#(form._((lib._racket/unit..rkt)._link))\" style=\"color: inherit\">link</a></span> <span class=\"n\">url</span> <span class=\"n\">body</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-append))\" style=\"color: inherit\">string-append</a></span> <span class=\"s2\">\"&lt;a href=</span><span class=\"se\">\\\"</span><span class=\"s2\">\"</span> <span class=\"n\">url</span> <span class=\"s2\">\"</span><span class=\"se\">\\\"</span><span class=\"s2\">&gt;\"</span> <span class=\"n\">body</span> <span class=\"s2\">\"&lt;/a&gt;\"</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The new code has no need for such helper functions.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">@a</span><span class=\"p\">[</span><span class=\"n\">href:</span> <span class=\"n\">url</span> <span class=\"n\">body</span><span class=\"p\">]</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h4 id=\"bottom-line\">Bottom Line</h4>\n\n<p>Scribble is a good language for making static HTML pages.</p>\n\n<hr />\n\n<p><em>If you liked this post, you may also be interested in:</em></p>\n\n<ul>\n <li><a href=\"http://docs.racket-lang.org/pollen/index.html\">Pollen</a></li>\n <li><a href=\"https://github.com/vishesh/racketscript\">RacketScript</a></li>\n <li>Other websites built using <a href=\"http://docs.racket-lang.org/scribble-pp/html.html\"><code>scribble/html</code></a>:  (1) <a href=\"http://nanopass.org/\">nanopass.github.io</a> (<a href=\"https://github.com/nanopass/nanopass.github.io\">source code</a>),  (2) <a href=\"http://prl.ccs.neu.edu/gtp/\">Gradual Typing Across the Spectrum</a> (<a href=\"https://github.com/nuprl/gtp\">source code</a>).</li>\n <li><a href=\"http://prl.ccs.neu.edu/blog/2016/05/18/gradual-typing-across-the-spectrum/\">Notes from a Gradual Typing Across the Spectrum PI meeting</a></li></ul>")) ((? . 56) f post (u . "Emacs daemon for fast editor startup") (? . 56) 1731904015 (p+ #"/home/runner/work/website/website/blog/2016/10/17/emacs-daemon-for-fast-editor-startup/index.html" . unix) (u . "/blog/2016/10/17/emacs-daemon-for-fast-editor-startup/") (u . "2016-10-17T21:48:25") (? . 7) (? . 55) (c (u . "System Administration") c (u . "Emacs") c (u . "Author: Gabriel Scherer")) (u . "\n<p>In the early days of the famous Emacs/Vim debates, Emacs was often ridiculed for its bulkiness (Eight Megabytes-of-RAM And Constantly Swapping, etc.). The computational power of our computer has grown much faster than Emacs&rsquo; bloat: it takes exactly one second to load on my machine. However, our workflows have also changed, and my workflow implies frequently starting new text editors &mdash; on each git commit for example, or when I use a <a href=\"https://addons.mozilla.org/en-US/firefox/addon/its-all-text/\">Firefox extension</a> to edit a textarea content in a proper editor.</p>\n\n<p>In this blog post, I describe how to use <code>emacsclient</code> to reuse an existing Emacs process when creating a new editor window, which reduces editor startup times from 1s to 0.150s on my machine.</p>") #t (u . "\n<p>In the early days of the famous Emacs/Vim debates, Emacs was often ridiculed for its bulkiness (Eight Megabytes-of-RAM And Constantly Swapping, etc.). The computational power of our computer has grown much faster than Emacs&rsquo; bloat: it takes exactly one second to load on my machine. However, our workflows have also changed, and my workflow implies frequently starting new text editors &mdash; on each git commit for example, or when I use a <a href=\"https://addons.mozilla.org/en-US/firefox/addon/its-all-text/\">Firefox extension</a> to edit a textarea content in a proper editor.</p>\n\n<p>In this blog post, I describe how to use <code>emacsclient</code> to reuse an existing Emacs process when creating a new editor window, which reduces editor startup times from 1s to 0.150s on my machine.</p>\n<!-- more-->\n\n<p>Emacs has long supported a client/server mode: a daemon emacs instance is loaded in the background, and whenever you request a new emacs window you can creates a new frame (~ window) using the same instance. This means that the startup time is dramatically reduced after the daemon is launched, as for example the execution of your personal configuration code does not have to be repeated.</p>\n\n<p>To use it, I have this code as <code>/usr/bin/editor</code>:</p>\n\n<div class=\"brush: sh\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"ch\">#!/bin/bash</span>\nemacsclient -a <span class=\"s2\">\"\"</span> -c <span class=\"s2\">\"</span><span class=\"nv\">$@</span><span class=\"s2\">\"</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The empty <code>-a</code> parameter means that if no daemon exists, it should start one in the background and retry. The <code>-c</code> option means that a new frame (window) should be created instead of reusing an existing one. <code>\"$@\"</code>means that when the script is invoked with a path as command-line parameter (<code>editor /tmp/foo.txt</code>), the corresponding file will be opened.</p>\n\n<p>Finally, my <code>.bash_profile</code> sets the <code>EDITOR</code> variable to <code>editor</code> (<code>export EDITOR=/usr/bin/editor</code>); this environment variable is what most tools (git included) will use to invoke a text editor.</p>\n\n<p>On my machine, starting the daemon takes 1.4s. Creating a client windows takes around 0.150s.</p>\n\n<p>If you want to control the environment in which the daemon process is started, you can launch it explicitly by running <code>emacs --daemon</code>.</p>\n\n<p>Cool kids use <a href=\"http://spacemacs.org/\">Spacemacs</a> these days, which comes with all sort of convenient settings built in, and I&rsquo;m told that it does daemonization out of the box. I haven&rsquo;t taken the time to give Spacemacs a try yet.</p>\n\n<p>Finally, sometimes having all editor windows share the same process is not the right thing, because I do stuff which makes Emacs a bit unstable. (It&rsquo;s not very good at asynchronous communication with the rest of the world, so for example accessing a file through SSH from Emacs can hang the process when network goes bad.). I&rsquo;ve been bitten a few times by a crash of all editor windows at the same time, and since then, when I know I&rsquo;m going to do &ldquo;heavy stuff&rdquo;, I launch a separate process for it (just <code>emacs</code> instead of <code>editor</code> or <code>emacsclient</code>).</p>\n\n<p>P.S.: To precisely measure the startup time, ask Emacs to evaluate a Lisp expression on startup, to kill it immediately.:</p>\n\n<div class=\"brush: sh\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span>$ <span class=\"nb\">time</span> emacs --eval <span class=\"s2\">\"(save-buffers-kill-terminal)\"</span>\n$ <span class=\"nb\">time</span> emacsclient -a <span class=\"s1\">&#39;&#39;</span> -c -e <span class=\"s2\">\"(save-buffers-kill-terminal)\"</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>")) ((? . 17) f post (u . "Monotonicity Types: Towards A Type System for Eventual Consistency") (? . 17) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/10/22/monotonicity-types-towards-a-type-system-for-eventual-consistency/index.html" . unix) (u . "/blog/2017/10/22/monotonicity-types-towards-a-type-system-for-eventual-consistency/") (u . "2017-10-22T11:59:06") (? . 16) (? . 4) (c (u . "types") c (u . "monotonicity") c (u . "CRDTs") c (u . "eventual consistency") c (u . "Author: Kevin Clancy")) (u . "\n<p>A few weeks back, we published a draft of an article entitled <a href=\"https://infoscience.epfl.ch/record/231867\"><em>Monotonicity Types</em></a>. In it, we describe a type system which we hope can aid the design of distributed systems by tracking monotonicity with types.</p>") #t (u . "\n<p>A few weeks back, we published a draft of an article entitled <a href=\"https://infoscience.epfl.ch/record/231867\"><em>Monotonicity Types</em></a>. In it, we describe a type system which we hope can aid the design of distributed systems by tracking monotonicity with types.</p>\n<!-- more-->\n\n<p>But first, what, precisely, do we mean by <em>monotonicity</em>? Here&rsquo;s a short definition:</p>\n\n<p>A partially ordered set is a set \\(P\\) endowed with a relation \\(\\leq\\) such that for all \\(p, q, r \\in P\\) we have:</p>\n\n<ol>\n <li>\\(p \\leq p\\) (reflexivity)</li>\n <li>\\(p \\leq  q\\) and \\(q \\leq r\\) implies \\(p \\leq r\\) (transitivity)</li>\n <li>\\(p \\leq q\\) and \\(q \\leq p\\) implies \\(p = q\\) (anti-symmetry)</li></ol>\n\n<p>If \\(P\\) and \\(Q\\) are partially ordered sets, we say that a function \\(f : P \\to Q\\) between them is <em>monotone</em> if for all \\(p_1, p_2 \\in P\\) with \\(p_1 \\leq p_2\\), we have \\(f(p_1) \\leq f(p_2)\\).</p>\n\n<p>So, said another way, increasing the input to a monotone function causes an increase to its output.</p>\n\n<p>Particularly in the context of concurrent and distributed programming, monotonicity has arisen time and time again as an important property. Designers of languages for coordination-free distributed programming such as Lasp [<a href=\"#ref1\">Meiklejohn et al. (2015)</a>] and BloomL [<a href=\"#ref1\">Conway et al. (2012)</a>], as well as designers of data types and abstractions for eventual consistency or determinism such as CRDTs [<a href=\"#ref3\">Shapiro et al. (2011)</a>] and LVars [<a href=\"#ref4\">Kuper et al. (2013)</a>] have noticed that monotonic evolution of program state over time is a necessary property in their designs. Lasp and BloomL in particular require the use of monotone functions as primitives of program composition.</p>\n\n<p>Thus if a user would like to make use of such a language for concurrent and distributed programming, they&rsquo;re required to write monotonic program functions, which can actually be quite tricky, in order to get the consistency or determinism guarantees that the given language/abstraction was designed to provide.</p>\n\n<p>To get a better idea of how monotonicity might be important in the context of data replicated over a distributed system, let&rsquo;s look at an example. Suppose we need a function to determine whether a replicated counter&rsquo;s current value is odd or even, and further suppose that this counter can only be incremented. To accomplish this, we might apply the following function to the counter&rsquo;s value:</p>\n\n<pre><code>fun IsOdd(x : Nat) = x % 2 == 1</code></pre>\n\n<p>However, the counter replica from which the argument x is obtained may not currently have an up-to-date count of the total number of increments performed in the entire system. We can&rsquo;t rule out the possibility that exactly one remote increment has been performed, in which case IsOdd produces the wrong answer. With this in mind, the value returned by IsOdd does not seem to tell us anything useful. In contrast, consider an application of the following function to the same replicated counter.</p>\n\n<pre><code>fun MoreThanTen(x : Nat) = x &gt; 10</code></pre>\n\n<p>The boolean values \\(true\\) and \\(false\\) form one of the simplest partially ordered sets of all. We consider \\(false \\leq false\\), \\(false \\leq true \\), and \\( true \\leq true \\). Under this ordering, the MoreThanTen function is monotone: an increase in x can cause the value of \\(x &gt; 10\\) to flip from false to true, but not vice versa. When we observe that the local counter replica P&rsquo;s value is greater than 10, we don&rsquo;t know that the same observation would be drawn from remote replicas. Nonetheless, we assume that all replicas in the system will eventually become aware of all increments that P is currently aware of, at which point their values will be greater than P&rsquo;s current value. This is where MoreThanTen&rsquo;s monotonicity becomes useful. At the point when all replicas have received P&rsquo;s current information, every replica in the system will agree that MoreThanTen applied to the counter&rsquo;s value returns true.</p>\n\n<p>We believe that a type system for proving functions monotone could push the development of coordination-free distributed and concurrent applications outside of the realm of distributed systems experts, by enabling customization and extension of such systems by non-experts.</p>\n\n<p>Towards this aim, we have been designing a typed lambda calculus in which types track monotonicity. Our approach allows the programmer to write a special kind of function definition, called an <em>sfun</em>, the body of which is type checked using a richer type system, one which reasons about function composition rather than application. Such a function can be proven monotone by utilizing, among other principles, the fact that the composition of two monotone functions is itself monotone. Monotonicity is a relational property; that is, its a property involving multiple applications of the same function. Such properties are blind spot for traditional type systems, so our design requires some unusual and interesting features.</p>\n\n<p>Reasoning about pointwise orderings on function spaces seems a bit heavy-weight and hasn’t been necessary for any of my use cases. An sfun is therefore first order; that is, both its return type and all of its argument types must be data types rather than function types. We would like to be able to prove that a multi-argument function is monotone <em>separately</em> in each of its arguments; that is, for \\(i \\in 1..n\\), if \\(p_i \\leq p_i'\\) then \\(f(p_1, \\ldots, p_i, \\ldots, p_n) \\leq f(p_1, \\ldots p_i', \\ldots p_n)\\).</p>\n\n<p>The monotonicity of an sfun is typically derived from the monotonicity of the primitives used to implement it, which are also sfuns. Here are some example sfun primitives, addition and subtraction on integers:</p>\n\n<p>1.) plus : \\( (x : Int, y : Int) \\Rightarrow Int[\\uparrow x, \\uparrow y] \\)</p>\n\n<p>2.) minus : \\( (x : Int, y : Int) \\Rightarrow Int[\\uparrow x, \\downarrow y] \\)</p>\n\n<p>An <em>sfun type</em>, written with \\(\\Rightarrow\\) rather than \\(\\rightarrow\\), names its formal arguments and also <em>qualifies</em> each one. A qualifier is an argument-specific constraint on the behavior of the function. In the above types, the qualifier \\(\\uparrow\\) is associated with arguments that are separately monotone and \\(\\downarrow\\) is associated with arguments that are separately antitone. The second argument of a binary function \\(f\\) is separately antitone if \\(p_2 \\leq p_2'\\) implies \\(f(p_1, p_2) \\geq f(p_1, p_2')\\).</p>\n\n<p>Terms outside of sfun abstractions are typed using a <em>global</em> typing relation, which, aside from an sfun abstraction typing rule, is not different from the typing relations we are familiar with. A global typing judgment has the following form.</p>\n\n<p>\\( \\Gamma \\vdash t : T \\)</p>\n\n<p>A typing judgment of the lifted type system, used to type check the body of an sfun, has the following form:</p>\n\n<p>\\( \\Gamma;\\Omega;\\Phi \\vdash t : T \\)</p>\n\n<p>Here the <em>global type environment</em> \\( \\Gamma \\) contains all of the variables bound outside of the sfun, the <em>ambient type environment</em> \\( \\Omega \\) contains the list of the sfun’s formal arguments, and the <em>lifted type environment</em> \\( \\Phi \\) contains those variables in \\( t \\)’s context which are bound inside the sfun. Before getting into the significance of lifted typing judgments, let&rsquo;s look at a specific application of the global typing rule for sfun abstractions, which uses a single lifted premise.</p>\n\n<p>$$\\frac{\\Gamma;x:Int;x:Int[=~x] \\vdash plus(x,x) : Int[\\uparrow~x]}  {\\Gamma \\vdash \\tilde{\\lambda} x : Int. plus(x,x) : ( x : Int ) \\Rightarrow Int[\\uparrow~x]}$$</p>\n\n<p>Here we type a single-argument sfun abstraction \\(\\tilde{\\lambda} x:Int. plus(x,x)\\). As you might have guessed, \\(\\tilde{\\lambda}\\) is used rather that \\(\\lambda\\) to distinguish this as an sfun abstraction rather than a standard one. Examine the ambient and lifted type environments used in the premise. Perhaps surprisingly, the abstraction&rsquo;s bound variable \\(x\\) is entered into both environments. When variables occur in types, they are considered references to formal arguments rather than actual arguments; that is, an occurrence of \\(x\\) in a type (for example \\(Int[\\uparrow x]\\)) does not refer to some integer, but instead a &ldquo;slot&rdquo; named \\(x\\) which expects to receive some integer from an external source. Inside the scope of the sfun abstraction, we would like the ability to refer to the abstraction&rsquo;s formal argument \\(x\\), and therefore we add \\(x : Int\\) to the ambient environment. We would also like to include occurrences of \\(x\\) as terms in the body of the abstraction; for these, we add the entry \\(x : Int[=~x]\\) into the lifted type environment, to be used as a placeholder for the actual argument supplied to the formal argument \\(x\\). Because references to formal arguments occur only in types, and references to actual arguments occur only in terms, we can add entries with the same name to both the ambient and lifted environments without creating any ambiguity. In particular, this means that the occurrence of \\(x\\) in Int[\\(\\uparrow x\\)] refers to the entry for \\(x\\) in the ambient type environment rather than the one in the lifted type environment.</p>\n\n<p>The premise of the above rule application includes the strange looking types \\(Int[=~x]\\) and \\(Int[\\uparrow~x]\\). Normally, we would expect occurrences of x, which serve as placeholders for the actual argument of the the function, to have type \\(Int\\), and we would expect our abstraction&rsquo;s body \\(plus(x,x)\\) to have type \\(Int\\) as well. This traditional approach to typing a function abstraction characterizes the operational behavior of a single function <em>after</em> it has been applied. Unfortunately, this isn&rsquo;t adequate for reasoning about properties such as monotonicity, which involve multiple calls to the same function. My approach instead takes the perspective of inside of a function, <em>before</em> it has been applied. Lifted typing then characterizes the structure of a function as the composition of its constituent parts. In the above example, an occurrence of the variable \\(x\\) in the term \\(plus(x,x)\\) has type \\(Int[=~x]\\), meaning that it is a function which takes the value provided to \\(x\\) (the enclosing sfun&rsquo;s formal argument) as an input, and produces that value unchanged as a result. We ultimately care about the input/output relation of this function, and so the concrete values which inhabit this type are set-of-pairs function representations, called <em>ambient maps</em>. The type \\(Int[=~x]\\) happens to be a singleton type, containing the set of pairs \\(\\{ (0,0), (1,1), (-1,-1), (2,2), (-2-2), \\ldots \\}\\).</p>\n\n<p>The sfun application \\(plus(x,x)\\) is viewed as a function composition, where the outputs of the functions represented by the two occurrences of \\(x\\) are forwarded into the left and right arguments of the sfun \\(plus\\). The domain of this composite function matches the domain \\(x:Int\\) of the enclosing sfun, which it inherits from the two occurrences of \\(x\\). Since \\(plus\\) returns an \\(Int\\), so does the composite function \\(plus(x,x)\\). The premise of the above typing rule application tells us that \\(plus(x,x)\\) has type \\(Int[\\uparrow~x]\\), but this premise must be derived. We previously hinted that such a derivation may utilize the fact that the composition of two monotone functions is itself monotone, and indeed that is one aspect of the premise&rsquo;s derivation, but a full treatment is outside the scope of this post.</p>\n\n<p>Since lifted typing is all about function composition, one might wonder how we treat occurrences of \\( \\Gamma \\)&rsquo;s variables within the body of an sfun. Such a variable might have the type \\( Int \\), representing a data value rather than a function. In fact, a piece of data can be viewed as a degenerate, constant-valued function, which produces the same result regardless of which actual arguments any particular sfun is applied to. Subtyping rules enable the flexible use of terminal variables within the body of an sfun, permitting a variable of type \\( Int \\), for example, to occur in a context where terms of type \\( Int[ \\uparrow x ] \\) are expected. A constant function \\(f\\), after all, is monotone: \\( v_1 \\leq v_2 \\) implies \\( f(v_1) = c \\leq c = f(v_2) \\).</p>\n\n<p>We&rsquo;re not building lifted typing derivations just for fun. Typically, a type system comes with a soundness theorem stating that whenever a typing judgment of the form \\( \\Gamma \\vdash t : T \\) is derivable, the execution of the term \\(t\\) (a program) under some well-defined model of computation (typically defined along with the type system) satisfies some desirable property. In our system, a terminal typing derivation \\( \\Gamma \\vdash t : T \\) implies that when the free variables of t are substituted with appropriately-typed values, the execution of the term \\( t \\) is guaranteed to terminate, producing a value of type \\(T\\) as its result. This is not a terribly unusual soundness guarantee. However, to provide semantics for lifted typing judgments, we introduced a new reduction relation (or &ldquo;computation model&rdquo;) which can be viewed in one of two ways:</p>\n\n<ol>\n <li>The simultaneous reduction of an sfun, under terminal reduction, when applied to all sets of arguments in its domain.</li>\n <li>The composition of an sfun&rsquo;s components, before the sfun is ever applied.</li></ol>\n\n<p>Point 1 is essentially the motivation for having lifted typing and lifted reduction in the first place. We want to know how the sfun behaves under terminal reduction, across multiple applications&mdash;specifically two applications in the case of monotonicity. If the lifted reduction of an sfun&rsquo;s body faithfully simulates the terminal reduction of all possible applications simultaneously, then the body of a well-typed sfun should normalize to an ambient map that is extensionally equivalent to the sfun&rsquo;s applicative behavior under terminal reduction. Therefore, if our soundness theorem guarantees that the derivability of \\( \\cdot;x:Int;x:Int[=~x] \\vdash plus(x,x) : Int[\\uparrow~x] \\) implies that \\( plus(\\{ (0,0), (1,1), \\ldots \\},\\{ (0,0), (1,1), \\ldots \\} ) \\) normalizes under lifted reduction to a monotone ambient map, we then know that the sfun \\( \\tilde{\\lambda} x : Int. plus(x,x) \\) behaves monotonically under terminal reduction. It&rsquo;s important to note that our model never requires us to actually perform lifted reduction; lifted reduction matters because not because we actual want to perform it, but instead because lifted typing derivations guarantee the existence of certain lifted reduction sequences which have implications for terminal reduction.</p>\n\n<p>Point 2 inspires our lifted type system. If an sfun is composed of monotone functions, we can use facts about preservation of monotonicity across function composition to prove the sfun itself monotone. The difference between terminal reduction and lifted reduction is demonstrated by the two mathematical expressions \\( f(g(v)) \\) and \\( (f \\circ g) (v) \\).  The expression \\( f(g(v)) \\) presents function composition as viewed by a standard type systems: to apply the composition of \\(f\\) and \\(g\\) to a value \\(v\\), we first apply \\(g\\) to \\(v\\), and then apply \\(f\\) to the result. This isn&rsquo;t wrong, but if \\( f \\) and \\( g \\) are both monotone, the monotonicity of the composite function as a whole becomes self-evident if we first perform the &ldquo;lifted reduction step&rdquo; \\( f(g(v)) \\to (f \\circ g) (v) \\).</p>\n\n<p>We&rsquo;ll leave you with an aspirational example, which demonstrates the need for a type system, rather than a more monolithic form of analysis, for proving functions monotone. Recall our replicated counter example from the introduction. It isn&rsquo;t sufficient to store this counter as an integer. The problem is that replicas cannot synchronize properly without knowing which how many increments were performed at each replica. Suppose that replicas X and Y each start with a count of zero. The following actions are then performed:</p>\n\n<ol>\n <li>X increments, resulting in a count of 1</li>\n <li>X sends a synchronization message to Y, containing X&rsquo;s count 1</li>\n <li>X receives a synchronization message from Y containing a count of 1</li></ol>\n\n<p>At stage 3, X does not know if the received message was sent from Y before or after Y received the synchronization message from stage 2. Replica X therefore does not know whether to set its count to 1 or 2. To avoid this problem, a replicated counter is commonly represented as a map, which maps each replica identifier (a natural number) to the number of increments that replica has performed (also a natural number). It is assumed that any replica id not contained in the map&rsquo;s finite representation maps to 0. Such counters are called GCounters, and described in detail by [<a href=\"#ref3\">Shapiro et al. (2011)</a>].</p>\n\n<p>GCounters are partially ordered componentwise. We write \\( v[a] \\) for the natural number to which the GCounter \\(v\\) maps the replica identifier \\(a\\), and we write \\( \\leq \\) for the standard ordering on natural numbers. The partial order \\( \\leq' \\) on GCounters is then defined such that \\( v \\leq' w \\) whenever for all replica identifiers \\(a\\) we have \\( v[a] \\leq w[a] \\).</p>\n\n<p>[<a href=\"#ref1\">Meiklejohn et al. (2015)</a>] motivates combinators for replicated data types such as the GCounter, but requires that such combinators are monotone separately in each argument. Below is psuedocode for a monotone GCounter addition combinator, annotated with monotonicity types. NatMap is used as the type of maps from natural numbers to natural numbers. Several primitives are defined for working with NatMap. getAt retrieves the kth element of a NatMap m. joinAt returns a new NatMap which is equal to the argument m, except that it maps k to the maximum of m[k] and n. span returns the greatest key mapping to a non-zero value. emptyMap is a NatMap which maps every natural number to 0. + and &gt; are standard arithmetic operators for working with natural numbers.</p>\n\n<pre><code>getAt :: (m : NatMap, k : Nat) ⇒ Nat[↑ m, ? k]\njoinAt :: (m : NatMap, k : Nat, n : Nat) ⇒ NatMap[↑ m, ? k, ↑ n]\nspan :: (m:NatMap) ⇒ Nat[↑ m]\nmax :: (a : Nat, b : Nat) ⇒ Nat[↑ a, ↑ b]\nemptyMap :: NatMap\n+ :: (x:Nat, y:Nat) ⇒ Nat[↑ x, ↑ y]\n&gt; :: (x:Nat, y:Nat) ⇒ Bool[↑ x, ↓ y]\n\ntype GCounter = { map : NatMap }\n\nsfun sumCounters(x : GCounter, y : GCounter) \n : GCounter[↑ x, ↑ y] =\n let xMap : NatMap[↑ x, ↑ y] = x.map\n let yMap : NatMap[↑ x, ↑ y] = y.map\n let maxSpan : Nat[↑ x, ↑ y] = max (span xMap) (span yMap)\n fun sumCell(k : Nat, acc : NatMap[↑ x, ↑ y]) \n  : NatMap[↑ x, ↑ y] =\n  let cond : Bool[↑ x, ↓ y] = k &gt; maxSpan\n   if cond then\n    acc\n   else\n    let acc' = joinAt acc k ((getAt xMap k) + (getAt yMap k))\n    sumCell (k+1) acc'\n let initMap : IntArray[↑ x, ↑ y] = emptyMap\n GCounter { map = sumCell 0 initMap }</code></pre>\n\n<p>While our system can handle much of this example, it can&rsquo;t handle everything yet, for several reasons. First, it involves an if condition which depends on the arguments of the enclosing sfun. To handle this, we would need to incorporate the notion of domain restriction into lifted reduction. Second, it involves recursion. This is problematic for us, because our system utilizes the fact that all well-typed programs terminate. We could partially address this by adding terminating fixpoint combinators, which allow recursion given some well-founded termination metric, as in [<a href=\"#ref5\">Vazou et al. (2014)</a>]. However, that would not be adequate for this particular function. Since it could require arbitrarily many levels of recursion depending on which values are supplied as arguments, lifted reduction, which simulates an application to all arguments simultaneously, would diverge.</p>\n\n<p>So there&rsquo;s still much to do! If you&rsquo;re interested in more details behind the type system, have a look at Kevin&rsquo;s blog article, <a href=\"https://kevinclancy.github.io/2017/11/09/monotonicity-through-types.html\">Monotonicity Through Types</a>, or have a look at the full <a href=\"https://infoscience.epfl.ch/record/231867\">Monotonicity Types</a> preprint for more.</p>\n\n<h3 id=\"references\">References</h3>\n\n<p><span id=\"ref1\">C. Meiklejohn and P. Van Roy. <em>Lasp: A language for distributed, coordination-free programming.</em> In Proceedings of the 17th International Symposium on Principles and Practice of Declarative Programming, PPDP ’15, pages 184–195, New York, NY, USA, 2015. ACM.</span></p>\n\n<p><span id=\"ref2\">N. Conway, W. R. Marczak, P. Alvaro, J. M. Hellerstein, and D. Maier. <em>Logic and lattices for distributed programming</em>. In Proceedings of the Third ACM Symposium on Cloud Computing, SoCC ’12, pages 1:1–1:14, New York, NY, USA, 2012. ACM.</span></p>\n\n<p><span id=\"ref3\">M. Shapiro, N. Preguiça, C. Baquero, and M. Zawirski. <em>Conflict-Free replicated data types</em>. In Stabilization, Safety, and Security of Distributed Systems, Lecture Notes in Computer Science, pages 386–400. Springer, Berlin, Heidelberg, Oct. 2011.</span></p>\n\n<p><span class=\"ref4\">L. Kuper and R. R. Newton. <em>LVars: Lattice-based data structures for deterministic parallelism</em>. In Proceedings of the 2nd ACM SIGPLAN Workshop on Functional High-performance Computing, FHPC ’13, pages 71–84, New York, NY, USA, 2013. ACM.</span></p>\n\n<p><span class=\"ref5\">N. Vazou, E. L. Seidel, R. Jhala, D. Vytiniotis, and S. Peyton-Jones. <em>Refinement types for Haskell</em>. SIGPLAN Not. 49, 9 (August 2014), 269&ndash;282.</span></p>")) ((? . 85) f post (u . "Type-Directed Compilation, Parts I and II") (? . 85) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/04/17/type-directed-compilation-parts-i-and-ii/index.html" . unix) (u . "/blog/2017/04/17/type-directed-compilation-parts-i-and-ii/") (u . "2017-04-17T12:00:17") (? . 15) (? . 84) (c (u . "HOPL") c (u . "Author: Leif Andersen") c (u . "Author: William J. Bowman")) (? . 5) #t (u . "<!-- more-->\n\n<h3 id=\"part-i-type-directed-compilation-by-leif-andersen\">Part I: <em>Type-Directed Compilation</em>, by Leif Andersen.</h3>\n\n<p>In this talk we discuss the history of type directed compilation. We start with Xavier Leroy&rsquo;s seminal paper: <a href=\"http://gallium.inria.fr/~xleroy/publi/unboxed-polymorphism.pdf\"><em>Unboxed Objects and Polymorphic Typing</em></a>, continue to <a href=\"https://www.cs.cmu.edu/~rwh/papers/til/pldi96.pdf\">TIL</a> (Typed Intermediate Language), and finish up with <a href=\"https://dash.harvard.edu/handle/1/2797451\">TAL</a> (Typed Assembly Language). We talk about what it means for a compiler to be typed preserving, and give examples of optimizations that are enabled by types.</p>\n\n<p>Discussion summary:</p>\n\n<ul>\n <li><a href=\"https://github.com/nuprl/hopl-s2017/blob/master/lecture_notes/2017-03-24.md\">https://github.com/nuprl/hopl-s2017/blob/master/lecture_notes/2017&ndash;03&ndash;24.md</a></li></ul>\n\n<h3 id=\"part-ii-dependent-type-directed-compilation-by-william-j-bowman\">Part II: <em>Dependent Type-Directed Compilation</em>, by William J. Bowman</h3>\n\n<p>A certifying compiler is not verified, but it produces a proof of correctness for each binary. This proof can be independently checked to show that the binary was compiled correctly, removing the compiler from the trusted code base. Certifying compilation has its roots in preserving type-preserving compilation, and in particular in preserving dependent types. We start the history of dependent-type-preserving compilation with a compiler from C to Assembly. We&rsquo;ll see a result showing that preserving dependent types isn&rsquo;t possible, and then we&rsquo;ll do it anyway.</p>\n\n<p>Discussion summary:</p>\n\n<ul>\n <li><a href=\"https://github.com/nuprl/hopl-s2017/blob/master/lecture_notes/2017-03-28.md\">https://github.com/nuprl/hopl-s2017/blob/master/lecture_notes/2017&ndash;03&ndash;28.md</a></li></ul>\n\n<p>Notes (to appear here, eventually):</p>\n\n<ul>\n <li><a href=\"https://github.com/nuprl/hopl-s2017/blob/master/dependent-type-preserving-compilation\">https://github.com/nuprl/hopl-s2017/blob/master/dependent-type-preserving-compilation</a></li></ul>")) ((? . 86) f post (u . "PRL at SNAPL'17") (? . 86) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/04/25/prl-at-snapl-17/index.html" . unix) (u . "/blog/2017/04/25/prl-at-snapl-17/") (u . "2017-04-25T16:46:54") (? . 84) (? . 87) (c (u . "Author: Gabriel Scherer")) (u . "\n<p>PRL recently produced three papers for the <a href=\"http://snapl.org/2017/index.html\">SNAPL</a> conference.</p>\n\n<ul>\n <li><a href=\"https://dbp.io/pubs/2017/linking-types-snapl.pdf\">Linking Types for Multi-Language Software: Have Your Cake and Eat  It Too</a>, by Daniel  Patterson and Amal Ahmed.</li>\n <li><a href=\"http://www.ccs.neu.edu/home/gasche/research/canonical-forms/snapl.pdf\">Search for Program Structure</a>,  by Gabriel Scherer</li>\n <li><a href=\"http://www.ccs.neu.edu/racket/pubs/typed-racket.pdf\">Migratory Typing: Ten Years  Later</a>, by Sam  Tobin-Hochstadt, Matthias Felleisen, Robert Bruce Findler, Matthew  Flatt, Ben Greenman, Andrew M. Kent, Vincent St-Amour, T. Stephen  Strickland and Asumu Takikawa</li></ul>") #t (u . "\n<p>PRL recently produced three papers for the <a href=\"http://snapl.org/2017/index.html\">SNAPL</a> conference.</p>\n\n<ul>\n <li><a href=\"https://dbp.io/pubs/2017/linking-types-snapl.pdf\">Linking Types for Multi-Language Software: Have Your Cake and Eat  It Too</a>, by Daniel  Patterson and Amal Ahmed.</li>\n <li><a href=\"http://www.ccs.neu.edu/home/gasche/research/canonical-forms/snapl.pdf\">Search for Program Structure</a>,  by Gabriel Scherer</li>\n <li><a href=\"http://www.ccs.neu.edu/racket/pubs/typed-racket.pdf\">Migratory Typing: Ten Years  Later</a>, by Sam  Tobin-Hochstadt, Matthias Felleisen, Robert Bruce Findler, Matthew  Flatt, Ben Greenman, Andrew M. Kent, Vincent St-Amour, T. Stephen  Strickland and Asumu Takikawa</li></ul>\n<!-- more-->\n\n<h3 id=\"httpsdbpiopubs2017linking-types-snaplpdflinking-types-for-multi-language-software-have-your-cake-and-eat--it-too\"><a href=\"https://dbp.io/pubs/2017/linking-types-snapl.pdf\">Linking Types for Multi-Language Software: Have Your Cake and Eat  It Too</a></h3>\n\n<p>Daniel Patterson and Amal Ahmed, 2017</p>\n\n<blockquote>\n <p>Software developers compose systems from components written in many different languages. A business-logic component may be written in Java or OCaml, a resource-intensive component in C or Rust, and a high-assurance component in Coq. In this multi-language world, program execution sends values from one linguistic context to another. This boundary-crossing exposes values to contexts with unforeseen behavior—that is, behavior that could not arise in the source language of the value. For example, a Rust function may end up being applied in an ML context that violates the memory usage policy enforced by Rust’s type system. This leads to the question of how developers ought to reason about code in such a multi-language world where behavior inexpressible in one language is easily realized in another.</p>\n <p>This paper proposes the novel idea of linking types to address the problem of reasoning about single-language components in a multi-lingual setting. Specifically, linking types allow programmers to annotate where in a program they can link with components inexpressible in their unadulterated language. This enables developers to reason about (behavioral) equality using only their own language and the annotations, even though their code may be linked with code written in a language with more expressive power.</p></blockquote>\n\n<h3 id=\"httpwwwccsneueduhomegascheresearchcanonical-formssnaplpdfsearch-for-program-structure\"><a href=\"http://www.ccs.neu.edu/home/gasche/research/canonical-forms/snapl.pdf\">Search for Program Structure</a></h3>\n\n<p>Gabriel Scherer, 2017.</p>\n\n<blockquote>\n <p>The community of programming language research loves the Curry-Howard correspondence between proofs and programs. Cut-elimination as computation, theorems for free, &lsquo;call/cc&rsquo; as excluded middle, dependently typed languages as proof assistants, etc.</p>\n <p>Yet we have, for all these years, missed an obvious observation: &ldquo;the structure of <em>programs</em> corresponds to the structure of proof <em>search</em>&rdquo;. For pure programs and intuitionistic logic, more is known about the latter than the former. We think we know what programs are, but logicians know better!</p>\n <p>To motivate the study of proof search for program structure, we retrace recent research on applying the logical technique of focusing to study the canonical structure of simply-typed λ-terms. We then motivate the open problem of extending canonical forms to support richer type systems, such as polymorphism, by discussing a few enticing applications of more canonical program representations.</p></blockquote>\n\n<h3 id=\"httpwwwccsneueduracketpubstyped-racketpdfmigratory-typing-ten-years-later\"><a href=\"http://www.ccs.neu.edu/racket/pubs/typed-racket.pdf\">Migratory Typing: Ten Years Later</a></h3>\n\n<p>Sam Tobin-Hochstadt, Matthias Felleisen, Robert Bruce Findler, Matthew Flatt, Ben Greenman, Andrew M. Kent, Vincent St-Amour, T. Stephen Strickland and Asumu Takikawa, 2017.</p>\n\n<blockquote>\n <p>In this day and age, many developers work on large, untyped code repositories. Even if they are the creators of the code, they notice that they have to figure out the equivalent of method signatures every time they work on old code. This step is time consuming and error prone.</p>\n <p>Ten years ago, the two lead authors outlined a linguistic solution to this problem. Specifically they proposed the creation of typed twins for untyped programming languages so that developers could migrate scripts from the untyped world to a typed one in an incremental manner. Their programmatic paper also spelled out three guiding design principles concerning the acceptance of grown idioms, the soundness of mixed-typed programs, and the units of migration.</p>\n <p>This paper revisits this idea of a migratory type system as implemented for Racket. It explains how the design principles have been used to produce the Typed Racket twin and presents an assessment of the project’s status, highlighting successes and failures.</p></blockquote>\n\n<p>.</p>\n\n<p>SNAPL is not dissimilar to the (french-speaking) <a href=\"http://jfla.inria.fr/\">JFLA</a> that I am more familiar with &mdash; with an added irritating call for paper and unreasonable registration price. It has an interesting diversity of topics of presentation: see also the complete <a href=\"http://snapl.org/2017/papers.html\">list of accepted papers</a> this year, and the <a href=\"http://snapl.org/2015/papers.html\">list of the previous edition</a>.</p>")) ((? . 32) f post (u . "[Conversational Concurrency (cross-post)](https://eighty-twenty.org/2018/01/24/conversational-concurrency)") (? . 32) 1731904015 (p+ #"/home/runner/work/website/website/blog/2019/05/11/-conversational-concurrency-cross-post-https-eighty-twenty-org-2018-01-24-conversational-concurrency/index.html" . unix) (u . "/blog/2019/05/11/-conversational-concurrency-cross-post-https-eighty-twenty-org-2018-01-24-conversational-concurrency/") (u . "2019-05-11T00:03:16") (? . 31) (? . 11) (c (u . "dissertation") c (u . "Author: Tony Garnock-Jones")) (? . 5) #f (? . 5)) ((? . 87) f post (u . "What is Soft Typing?") (? . 87) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/04/28/what-is-soft-typing/index.html" . unix) (u . "/blog/2017/04/28/what-is-soft-typing/") (u . "2017-04-28T12:25:17") (? . 86) (? . 12) (c (u . "HOPL") c (u . "Author: Ben Greenman")) (? . 5) #t (u . "<!-- more-->\n\n<p>A soft type system rewrites programs and meets a few <em>design criteria</em>.</p>\n\n<hr />\n\n<h2 id=\"what-are-the-design-criteria\">What are the Design Criteria?</h2>\n\n<p>According to Mike Fagan&rsquo;s 1991 <a href=\"https://github.com/nuprl/hopl-s2017/tree/master/soft-typing/papers\">dissertation</a>,  a soft type system must:</p>\n\n<ul>\n <li>accept all <em>syntactically correct</em> programs as input;</li>\n <li>produce equivalent, <em>memory-safe</em> programs as output; and</li>\n <li>be <em>unobtrusive</em></li></ul>\n\n<h3 id=\"important-details\">Important details:</h3>\n\n<ul>\n <li>In this context, <em>memory safe</em> basically means &ldquo;no segfaults&rdquo;.  Programs output by a soft type system should be as safe as statically-typed  Java programs or dynamically-typed Python programs.</li>\n <li>Fagan characterizes <em>unobtrusive</em> with two general principles:</li>\n <li><em>minimal text principle</em> : the type checker should work without any programmer-supplied annotations</li>\n <li><em>minimal failure principle</em> : the type checker should assign <em>useful</em> types to <em>idiomatic</em> programs  (basically, don&rsquo;t just say that every expression has &ldquo;unknown&rdquo; or &ldquo;top&rdquo; type)</li></ul>\n\n<h2 id=\"why-would-i-want-to-use-a-soft-type-system\">Why would I want to use a soft type system?</h2>\n\n<p>If you:</p>\n\n<ul>\n <li>like dynamic typing</li>\n <li>want some <em>benefits</em> of static typing</li>\n <li>refuse to (or <em>cannot</em>!) change your code to satisfy a type checker</li></ul>\n\n<p>then Soft Typing is a perfect fit. You just need to find/build a soft type checker.</p>\n\n<h3 id=\"clarification\">Clarification</h3>\n\n<p>The <em>benefits</em> of static typing that a soft type system can give are:</p>\n\n<ul>\n <li>early detection of typos and simple logical errors</li>\n <li>documentation, through (inferred) type signatures</li>\n <li>speed, when the types can justify removing a runtime safety check</li></ul>\n\n<p>See Andrew Wright&rsquo;s 1994 <a href=\"https://github.com/nuprl/hopl-s2017/tree/master/soft-typing/papers\">dissertation</a> for proof.</p>\n\n<h2 id=\"can-i-use-andrew-wrights-soft-type-system\">Can I use Andrew Wright&rsquo;s soft type system?</h2>\n\n<p>Not sure, but you may download the code for it:</p>\n\n<ul>\n <li><a href=\"https://github.com/nuprl/softscheme\">https://github.com/nuprl/softscheme</a></li></ul>\n\n<h2 id=\"please-explain-fagans--wrights-soft-types\">Please explain Fagan&rsquo;s / Wright&rsquo;s soft types</h2>\n\n<p>Types <code>t</code> are made of constructors <code>k</code>, flags <code>f</code>, and type variables <code>a</code>. The grammar for types is basically:</p>\n\n<pre><code>  t ::= a | (k f t ...) U t\n  k ::= Int | Pair | -&gt;\n  f ::= ++ | -- | b\n  a ::= a0 | a1 | a2 | a3 | ....\n  b ::= b0 | b1 | b2 | b3 | ....</code></pre>\n\n<p>where:</p>\n\n<ul>\n <li><code>U</code> is just a symbol, represents &ldquo;union&rdquo;</li>\n <li><code>a</code> is a type variable; there are infinitely many type variables</li>\n <li><code>b</code> is a flag variable; the set of flag variables is also infinte</li></ul>\n\n<p>There are also some rules for types to be well-formed.</p>\n\n<p>Here are two well-formed types:</p>\n\n<pre><code>(Int ++) U a0\n\n(-&gt; ++ ((Int b0) U a1)\n       ((Int ++) U a2)) U a3</code></pre>\n\n<p>Here are two types that match the grammar, but are <strong>NOT</strong> well-formed:</p>\n\n<pre><code>(Int ++ a0) U a1\n\n(-&gt; --) U a2</code></pre>\n\n<p>Finally, some intuition:</p>\n\n<ul>\n <li>A constructor <code>k</code> is like a behavior,</li>\n <li>a type <em>describes</em> the behaviors a value can have.</li>\n <li>The description is like a bitvector of &ldquo;yes&rdquo;, &ldquo;no&rdquo;, or &ldquo;maybe&rdquo; for each possible behavior.</li>\n <li>A flag variable is the way to say &ldquo;maybe&rdquo;.</li>\n <li>Every type ends with a type variable because every typed expression might  flow to a context that expects a more general type.</li></ul>\n\n<p>The type and flag variables let Fagan and Wright encode subtyping using  polymorphism. It&rsquo;s a very cool idea, introduced in Didier Remy&rsquo;s  <a href=\"https://github.com/nuprl/hopl-s2017/tree/master/soft-typing/papers\">POPL 1989 paper</a>. But it adds a learning curve, and has some drawbacks for type inference.</p>\n\n<h2 id=\"stream-of-consciousness-notes-from-the-hopl-lecture\">Stream-of-consciousness notes from the HOPL lecture</h2>\n\n<ul>\n <li><a href=\"/blog/static/soft-typing.pdf\">Local copy</a></li>\n <li><a href=\"https://github.com/nuprl/hopl-s2017/tree/master/soft-typing\">Source of Truth</a></li></ul>")) ((? . 23) f post (u . "No Good Answers, Gradually Typed Object-Oriented Languages") (? . 23) 1731904015 (p+ #"/home/runner/work/website/website/blog/2017/05/09/no-good-answers-gradually-typed-object-oriented-languages/index.html" . unix) (u . "/blog/2017/05/09/no-good-answers-gradually-typed-object-oriented-languages/") (u . "2017-05-09T14:04:31") (? . 3) (? . 22) (c (u . "HOPL") c (u . "Gradual Typing") c (u . "Author: Ben Chung")) (? . 5) #t (u . "<!-- more-->\n\n<p>Untyped code remains a real problem in practice, as a result of reduced performance and hindered readability. One approach to solve this problem is gradual typing.</p>\n\n<p>Gradual typing puts the onus on the developer to add type annotations, statically checks whatever type annotations have been written, and dynamically ensures that untyped code does not violate those annotations. A number of approaches have been put forward to try to achieve these objectives while retaining efficiency, semantic meaning, and the ability to actually type untyped code.</p>\n\n<p>I discussed three systems, all of which achieve the objective of typing untyped code in different ways, and all of which have different tradeoffs.</p>\n\n<p>Unofficial Notes:</p>\n\n<ul>\n <li><a href=\"https://github.com/nuprl/hopl-s2017/blob/master/lecture_notes/2017-04-18.md\">https://github.com/nuprl/hopl-s2017/blob/master/lecture_notes/2017-04-18.md</a></li></ul>\n\n<p>Code Examples:</p>\n\n<ul>\n <li><a href=\"https://github.com/BenChung/GradualComparison/tree/master/examples/HOPL\">https://github.com/BenChung/GradualComparison/tree/master/examples/HOPL</a></li></ul>")) ((? . 57) f post (u . "Meaningful Distinctions") (? . 57) 1731904015 (p+ #"/home/runner/work/website/website/blog/2016/10/31/meaningful-distinctions/index.html" . unix) (u . "/blog/2016/10/31/meaningful-distinctions/") (u . "2016-10-31T17:20:33") (? . 55) (? . 13) (c (u . "history") c (u . "constructions") c (u . "Author: Ben Greenman")) (u . "\n<blockquote>\n <p>&ldquo;Meaningful distinctions deserve to be maintained.&rdquo; &mdash; Errett A. Bishop</p></blockquote>\n\n<p>Likewise, memorable quotations deserve to be read in context. In this spirit, I am happy to present the above &ldquo;basic principle&rdquo; in its context:  <a href=\"/img/sicm.pdf\"><em>Schizophrenia in contemporary mathematics</em> (pdf)</a></p>\n\n<p>Read on for a brief summary.</p>") #t (u . "\n<blockquote>\n <p>&ldquo;Meaningful distinctions deserve to be maintained.&rdquo; &mdash; Errett A. Bishop</p></blockquote>\n\n<p>Likewise, memorable quotations deserve to be read in context. In this spirit, I am happy to present the above &ldquo;basic principle&rdquo; in its context:  <a href=\"/img/sicm.pdf\"><em>Schizophrenia in contemporary mathematics</em> (pdf)</a></p>\n\n<p>Read on for a brief summary.</p>\n<!-- more-->\n\n<hr />\n\n<p>I first read the above quotation in <a href=\"http://www.michaelbeeson.com/research/papers/BishopForeword.pdf\">Michael Beeson&rsquo;s introduction</a> to the 2012 edition of Bishop&rsquo;s <a href=\"https://www.amazon.com/Foundations-Constructive-Analysis-Errett-Bishop/dp/4871877140\"><em>Foundations of Constructive Analysis</em></a>. That was two years ago.</p>\n\n<p>Last month, I tried to find its context. <a href=\"https://books.google.com/books?id=uPx8tGCaxzUC&amp;pg=PA214&amp;lpg=PA214&amp;dq=meaningful+distinctions+deserve+to+be+maintained&amp;source=bl&amp;ots=cWjwOTnNuT&amp;sig=wN143wNyfXtMFLGABBQM-22aSOQ&amp;hl=en&amp;sa=X&amp;ved=0ahUKEwjPwt2HmYbQAhWE6IMKHU5rB8YQ6AEIHjAA#v=onepage&amp;q=meaningful%20distinctions%20deserve%20to%20be%20maintained&amp;f=false\">Many</a> <a href=\"https://www.jstor.org/stable/2589553\">other</a> <a href=\"https://books.google.com/books?id=J4DkBwAAQBAJ&amp;pg=PA6&amp;lpg=PA6&amp;dq=meaningful+distinctions+deserve+to+be+maintained&amp;source=bl&amp;ots=KYkrkBrJd_&amp;sig=AAK1A_uIkQlVcYCY1TFljfA3CqA&amp;hl=en&amp;sa=X&amp;ved=0ahUKEwjPwt2HmYbQAhWE6IMKHU5rB8YQ6AEIJTAC#v=onepage&amp;q=meaningful%20distinctions%20deserve%20to%20be%20maintained&amp;f=false\">uses</a> <a href=\"https://books.google.com/books?id=oN5nsPkXhhsC&amp;pg=PR6&amp;lpg=PR6&amp;dq=meaningful+distinctions+deserve+to+be+maintained&amp;source=bl&amp;ots=4doTufVdsy&amp;sig=u3e_Z_xdN-tjt9p1eqQ88juA5Ns&amp;hl=en&amp;sa=X&amp;ved=0ahUKEwjPwt2HmYbQAhWE6IMKHU5rB8YQ6AEIKDAD#v=onepage&amp;q=meaningful%20distinctions%20deserve%20to%20be%20maintained&amp;f=false\">of</a> <a href=\"https://books.google.com/books?id=GR44SKXCZJsC&amp;pg=RA1-PA199&amp;lpg=RA1-PA199&amp;dq=meaningful+distinctions+deserve+to+be+maintained&amp;source=bl&amp;ots=lNpzR5QV7h&amp;sig=IGg2Q_KtreSAhrbSJxsV7mQ8xok&amp;hl=en&amp;sa=X&amp;ved=0ahUKEwjPwt2HmYbQAhWE6IMKHU5rB8YQ6AEIMDAF#v=onepage&amp;q=meaningful%20distinctions%20deserve%20to%20be%20maintained&amp;f=false\">the</a> <a href=\"http://www.math.canterbury.ac.nz/php/groups/cm/faq/\">quote</a> <a href=\"http://www.ben-sherman.net/aux/evident-logic.pdf\">cited</a> a <em>Schizophrenia in comtemporary mathematics</em>, but I could not find an electronic copy. (It turns out, the AMS Bookstore page for <a href=\"http://bookstore.ams.org/conm-39\"><em>Erret Bishop: Reflections on Him and His Research</em></a> includes a facsimile.)</p>\n\n<p>Lest anyone else be tempted to conjure the ancient magic of inter-library loan, here is a scan of the pages I borrowed. Thanks to the University of Toledo for supplying the hard copy.</p>\n\n<blockquote>\n <p> <a href=\"/img/sicm.pdf\">prl.ccs.neu.edu/img/sicm.pdf</a></p></blockquote>\n\n<p>The document is Bishop&rsquo;s &ldquo;feeling for the philosophical issues involved&rdquo; in constructive mathematics. First, Bishop lists &ldquo;schizophrenic attributes&rdquo; (trouble spots) of contemporary mathematics. Next, he gives basic principles of constructivism and Brouwer&rsquo;s interpretation of the logical quantifiers. Along the way, and as a source of examples, Bishop describes integers, sets, and real numbers. The emphasis is always on common-sense meaning and finite constructions.</p>\n\n<p>After a brief summary and reflection, the last ten pages list recent advances in constructive mathematics and upcoming tasks. The open tasks are particularly interesting:</p>\n\n<ul>\n <li>systematically develop (constructive) algebra</li>\n <li>give a constructive foundation for general topology</li>\n <li>engage with the deeper &ldquo;meaning of mathematics&rdquo;</li></ul>\n\n<p>The popular quote on &ldquo;Meaningful Distinctions&rdquo; appears early in the paper, as one of Bishop&rsquo;s four principles that &ldquo;stand out as basic&rdquo; to the philosophy of constructivism:</p>\n\n<blockquote>\n <p>A. Mathematics is common sense.</p>\n <p>B. Do not ask whether a statement is true until you know what it means.</p>\n <p>C. A proof is any completely convincing argument.</p>\n <p>D. Meaningful distinctions deserve to be maintained.</p></blockquote>\n\n<p>I had no idea that D was &ldquo;a principle&rdquo;, or that it had three siblings.</p>\n\n<p>To further tempt you into reading the whole truth, here are some of my favorite phrases:</p>\n\n<blockquote>\n <ul>\n  <li>One suspects that the majority of pure mathematicians &hellip; ignore as much content as they possibly can.</li>\n  <li>We have geared ourselves to producing research mathematicians who will begin to write papers as soon as possible.  This anti-social and anti-intellectual process defeats even its own narrow ends.</li>\n  <li>&hellip; truth is not a source of trouble to the constructivist, because of his emphasis on meaning.</li>\n  <li>&hellip; guided primarily by considerations of content rather than elegance and formal attractiveness &hellip;</li>\n  <li>Let me tell you what a smart sequence will do.</li>\n  <li>Classical mathematics fails to observe meaningful distinctions having to do with integers.</li>\n  <li>Constructive mathematics does not postulate a pre-existent universe, with objects lying around waiting to be collected and grouped into sets, like shells on a beach.</li>\n  <li>It might be worthwhile to investigate the possibility that constructive mathematics would afford a solid philosophical basis for the theory of computation &hellip;</li>\n  <li>&hellip; if the product of two real numbers is 0, we are not entitled to conclude that one of them is 0.</li>\n  <li>It is fair to say that almost nobody finds his proof intelligible.</li>\n  <li>Mathematics is such a complicated activity that disagreements are bound to arise.</li>\n  <li>Algebraic topology, at least on the elementary level, should not be too difficult to constructivize.</li>\n  <li>I hope all this accords with your common sense, as it does with mine.</li></ul></blockquote>\n\n<p>Now go find their context!</p>"))))