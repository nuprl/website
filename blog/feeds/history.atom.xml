<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">PRL Blog: Posts tagged 'history'</title>
 <link rel="self" href="http://prl.ccs.neu.edu/blog/feeds/history.atom.xml" />
 <link href="http://prl.ccs.neu.edu/blog/tags/history.html" />
 <id>urn:http-prl-ccs-neu-edu:-blog-tags-history-html</id>
 <updated>2019-09-05T10:00:00Z</updated>
 <entry>
  <title type="text">Lexical and Dynamic Scope</title>
  <link rel="alternate" href="http://prl.ccs.neu.edu/blog/2019/09/05/lexical-and-dynamic-scope/?utm_source=history&amp;utm_medium=Atom" />
  <id>urn:http-prl-ccs-neu-edu:-blog-2019-09-05-lexical-and-dynamic-scope</id>
  <published>2019-09-05T10:00:00Z</published>
  <updated>2019-09-05T10:00:00Z</updated>
  <author>
   <name>Ming-Ho Yee</name></author>
  <content type="html">
&lt;p&gt;This all started with a simple question about the R programming language: &lt;em&gt;is R lexically or dynamically scoped?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To answer that question, we need to understand what &lt;em&gt;scope&lt;/em&gt; is, along with &lt;em&gt;lexical scope&lt;/em&gt; and &lt;em&gt;dynamic scope&lt;/em&gt;.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;In this blog post, I&amp;rsquo;d like to explain the differences between lexical scope and dynamic scope, and also explore some of the history behind those ideas. In a &lt;a href="/blog/2019/09/10/scoping-in-r/"&gt;subsequent post&lt;/a&gt;, I&amp;rsquo;ll discuss scoping in R and why it can be confusing.&lt;/p&gt;

&lt;h2 id="what-is-scope"&gt;What is scope?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Scope&lt;/em&gt; refers to the places in a program where a variable is visible and can be referenced.&lt;/p&gt;

&lt;p&gt;An interesting situation is when a function has free variables. Consider the example below:&lt;/p&gt;

&lt;div class="brush: r"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
  &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;g&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# what does this return?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;On line 1, we create a mapping for &lt;code&gt;x&lt;/code&gt; with value &lt;code&gt;1&lt;/code&gt;. On line 2, we define a function &lt;code&gt;f&lt;/code&gt; whose body uses the parameter &lt;code&gt;a&lt;/code&gt;, but also the free variable &lt;code&gt;x&lt;/code&gt;. On line 3, we define a function &lt;code&gt;g&lt;/code&gt;, whose body creates a new mapping for &lt;code&gt;x&lt;/code&gt; with value &lt;code&gt;2&lt;/code&gt;, and then calls &lt;code&gt;f(0)&lt;/code&gt;. (Note that line 4 does not update the mapping created on line 1.) Finally, on line 7, we call &lt;code&gt;g()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What value does &lt;code&gt;g&lt;/code&gt; return when it is called? What mapping does the free variable &lt;code&gt;x&lt;/code&gt; on line 2 refer to? Does it refer to the mapping on line 1 that was visible when &lt;code&gt;f&lt;/code&gt; was defined? Or does it refer to the mapping on line 4 that was created just before &lt;code&gt;f&lt;/code&gt; was called?&lt;/p&gt;

&lt;h3 id="lexical-scoping"&gt;Lexical scoping&lt;/h3&gt;

&lt;p&gt;Under &lt;em&gt;lexical scoping&lt;/em&gt; (also known as &lt;em&gt;static scoping&lt;/em&gt;), the scope of a variable is determined by the lexical (&lt;em&gt;i.e.&lt;/em&gt;, textual) structure of a program.&lt;/p&gt;

&lt;p&gt;In the example above, the definition of &lt;code&gt;x&lt;/code&gt; on line 1 creates a scope that starts after its definition and extends &lt;em&gt;into&lt;/em&gt; the bodies of &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;. However, the second definition of &lt;code&gt;x&lt;/code&gt; on line 4 creates a new scope that (1) shadows the previous definition of &lt;code&gt;x&lt;/code&gt;, and (2) does not extend into the call &lt;code&gt;f(0)&lt;/code&gt; on line 5. Looking at this from another direction, the use of &lt;code&gt;x&lt;/code&gt; on line 2 is within the scope created by the definition on line 1, and thus refers to that definition.&lt;/p&gt;

&lt;p&gt;Therefore, under lexical scoping, the example program returns &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Most programming languages we use today are lexically scoped. Intuitively, a human (or compiler) can determine the scope of a variable by just examining the source code of a program. In other words, a compiler can determine which &lt;em&gt;definition&lt;/em&gt; each variable refers to&amp;mdash;but it may not be able to determine the &lt;em&gt;values&lt;/em&gt; of each variable.&lt;/p&gt;

&lt;h3 id="dynamic-scoping"&gt;Dynamic scoping&lt;/h3&gt;

&lt;p&gt;Under &lt;em&gt;dynamic scoping&lt;/em&gt;, a variable is bound to the most recent value assigned to that variable, &lt;em&gt;i.e.&lt;/em&gt;, the most recent assignment &lt;em&gt;during the program&amp;rsquo;s execution&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In the example above, the free variable &lt;code&gt;x&lt;/code&gt; in the body of &lt;code&gt;f&lt;/code&gt; is evaluated when &lt;code&gt;f(0)&lt;/code&gt; is called on line 5. At that point (during program execution), the most recent assignment was on line 4.&lt;/p&gt;

&lt;p&gt;Therefore, under dynamic scoping, the example program returns &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Dynamically scoped programming languages include bash, LaTeX, and the original version of Lisp. Emacs Lisp is dynamically scoped, but allows the programmer to select lexical scoping. Conversely, Perl and Common Lisp are lexically scoped by default, but allow the programmer to select dynamic scoping.&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;Edited 2020/08/13:&lt;/strong&gt; As of &lt;a href="https://www.gnu.org/savannah-checkouts/gnu/emacs/news/NEWS.27.1"&gt;Emacs 27.1&lt;/a&gt;, &amp;ldquo;lexical binding is now used by default when evaluating interactive Elisp.&amp;rdquo; Thanks to Artem Pelenitsyn for bringing this to my attention.)&lt;/p&gt;

&lt;h2 id="now-for-a-digression"&gt;Now for a digression&lt;/h2&gt;

&lt;p&gt;These are the definitions I learned from my classes and textbooks, and should be similar to other definitions and explanations you might find online.&lt;/p&gt;

&lt;p&gt;However, it took me many drafts and attempts before arriving at the current version. I had difficulty writing an explanation that I was satisfied with&amp;mdash;a definition that was not circular, did not appeal to some intuition or familiarity, and did not conflate terms. Even some of the resources I consulted had these issues.&lt;sup&gt;&lt;a href="#2019-09-05-lexical-and-dynamic-scope-footnote-1-definition" name="2019-09-05-lexical-and-dynamic-scope-footnote-1-return"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;I am much happier with my current version, but it still bothers me slightly. If lexical scope and dynamic scope are related concepts, then why are the definitions so different? Why does the definition for &lt;em&gt;dynamic scope&lt;/em&gt; not mention scope at all? If &lt;em&gt;scope&lt;/em&gt; is about &amp;ldquo;where a variable is visible,&amp;rdquo; and that definition is with respect to a &lt;em&gt;variable definition&lt;/em&gt;, then why do so many explanations and examples define lexical and dynamic scope in terms of &lt;em&gt;variable use&lt;/em&gt;?&lt;/p&gt;

&lt;h2 id="scope-and-extent"&gt;Scope and Extent&lt;/h2&gt;

&lt;p&gt;I found some answers in Guy Steele&amp;rsquo;s &lt;em&gt;Common Lisp the Language, 2nd Edition&lt;/em&gt;,&lt;sup&gt;&lt;a href="#2019-09-05-lexical-and-dynamic-scope-footnote-2-definition" name="2019-09-05-lexical-and-dynamic-scope-footnote-2-return"&gt;2&lt;/a&gt;&lt;/sup&gt; which Matthias Felleisen recommended to me.&lt;/p&gt;

&lt;p&gt;In chapter 3, Steele introduces the concepts of &lt;em&gt;scope&lt;/em&gt; and &lt;em&gt;extent&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;Scope&lt;/em&gt; refers to the spatial or textual region of the program within which references may occur. &lt;em&gt;Extent&lt;/em&gt; refers to the interval of time during which references may occur.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In addition, there are four interesting cases of scope and extent, with respect to Common Lisp:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;em&gt;Lexical scope&lt;/em&gt;: a reference can only occur within certain textual regions  of the program, which are determined by the establishing construct, &lt;em&gt;e.g.&lt;/em&gt;,  the body of a variable definition.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;em&gt;Indefinite scope&lt;/em&gt;: a reference can occur anywhere in the program.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;em&gt;Dynamic extent&lt;/em&gt;: a reference can occur during the time between an entity&amp;rsquo;s  creation and its explicit destruction, &lt;em&gt;e.g.&lt;/em&gt;, when a local variable is  created upon entering a function and destroyed when returning from that  function.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;em&gt;Indefinite extent&lt;/em&gt;: an entity may exist as long as it is possible to be  referenced. (Note that this is the idea behind garbage collection: an  entity can be destroyed once references to it are impossible.)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Steele points out that &lt;em&gt;dynamic scope&lt;/em&gt; is a misnomer, even though it is both a traditional and useful concept. It can be defined as &lt;em&gt;indefinite scope and dynamic extent&lt;/em&gt;. In other words, references to a variable may occur anywhere in a program, as long as that variable has been initialized and has not yet been explicitly destroyed. Furthermore, a later initialization hides an earlier one.&lt;/p&gt;

&lt;h3 id="discussion"&gt;Discussion&lt;/h3&gt;

&lt;p&gt;I found this approach very informative, because it explicitly distinguishes between space (scope) and time (extent), which further implies a separation between compile time and run time. This explains my unease with the definition of &amp;ldquo;dynamic scope&amp;rdquo;&amp;mdash;it is nominally about textual regions in a program, but also requires consideration of run-time behaviour. Dynamic scope is a misnomer!&lt;/p&gt;

&lt;p&gt;The above definitions are specifically for Common Lisp, but I believe we can learn from them and adapt them for other programming languages.&lt;/p&gt;

&lt;h2 id="a-brief-and-incomplete-history-of-lexical-scope"&gt;A brief and incomplete history of lexical scope&lt;/h2&gt;

&lt;p&gt;During my research of different definitions of lexical scope, I began to wonder if there was an &amp;ldquo;original&amp;rdquo; definition of lexical scope. I did not find one, but I was able to trace some of the connections between Lisp, Scheme, and ALGOL 60. This history is certainly incomplete, but I hope it is somewhat useful and interesting.&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;strong&gt;1960&lt;/strong&gt;. John McCarthy publishes the original paper on Lisp.&lt;sup&gt;&lt;a href="#2019-09-05-lexical-and-dynamic-scope-footnote-3-definition" name="2019-09-05-lexical-and-dynamic-scope-footnote-3-return"&gt;3&lt;/a&gt;&lt;/sup&gt; In  &lt;em&gt;History of Lisp&lt;/em&gt;,&lt;sup&gt;&lt;a href="#2019-09-05-lexical-and-dynamic-scope-footnote-4-definition" name="2019-09-05-lexical-and-dynamic-scope-footnote-4-return"&gt;4&lt;/a&gt;&lt;/sup&gt; McCarthy writes that he borrowed the λ-notation from  Alonzo Church&amp;rsquo;s lambda calculus, but none of the other ideas. He also  recounts an incident where a programmer desired lexical scoping, but Lisp  used dynamic scoping. McCarthy considered this to be a bug, which Steve  Russell later fixed by developing the &amp;ldquo;FUNARG device.&amp;rdquo;&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;strong&gt;1963&lt;/strong&gt;. After a few years of work, the &lt;em&gt;Revised Report on Algorithm  Language ALGOL 60&lt;/em&gt; is published.&lt;sup&gt;&lt;a href="#2019-09-05-lexical-and-dynamic-scope-footnote-5-definition" name="2019-09-05-lexical-and-dynamic-scope-footnote-5-return"&gt;5&lt;/a&gt;&lt;/sup&gt; While &amp;ldquo;lexical scope&amp;rdquo; is not explicitly  mentioned, it is recognizable in the specification.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;strong&gt;1964&lt;/strong&gt;. Peter Landin shows how expressions in programming languages can  be modelled in Church&amp;rsquo;s λ-notation.&lt;sup&gt;&lt;a href="#2019-09-05-lexical-and-dynamic-scope-footnote-6-definition" name="2019-09-05-lexical-and-dynamic-scope-footnote-6-return"&gt;6&lt;/a&gt;&lt;/sup&gt; He also introduces the concept of a  &lt;em&gt;closure&lt;/em&gt;, which pairs a lambda expression with the environment it was  evaluated in.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;strong&gt;1970&lt;/strong&gt;. Joel Moses describes the problem of free variables in  functions.&lt;sup&gt;&lt;a href="#2019-09-05-lexical-and-dynamic-scope-footnote-7-definition" name="2019-09-05-lexical-and-dynamic-scope-footnote-7-return"&gt;7&lt;/a&gt;&lt;/sup&gt; He considers both the &amp;ldquo;downward&amp;rdquo; case (where a function is  passed to another function) and the &amp;ldquo;upward&amp;rdquo; case (where a function returns  a function), and remarks on the correspondence between Lisp&amp;rsquo;s FUNARG device  and Landin&amp;rsquo;s closures.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;strong&gt;1975&lt;/strong&gt;. Gerald Sussman and Guy Steele publish the first Scheme paper.&lt;sup&gt;&lt;a href="#2019-09-05-lexical-and-dynamic-scope-footnote-8-definition" name="2019-09-05-lexical-and-dynamic-scope-footnote-8-return"&gt;8&lt;/a&gt;&lt;/sup&gt;  They describe their goal of a Lisp-like language that is based on the  lambda calculus. As a consequence, they implement lexical scoping with  closures, to preserve the substitution semantics of the lambda calculus.  They compare this scoping discipline to ALGOL&amp;rsquo;s.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;strong&gt;1978&lt;/strong&gt;. Steele and Sussman describe various programming language design  choices, by developing an interpreter for each programming language  variation.&lt;sup&gt;&lt;a href="#2019-09-05-lexical-and-dynamic-scope-footnote-9-definition" name="2019-09-05-lexical-and-dynamic-scope-footnote-9-return"&gt;9&lt;/a&gt;&lt;/sup&gt; In particular, they provide a detailed discussion on  lexical and dynamic scoping.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;h2 id="next-stop-r"&gt;Next stop, R&lt;/h2&gt;

&lt;p&gt;Now that we have examined the definitions of lexical and dynamic scope, and also explored some history, we are ready to return to the original question. &lt;em&gt;Is R lexically or dynamically scoped?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;a href="/blog/2019/09/10/scoping-in-r/"&gt;next blog post&lt;/a&gt;, we&amp;rsquo;ll answer that question, and also see how R can be very confusing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I would like to thank Sam Caldwell, Ben Greenman, and Artem Pelenitsyn for their comments and feedback on this blog post.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class="footnotes"&gt;
 &lt;ol&gt;
  &lt;li id="2019-09-05-lexical-and-dynamic-scope-footnote-1-definition" class="footnote-definition"&gt;
   &lt;p&gt;For example, at one point I defined lexical/dynamic scoping in terms of a &amp;ldquo;lexical environment&amp;rdquo; and a &amp;ldquo;dynamic environment.&amp;rdquo; But (1) that&amp;rsquo;s a circular definition, (2) it assumes the reader has some intuition of how a &amp;ldquo;lexical environment&amp;rdquo; is different from a &amp;ldquo;dynamic environment,&amp;rdquo; and (3) it conflates two different kinds of &amp;ldquo;environment.&amp;rdquo;&amp;nbsp;&lt;a href="#2019-09-05-lexical-and-dynamic-scope-footnote-1-return"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li id="2019-09-05-lexical-and-dynamic-scope-footnote-2-definition" class="footnote-definition"&gt;
   &lt;p&gt;G. Steele. &amp;ldquo;Scope and Extent,&amp;rdquo; in &lt;em&gt;Common Lisp the Language&lt;/em&gt;, 2nd ed. 1990. [&lt;a href="https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node43.html#SECTION00700000000000000000"&gt;Available online&lt;/a&gt;]&amp;nbsp;&lt;a href="#2019-09-05-lexical-and-dynamic-scope-footnote-2-return"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li id="2019-09-05-lexical-and-dynamic-scope-footnote-3-definition" class="footnote-definition"&gt;
   &lt;p&gt;J. McCarthy. &amp;ldquo;Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part I,&amp;rdquo; &lt;em&gt;Communications of the ACM&lt;/em&gt;, vol. 3, no. 4, April 1960. [&lt;a href="https://doi.org/10.1145/367177.367199"&gt;DOI&lt;/a&gt;][&lt;a href="http://jmc.stanford.edu/articles/recursive/recursive.pdf"&gt;Available online&lt;/a&gt;]&amp;nbsp;&lt;a href="#2019-09-05-lexical-and-dynamic-scope-footnote-3-return"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li id="2019-09-05-lexical-and-dynamic-scope-footnote-4-definition" class="footnote-definition"&gt;
   &lt;p&gt;J. McCarthy. &amp;ldquo;History of LISP,&amp;rdquo; in &lt;em&gt;History of Programming Languages&lt;/em&gt;, 1978. [&lt;a href="https://doi.org/10.1145/800025.1198360"&gt;DOI&lt;/a&gt;][&lt;a href="http://jmc.stanford.edu/articles/lisp/lisp.pdf"&gt;Available online&lt;/a&gt;]&amp;nbsp;&lt;a href="#2019-09-05-lexical-and-dynamic-scope-footnote-4-return"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li id="2019-09-05-lexical-and-dynamic-scope-footnote-5-definition" class="footnote-definition"&gt;
   &lt;p&gt;P. Naur (ed.). &amp;ldquo;Revised Report on Algorithmic Language ALGOL 60,&amp;rdquo; &lt;em&gt;Communications of the ACM&lt;/em&gt;, vol. 6, no. 1, January 1963. [&lt;a href="http://dx.doi.org/10.1145/366193.366201"&gt;DOI&lt;/a&gt;][&lt;a href="https://www.masswerk.at/algol60/report.htm"&gt;Available online&lt;/a&gt;]&amp;nbsp;&lt;a href="#2019-09-05-lexical-and-dynamic-scope-footnote-5-return"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li id="2019-09-05-lexical-and-dynamic-scope-footnote-6-definition" class="footnote-definition"&gt;
   &lt;p&gt;P. Landin. &amp;ldquo;The mechanical evaluation of expressions,&amp;rdquo; &lt;em&gt;The Computer Journal&lt;/em&gt;, vol. 6, no. 4, January 1964. [&lt;a href="https://doi.org/10.1093/comjnl/6.4.308"&gt;DOI&lt;/a&gt;][&lt;a href="https://www.cs.cmu.edu/~crary/819-f09/Landin64.pdf"&gt;Available online&lt;/a&gt;]&amp;nbsp;&lt;a href="#2019-09-05-lexical-and-dynamic-scope-footnote-6-return"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li id="2019-09-05-lexical-and-dynamic-scope-footnote-7-definition" class="footnote-definition"&gt;
   &lt;p&gt;J. Moses. &amp;ldquo;The Function of FUNCTION in LISP or Why the FUNARG Problem Should be Called the Environment Problem,&amp;rdquo; &lt;em&gt;SIGSAM Bulletin 15&lt;/em&gt;, July 1970. [&lt;a href="https://doi.org/10.1145/1093410.1093411"&gt;DOI&lt;/a&gt;][&lt;a href="https://dspace.mit.edu/handle/1721.1/5854"&gt;Available online&lt;/a&gt;]&amp;nbsp;&lt;a href="#2019-09-05-lexical-and-dynamic-scope-footnote-7-return"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li id="2019-09-05-lexical-and-dynamic-scope-footnote-8-definition" class="footnote-definition"&gt;
   &lt;p&gt;G. Sussman and G. Steele. &amp;ldquo;SCHEME: An Interpreter for Extended Lambda Calculus.&amp;rdquo; 1975. [&lt;a href="https://dspace.mit.edu/handle/1721.1/5794"&gt;Available online&lt;/a&gt;]&amp;nbsp;&lt;a href="#2019-09-05-lexical-and-dynamic-scope-footnote-8-return"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li id="2019-09-05-lexical-and-dynamic-scope-footnote-9-definition" class="footnote-definition"&gt;
   &lt;p&gt;G. Steele and G. Sussman. &amp;ldquo;The Art of the Interpreter or, The Modularity Complex (Parts Zero, One, and Two).&amp;rdquo; 1978. [&lt;a href="https://dspace.mit.edu/handle/1721.1/6094"&gt;Available online&lt;/a&gt;]&amp;nbsp;&lt;a href="#2019-09-05-lexical-and-dynamic-scope-footnote-9-return"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content></entry>
 <entry>
  <title type="text">Trees, 1973</title>
  <link rel="alternate" href="http://prl.ccs.neu.edu/blog/2017/07/19/trees-1973/?utm_source=history&amp;utm_medium=Atom" />
  <id>urn:http-prl-ccs-neu-edu:-blog-2017-07-19-trees-1973</id>
  <published>2017-07-19T21:48:56Z</published>
  <updated>2017-07-19T21:48:56Z</updated>
  <author>
   <name>Ben Greenman</name></author>
  <content type="html">
&lt;p&gt;From the PRL archives:&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;I think that I shall never see a matrix lovely as a tree. &amp;mdash; &lt;a href="/img/gls-trees-poem-1979.pdf"&gt;&lt;em&gt;Trees&lt;/em&gt;&lt;/a&gt;, by Guy L. Steele Jr., MIT, 1973&lt;/p&gt;&lt;/blockquote&gt;
&lt;!-- more--&gt;

&lt;hr /&gt;

&lt;p&gt;You might recognize the opening line from Joyce Kilmer&amp;rsquo;s 1914 poem &lt;a href="https://en.wikipedia.org/wiki/Trees_(poem)"&gt;&lt;em&gt;Trees&lt;/em&gt;&lt;/a&gt;, or from Radia Perlman&amp;rsquo;s &lt;a href="/img/p-sigcomm-1985.pdf"&gt;&lt;em&gt;Algorhyme&lt;/em&gt;&lt;/a&gt; (published 1985).&lt;/p&gt;

&lt;p&gt;The poem is online in &lt;a href="http://mercury.lcs.mit.edu/~jnc/humour/lisp.tree"&gt;at least one other place&lt;/a&gt;, but the copy linked above (from &lt;a href="https://archive.org/details/byte-magazine"&gt;BYTE magazine&lt;/a&gt;) comes with a footnote on &lt;em&gt;How this poem came to be printed&lt;/em&gt;.&lt;/p&gt;</content></entry>
 <entry>
  <title type="text">Continuations</title>
  <link rel="alternate" href="http://prl.ccs.neu.edu/blog/2017/07/17/continuations/?utm_source=history&amp;utm_medium=Atom" />
  <id>urn:http-prl-ccs-neu-edu:-blog-2017-07-17-continuations</id>
  <published>2017-07-17T12:52:07Z</published>
  <updated>2017-07-17T12:52:07Z</updated>
  <author>
   <name>Ben Greenman</name></author>
  <content type="html">
&lt;p&gt;From the PRL archives:&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;It was also a concept that grabbed my mind, ran off with it, and only returned it after substantial renovation and expansion. &amp;mdash; &lt;a href="/img/nall-continuations-1983.pdf"&gt;&lt;em&gt;Continuations&lt;/em&gt;&lt;/a&gt; by Alan Nall, Indiana University, 1983&lt;/p&gt;&lt;/blockquote&gt;
&lt;!-- more--&gt;

&lt;hr /&gt;

&lt;p&gt;I first encountered this essay on continuations in a green folder in the PRL. It turns out, the author spent a semester at Indiana University working on the  &lt;a href="http://wiki.c2.com/?SameFringeProblem"&gt;same fringe problem&lt;/a&gt; for a graduate-level programming languages course. According to &lt;a href="https://www.cs.indiana.edu/~dfried/"&gt;the instructor&lt;/a&gt;:  &amp;ldquo;What he said was true. He could not stop thinking about the problem the entire semester.&amp;rdquo; This essay was a kind of final exam.&lt;/p&gt;</content></entry>
 <entry>
  <title type="text">Meaningful Distinctions</title>
  <link rel="alternate" href="http://prl.ccs.neu.edu/blog/2016/10/31/meaningful-distinctions/?utm_source=history&amp;utm_medium=Atom" />
  <id>urn:http-prl-ccs-neu-edu:-blog-2016-10-31-meaningful-distinctions</id>
  <published>2016-10-31T17:20:33Z</published>
  <updated>2016-10-31T17:20:33Z</updated>
  <author>
   <name>Ben Greenman</name></author>
  <content type="html">
&lt;blockquote&gt;
 &lt;p&gt;&amp;ldquo;Meaningful distinctions deserve to be maintained.&amp;rdquo; &amp;mdash; Errett A. Bishop&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Likewise, memorable quotations deserve to be read in context. In this spirit, I am happy to present the above &amp;ldquo;basic principle&amp;rdquo; in its context:  &lt;a href="/img/sicm.pdf"&gt;&lt;em&gt;Schizophrenia in contemporary mathematics&lt;/em&gt; (pdf)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Read on for a brief summary.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;hr /&gt;

&lt;p&gt;I first read the above quotation in &lt;a href="http://www.michaelbeeson.com/research/papers/BishopForeword.pdf"&gt;Michael Beeson&amp;rsquo;s introduction&lt;/a&gt; to the 2012 edition of Bishop&amp;rsquo;s &lt;a href="https://www.amazon.com/Foundations-Constructive-Analysis-Errett-Bishop/dp/4871877140"&gt;&lt;em&gt;Foundations of Constructive Analysis&lt;/em&gt;&lt;/a&gt;. That was two years ago.&lt;/p&gt;

&lt;p&gt;Last month, I tried to find its context. &lt;a href="https://books.google.com/books?id=uPx8tGCaxzUC&amp;amp;pg=PA214&amp;amp;lpg=PA214&amp;amp;dq=meaningful+distinctions+deserve+to+be+maintained&amp;amp;source=bl&amp;amp;ots=cWjwOTnNuT&amp;amp;sig=wN143wNyfXtMFLGABBQM-22aSOQ&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=0ahUKEwjPwt2HmYbQAhWE6IMKHU5rB8YQ6AEIHjAA#v=onepage&amp;amp;q=meaningful%20distinctions%20deserve%20to%20be%20maintained&amp;amp;f=false"&gt;Many&lt;/a&gt; &lt;a href="https://www.jstor.org/stable/2589553"&gt;other&lt;/a&gt; &lt;a href="https://books.google.com/books?id=J4DkBwAAQBAJ&amp;amp;pg=PA6&amp;amp;lpg=PA6&amp;amp;dq=meaningful+distinctions+deserve+to+be+maintained&amp;amp;source=bl&amp;amp;ots=KYkrkBrJd_&amp;amp;sig=AAK1A_uIkQlVcYCY1TFljfA3CqA&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=0ahUKEwjPwt2HmYbQAhWE6IMKHU5rB8YQ6AEIJTAC#v=onepage&amp;amp;q=meaningful%20distinctions%20deserve%20to%20be%20maintained&amp;amp;f=false"&gt;uses&lt;/a&gt; &lt;a href="https://books.google.com/books?id=oN5nsPkXhhsC&amp;amp;pg=PR6&amp;amp;lpg=PR6&amp;amp;dq=meaningful+distinctions+deserve+to+be+maintained&amp;amp;source=bl&amp;amp;ots=4doTufVdsy&amp;amp;sig=u3e_Z_xdN-tjt9p1eqQ88juA5Ns&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=0ahUKEwjPwt2HmYbQAhWE6IMKHU5rB8YQ6AEIKDAD#v=onepage&amp;amp;q=meaningful%20distinctions%20deserve%20to%20be%20maintained&amp;amp;f=false"&gt;of&lt;/a&gt; &lt;a href="https://books.google.com/books?id=GR44SKXCZJsC&amp;amp;pg=RA1-PA199&amp;amp;lpg=RA1-PA199&amp;amp;dq=meaningful+distinctions+deserve+to+be+maintained&amp;amp;source=bl&amp;amp;ots=lNpzR5QV7h&amp;amp;sig=IGg2Q_KtreSAhrbSJxsV7mQ8xok&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=0ahUKEwjPwt2HmYbQAhWE6IMKHU5rB8YQ6AEIMDAF#v=onepage&amp;amp;q=meaningful%20distinctions%20deserve%20to%20be%20maintained&amp;amp;f=false"&gt;the&lt;/a&gt; &lt;a href="http://www.math.canterbury.ac.nz/php/groups/cm/faq/"&gt;quote&lt;/a&gt; &lt;a href="http://www.ben-sherman.net/aux/evident-logic.pdf"&gt;cited&lt;/a&gt; a &lt;em&gt;Schizophrenia in comtemporary mathematics&lt;/em&gt;, but I could not find an electronic copy. (It turns out, the AMS Bookstore page for &lt;a href="http://bookstore.ams.org/conm-39"&gt;&lt;em&gt;Erret Bishop: Reflections on Him and His Research&lt;/em&gt;&lt;/a&gt; includes a facsimile.)&lt;/p&gt;

&lt;p&gt;Lest anyone else be tempted to conjure the ancient magic of inter-library loan, here is a scan of the pages I borrowed. Thanks to the University of Toledo for supplying the hard copy.&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt; &lt;a href="/img/sicm.pdf"&gt;prl.ccs.neu.edu/img/sicm.pdf&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The document is Bishop&amp;rsquo;s &amp;ldquo;feeling for the philosophical issues involved&amp;rdquo; in constructive mathematics. First, Bishop lists &amp;ldquo;schizophrenic attributes&amp;rdquo; (trouble spots) of contemporary mathematics. Next, he gives basic principles of constructivism and Brouwer&amp;rsquo;s interpretation of the logical quantifiers. Along the way, and as a source of examples, Bishop describes integers, sets, and real numbers. The emphasis is always on common-sense meaning and finite constructions.&lt;/p&gt;

&lt;p&gt;After a brief summary and reflection, the last ten pages list recent advances in constructive mathematics and upcoming tasks. The open tasks are particularly interesting:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;systematically develop (constructive) algebra&lt;/li&gt;
 &lt;li&gt;give a constructive foundation for general topology&lt;/li&gt;
 &lt;li&gt;engage with the deeper &amp;ldquo;meaning of mathematics&amp;rdquo;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;The popular quote on &amp;ldquo;Meaningful Distinctions&amp;rdquo; appears early in the paper, as one of Bishop&amp;rsquo;s four principles that &amp;ldquo;stand out as basic&amp;rdquo; to the philosophy of constructivism:&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;A. Mathematics is common sense.&lt;/p&gt;
 &lt;p&gt;B. Do not ask whether a statement is true until you know what it means.&lt;/p&gt;
 &lt;p&gt;C. A proof is any completely convincing argument.&lt;/p&gt;
 &lt;p&gt;D. Meaningful distinctions deserve to be maintained.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I had no idea that D was &amp;ldquo;a principle&amp;rdquo;, or that it had three siblings.&lt;/p&gt;

&lt;p&gt;To further tempt you into reading the whole truth, here are some of my favorite phrases:&lt;/p&gt;

&lt;blockquote&gt;
 &lt;ul&gt;
  &lt;li&gt;One suspects that the majority of pure mathematicians &amp;hellip; ignore as much content as they possibly can.&lt;/li&gt;
  &lt;li&gt;We have geared ourselves to producing research mathematicians who will begin to write papers as soon as possible.  This anti-social and anti-intellectual process defeats even its own narrow ends.&lt;/li&gt;
  &lt;li&gt;&amp;hellip; truth is not a source of trouble to the constructivist, because of his emphasis on meaning.&lt;/li&gt;
  &lt;li&gt;&amp;hellip; guided primarily by considerations of content rather than elegance and formal attractiveness &amp;hellip;&lt;/li&gt;
  &lt;li&gt;Let me tell you what a smart sequence will do.&lt;/li&gt;
  &lt;li&gt;Classical mathematics fails to observe meaningful distinctions having to do with integers.&lt;/li&gt;
  &lt;li&gt;Constructive mathematics does not postulate a pre-existent universe, with objects lying around waiting to be collected and grouped into sets, like shells on a beach.&lt;/li&gt;
  &lt;li&gt;It might be worthwhile to investigate the possibility that constructive mathematics would afford a solid philosophical basis for the theory of computation &amp;hellip;&lt;/li&gt;
  &lt;li&gt;&amp;hellip; if the product of two real numbers is 0, we are not entitled to conclude that one of them is 0.&lt;/li&gt;
  &lt;li&gt;It is fair to say that almost nobody finds his proof intelligible.&lt;/li&gt;
  &lt;li&gt;Mathematics is such a complicated activity that disagreements are bound to arise.&lt;/li&gt;
  &lt;li&gt;Algebraic topology, at least on the elementary level, should not be too difficult to constructivize.&lt;/li&gt;
  &lt;li&gt;I hope all this accords with your common sense, as it does with mine.&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;

&lt;p&gt;Now go find their context!&lt;/p&gt;</content></entry>
 <entry>
  <title type="text">History of Actors</title>
  <link rel="alternate" href="http://prl.ccs.neu.edu/blog/2016/10/19/history-of-actors/?utm_source=history&amp;utm_medium=Atom" />
  <id>urn:http-prl-ccs-neu-edu:-blog-2016-10-19-history-of-actors</id>
  <published>2016-10-19T17:26:16Z</published>
  <updated>2016-10-19T17:26:16Z</updated>
  <author>
   <name>Tony Garnock-Jones</name></author>
  <content type="html">
&lt;p&gt;Christos Dimoulas is currently teaching a &lt;a href="http://www.seas.harvard.edu/courses/cs252/2016fa/"&gt;&amp;ldquo;History of Programming Languages&amp;rdquo; class at Harvard&lt;/a&gt;. The class is, as Christos writes, &amp;ldquo;definitely not about &lt;a href="https://www.levenez.com/lang/lang_letter.pdf"&gt;this&lt;/a&gt;&amp;rdquo;; instead, each meeting is a deep examination of a single, mature research topic, in terms of three to five key papers from the literature.&lt;/p&gt;

&lt;p&gt;On Monday, I presented &amp;ldquo;the History of Actors&amp;rdquo; for the class. I&amp;rsquo;ve made the written-out talk notes and an annotated bibliography available &lt;a href="https://eighty-twenty.org/2016/10/18/actors-hopl"&gt;here&lt;/a&gt;.&lt;/p&gt;</content></entry></feed>